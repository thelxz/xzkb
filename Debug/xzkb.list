
xzkb.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004ea8  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  0800508c  0800508c  0001508c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080050e8  080050e8  00020164  2**0
                  CONTENTS
  4 .ARM          00000000  080050e8  080050e8  00020164  2**0
                  CONTENTS
  5 .preinit_array 00000000  080050e8  080050e8  00020164  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080050e8  080050e8  000150e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080050ec  080050ec  000150ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000164  20000000  080050f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000768  20000164  08005254  00020164  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200008cc  08005254  000208cc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020164  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e784  00000000  00000000  0002018d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002617  00000000  00000000  0002e911  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000009f8  00000000  00000000  00030f28  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000008c0  00000000  00000000  00031920  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00017c9e  00000000  00000000  000321e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000a953  00000000  00000000  00049e7e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007b102  00000000  00000000  000547d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000cf8d3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000264c  00000000  00000000  000cf950  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000164 	.word	0x20000164
 8000200:	00000000 	.word	0x00000000
 8000204:	08005074 	.word	0x08005074

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000168 	.word	0x20000168
 8000220:	08005074 	.word	0x08005074

08000224 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000228:	f000 f98c 	bl	8000544 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800022c:	f000 f805 	bl	800023a <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000230:	f000 f860 	bl	80002f4 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8000234:	f004 fb46 	bl	80048c4 <MX_USB_DEVICE_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000238:	e7fe      	b.n	8000238 <main+0x14>

0800023a <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800023a:	b580      	push	{r7, lr}
 800023c:	b096      	sub	sp, #88	; 0x58
 800023e:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000240:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000244:	2228      	movs	r2, #40	; 0x28
 8000246:	2100      	movs	r1, #0
 8000248:	4618      	mov	r0, r3
 800024a:	f004 ff0b 	bl	8005064 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800024e:	f107 031c 	add.w	r3, r7, #28
 8000252:	2200      	movs	r2, #0
 8000254:	601a      	str	r2, [r3, #0]
 8000256:	605a      	str	r2, [r3, #4]
 8000258:	609a      	str	r2, [r3, #8]
 800025a:	60da      	str	r2, [r3, #12]
 800025c:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800025e:	1d3b      	adds	r3, r7, #4
 8000260:	2200      	movs	r2, #0
 8000262:	601a      	str	r2, [r3, #0]
 8000264:	605a      	str	r2, [r3, #4]
 8000266:	609a      	str	r2, [r3, #8]
 8000268:	60da      	str	r2, [r3, #12]
 800026a:	611a      	str	r2, [r3, #16]
 800026c:	615a      	str	r2, [r3, #20]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800026e:	2301      	movs	r3, #1
 8000270:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000272:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000276:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000278:	2300      	movs	r3, #0
 800027a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800027c:	2301      	movs	r3, #1
 800027e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000280:	2302      	movs	r3, #2
 8000282:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000284:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000288:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800028a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800028e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000290:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000294:	4618      	mov	r0, r3
 8000296:	f001 fb15 	bl	80018c4 <HAL_RCC_OscConfig>
 800029a:	4603      	mov	r3, r0
 800029c:	2b00      	cmp	r3, #0
 800029e:	d001      	beq.n	80002a4 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80002a0:	f000 f88e 	bl	80003c0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002a4:	230f      	movs	r3, #15
 80002a6:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002a8:	2302      	movs	r3, #2
 80002aa:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002ac:	2300      	movs	r3, #0
 80002ae:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002b4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002b6:	2300      	movs	r3, #0
 80002b8:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002ba:	f107 031c 	add.w	r3, r7, #28
 80002be:	2102      	movs	r1, #2
 80002c0:	4618      	mov	r0, r3
 80002c2:	f001 fd7f 	bl	8001dc4 <HAL_RCC_ClockConfig>
 80002c6:	4603      	mov	r3, r0
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d001      	beq.n	80002d0 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80002cc:	f000 f878 	bl	80003c0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80002d0:	2310      	movs	r3, #16
 80002d2:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80002d4:	2300      	movs	r3, #0
 80002d6:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002d8:	1d3b      	adds	r3, r7, #4
 80002da:	4618      	mov	r0, r3
 80002dc:	f001 fedc 	bl	8002098 <HAL_RCCEx_PeriphCLKConfig>
 80002e0:	4603      	mov	r3, r0
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d001      	beq.n	80002ea <SystemClock_Config+0xb0>
  {
    Error_Handler();
 80002e6:	f000 f86b 	bl	80003c0 <Error_Handler>
  }
}
 80002ea:	bf00      	nop
 80002ec:	3758      	adds	r7, #88	; 0x58
 80002ee:	46bd      	mov	sp, r7
 80002f0:	bd80      	pop	{r7, pc}
	...

080002f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002f4:	b580      	push	{r7, lr}
 80002f6:	b088      	sub	sp, #32
 80002f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002fa:	f107 0310 	add.w	r3, r7, #16
 80002fe:	2200      	movs	r2, #0
 8000300:	601a      	str	r2, [r3, #0]
 8000302:	605a      	str	r2, [r3, #4]
 8000304:	609a      	str	r2, [r3, #8]
 8000306:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000308:	4b2a      	ldr	r3, [pc, #168]	; (80003b4 <MX_GPIO_Init+0xc0>)
 800030a:	699b      	ldr	r3, [r3, #24]
 800030c:	4a29      	ldr	r2, [pc, #164]	; (80003b4 <MX_GPIO_Init+0xc0>)
 800030e:	f043 0310 	orr.w	r3, r3, #16
 8000312:	6193      	str	r3, [r2, #24]
 8000314:	4b27      	ldr	r3, [pc, #156]	; (80003b4 <MX_GPIO_Init+0xc0>)
 8000316:	699b      	ldr	r3, [r3, #24]
 8000318:	f003 0310 	and.w	r3, r3, #16
 800031c:	60fb      	str	r3, [r7, #12]
 800031e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000320:	4b24      	ldr	r3, [pc, #144]	; (80003b4 <MX_GPIO_Init+0xc0>)
 8000322:	699b      	ldr	r3, [r3, #24]
 8000324:	4a23      	ldr	r2, [pc, #140]	; (80003b4 <MX_GPIO_Init+0xc0>)
 8000326:	f043 0320 	orr.w	r3, r3, #32
 800032a:	6193      	str	r3, [r2, #24]
 800032c:	4b21      	ldr	r3, [pc, #132]	; (80003b4 <MX_GPIO_Init+0xc0>)
 800032e:	699b      	ldr	r3, [r3, #24]
 8000330:	f003 0320 	and.w	r3, r3, #32
 8000334:	60bb      	str	r3, [r7, #8]
 8000336:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000338:	4b1e      	ldr	r3, [pc, #120]	; (80003b4 <MX_GPIO_Init+0xc0>)
 800033a:	699b      	ldr	r3, [r3, #24]
 800033c:	4a1d      	ldr	r2, [pc, #116]	; (80003b4 <MX_GPIO_Init+0xc0>)
 800033e:	f043 0304 	orr.w	r3, r3, #4
 8000342:	6193      	str	r3, [r2, #24]
 8000344:	4b1b      	ldr	r3, [pc, #108]	; (80003b4 <MX_GPIO_Init+0xc0>)
 8000346:	699b      	ldr	r3, [r3, #24]
 8000348:	f003 0304 	and.w	r3, r3, #4
 800034c:	607b      	str	r3, [r7, #4]
 800034e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000350:	4b18      	ldr	r3, [pc, #96]	; (80003b4 <MX_GPIO_Init+0xc0>)
 8000352:	699b      	ldr	r3, [r3, #24]
 8000354:	4a17      	ldr	r2, [pc, #92]	; (80003b4 <MX_GPIO_Init+0xc0>)
 8000356:	f043 0308 	orr.w	r3, r3, #8
 800035a:	6193      	str	r3, [r2, #24]
 800035c:	4b15      	ldr	r3, [pc, #84]	; (80003b4 <MX_GPIO_Init+0xc0>)
 800035e:	699b      	ldr	r3, [r3, #24]
 8000360:	f003 0308 	and.w	r3, r3, #8
 8000364:	603b      	str	r3, [r7, #0]
 8000366:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, led3_Pin|led1_Pin|led2_Pin, GPIO_PIN_RESET);
 8000368:	2200      	movs	r2, #0
 800036a:	f242 010a 	movw	r1, #8202	; 0x200a
 800036e:	4812      	ldr	r0, [pc, #72]	; (80003b8 <MX_GPIO_Init+0xc4>)
 8000370:	f000 fbc2 	bl	8000af8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : led3_Pin led1_Pin led2_Pin */
  GPIO_InitStruct.Pin = led3_Pin|led1_Pin|led2_Pin;
 8000374:	f242 030a 	movw	r3, #8202	; 0x200a
 8000378:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800037a:	2301      	movs	r3, #1
 800037c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800037e:	2300      	movs	r3, #0
 8000380:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000382:	2302      	movs	r3, #2
 8000384:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000386:	f107 0310 	add.w	r3, r7, #16
 800038a:	4619      	mov	r1, r3
 800038c:	480a      	ldr	r0, [pc, #40]	; (80003b8 <MX_GPIO_Init+0xc4>)
 800038e:	f000 fa49 	bl	8000824 <HAL_GPIO_Init>

  /*Configure GPIO pins : button1_Pin button2_Pin button3_Pin */
  GPIO_InitStruct.Pin = button1_Pin|button2_Pin|button3_Pin;
 8000392:	f44f 7360 	mov.w	r3, #896	; 0x380
 8000396:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000398:	2300      	movs	r3, #0
 800039a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800039c:	2301      	movs	r3, #1
 800039e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80003a0:	f107 0310 	add.w	r3, r7, #16
 80003a4:	4619      	mov	r1, r3
 80003a6:	4805      	ldr	r0, [pc, #20]	; (80003bc <MX_GPIO_Init+0xc8>)
 80003a8:	f000 fa3c 	bl	8000824 <HAL_GPIO_Init>

}
 80003ac:	bf00      	nop
 80003ae:	3720      	adds	r7, #32
 80003b0:	46bd      	mov	sp, r7
 80003b2:	bd80      	pop	{r7, pc}
 80003b4:	40021000 	.word	0x40021000
 80003b8:	40011000 	.word	0x40011000
 80003bc:	40010c00 	.word	0x40010c00

080003c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003c0:	b480      	push	{r7}
 80003c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80003c4:	bf00      	nop
 80003c6:	46bd      	mov	sp, r7
 80003c8:	bc80      	pop	{r7}
 80003ca:	4770      	bx	lr

080003cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003cc:	b480      	push	{r7}
 80003ce:	b085      	sub	sp, #20
 80003d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80003d2:	4b13      	ldr	r3, [pc, #76]	; (8000420 <HAL_MspInit+0x54>)
 80003d4:	699b      	ldr	r3, [r3, #24]
 80003d6:	4a12      	ldr	r2, [pc, #72]	; (8000420 <HAL_MspInit+0x54>)
 80003d8:	f043 0301 	orr.w	r3, r3, #1
 80003dc:	6193      	str	r3, [r2, #24]
 80003de:	4b10      	ldr	r3, [pc, #64]	; (8000420 <HAL_MspInit+0x54>)
 80003e0:	699b      	ldr	r3, [r3, #24]
 80003e2:	f003 0301 	and.w	r3, r3, #1
 80003e6:	60bb      	str	r3, [r7, #8]
 80003e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003ea:	4b0d      	ldr	r3, [pc, #52]	; (8000420 <HAL_MspInit+0x54>)
 80003ec:	69db      	ldr	r3, [r3, #28]
 80003ee:	4a0c      	ldr	r2, [pc, #48]	; (8000420 <HAL_MspInit+0x54>)
 80003f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80003f4:	61d3      	str	r3, [r2, #28]
 80003f6:	4b0a      	ldr	r3, [pc, #40]	; (8000420 <HAL_MspInit+0x54>)
 80003f8:	69db      	ldr	r3, [r3, #28]
 80003fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80003fe:	607b      	str	r3, [r7, #4]
 8000400:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** ENABLE: Full SWJ (JTAG-DP + SW-DP): Reset State 
  */
  __HAL_AFIO_REMAP_SWJ_ENABLE();
 8000402:	4b08      	ldr	r3, [pc, #32]	; (8000424 <HAL_MspInit+0x58>)
 8000404:	685b      	ldr	r3, [r3, #4]
 8000406:	60fb      	str	r3, [r7, #12]
 8000408:	68fb      	ldr	r3, [r7, #12]
 800040a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800040e:	60fb      	str	r3, [r7, #12]
 8000410:	4a04      	ldr	r2, [pc, #16]	; (8000424 <HAL_MspInit+0x58>)
 8000412:	68fb      	ldr	r3, [r7, #12]
 8000414:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000416:	bf00      	nop
 8000418:	3714      	adds	r7, #20
 800041a:	46bd      	mov	sp, r7
 800041c:	bc80      	pop	{r7}
 800041e:	4770      	bx	lr
 8000420:	40021000 	.word	0x40021000
 8000424:	40010000 	.word	0x40010000

08000428 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000428:	b480      	push	{r7}
 800042a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800042c:	bf00      	nop
 800042e:	46bd      	mov	sp, r7
 8000430:	bc80      	pop	{r7}
 8000432:	4770      	bx	lr

08000434 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000434:	b480      	push	{r7}
 8000436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000438:	e7fe      	b.n	8000438 <HardFault_Handler+0x4>

0800043a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800043a:	b480      	push	{r7}
 800043c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800043e:	e7fe      	b.n	800043e <MemManage_Handler+0x4>

08000440 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000440:	b480      	push	{r7}
 8000442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000444:	e7fe      	b.n	8000444 <BusFault_Handler+0x4>

08000446 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000446:	b480      	push	{r7}
 8000448:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800044a:	e7fe      	b.n	800044a <UsageFault_Handler+0x4>

0800044c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800044c:	b480      	push	{r7}
 800044e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000450:	bf00      	nop
 8000452:	46bd      	mov	sp, r7
 8000454:	bc80      	pop	{r7}
 8000456:	4770      	bx	lr

08000458 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000458:	b480      	push	{r7}
 800045a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800045c:	bf00      	nop
 800045e:	46bd      	mov	sp, r7
 8000460:	bc80      	pop	{r7}
 8000462:	4770      	bx	lr

08000464 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000464:	b480      	push	{r7}
 8000466:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000468:	bf00      	nop
 800046a:	46bd      	mov	sp, r7
 800046c:	bc80      	pop	{r7}
 800046e:	4770      	bx	lr

08000470 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000470:	b580      	push	{r7, lr}
 8000472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000474:	f000 f8ac 	bl	80005d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000478:	bf00      	nop
 800047a:	bd80      	pop	{r7, pc}

0800047c <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 800047c:	b580      	push	{r7, lr}
 800047e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000480:	4802      	ldr	r0, [pc, #8]	; (800048c <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000482:	f000 fc58 	bl	8000d36 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000486:	bf00      	nop
 8000488:	bd80      	pop	{r7, pc}
 800048a:	bf00      	nop
 800048c:	20000660 	.word	0x20000660

08000490 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000490:	b480      	push	{r7}
 8000492:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8000494:	4b15      	ldr	r3, [pc, #84]	; (80004ec <SystemInit+0x5c>)
 8000496:	681b      	ldr	r3, [r3, #0]
 8000498:	4a14      	ldr	r2, [pc, #80]	; (80004ec <SystemInit+0x5c>)
 800049a:	f043 0301 	orr.w	r3, r3, #1
 800049e:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80004a0:	4b12      	ldr	r3, [pc, #72]	; (80004ec <SystemInit+0x5c>)
 80004a2:	685a      	ldr	r2, [r3, #4]
 80004a4:	4911      	ldr	r1, [pc, #68]	; (80004ec <SystemInit+0x5c>)
 80004a6:	4b12      	ldr	r3, [pc, #72]	; (80004f0 <SystemInit+0x60>)
 80004a8:	4013      	ands	r3, r2
 80004aa:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80004ac:	4b0f      	ldr	r3, [pc, #60]	; (80004ec <SystemInit+0x5c>)
 80004ae:	681b      	ldr	r3, [r3, #0]
 80004b0:	4a0e      	ldr	r2, [pc, #56]	; (80004ec <SystemInit+0x5c>)
 80004b2:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80004b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80004ba:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80004bc:	4b0b      	ldr	r3, [pc, #44]	; (80004ec <SystemInit+0x5c>)
 80004be:	681b      	ldr	r3, [r3, #0]
 80004c0:	4a0a      	ldr	r2, [pc, #40]	; (80004ec <SystemInit+0x5c>)
 80004c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80004c6:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80004c8:	4b08      	ldr	r3, [pc, #32]	; (80004ec <SystemInit+0x5c>)
 80004ca:	685b      	ldr	r3, [r3, #4]
 80004cc:	4a07      	ldr	r2, [pc, #28]	; (80004ec <SystemInit+0x5c>)
 80004ce:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80004d2:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80004d4:	4b05      	ldr	r3, [pc, #20]	; (80004ec <SystemInit+0x5c>)
 80004d6:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80004da:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80004dc:	4b05      	ldr	r3, [pc, #20]	; (80004f4 <SystemInit+0x64>)
 80004de:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80004e2:	609a      	str	r2, [r3, #8]
#endif 
}
 80004e4:	bf00      	nop
 80004e6:	46bd      	mov	sp, r7
 80004e8:	bc80      	pop	{r7}
 80004ea:	4770      	bx	lr
 80004ec:	40021000 	.word	0x40021000
 80004f0:	f8ff0000 	.word	0xf8ff0000
 80004f4:	e000ed00 	.word	0xe000ed00

080004f8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80004f8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80004fa:	e003      	b.n	8000504 <LoopCopyDataInit>

080004fc <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80004fc:	4b0b      	ldr	r3, [pc, #44]	; (800052c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80004fe:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000500:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000502:	3104      	adds	r1, #4

08000504 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000504:	480a      	ldr	r0, [pc, #40]	; (8000530 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000506:	4b0b      	ldr	r3, [pc, #44]	; (8000534 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000508:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800050a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800050c:	d3f6      	bcc.n	80004fc <CopyDataInit>
  ldr r2, =_sbss
 800050e:	4a0a      	ldr	r2, [pc, #40]	; (8000538 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000510:	e002      	b.n	8000518 <LoopFillZerobss>

08000512 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000512:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000514:	f842 3b04 	str.w	r3, [r2], #4

08000518 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000518:	4b08      	ldr	r3, [pc, #32]	; (800053c <LoopFillZerobss+0x24>)
  cmp r2, r3
 800051a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800051c:	d3f9      	bcc.n	8000512 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800051e:	f7ff ffb7 	bl	8000490 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000522:	f004 fd7b 	bl	800501c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000526:	f7ff fe7d 	bl	8000224 <main>
  bx lr
 800052a:	4770      	bx	lr
  ldr r3, =_sidata
 800052c:	080050f0 	.word	0x080050f0
  ldr r0, =_sdata
 8000530:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000534:	20000164 	.word	0x20000164
  ldr r2, =_sbss
 8000538:	20000164 	.word	0x20000164
  ldr r3, = _ebss
 800053c:	200008cc 	.word	0x200008cc

08000540 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000540:	e7fe      	b.n	8000540 <ADC1_2_IRQHandler>
	...

08000544 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000548:	4b08      	ldr	r3, [pc, #32]	; (800056c <HAL_Init+0x28>)
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	4a07      	ldr	r2, [pc, #28]	; (800056c <HAL_Init+0x28>)
 800054e:	f043 0310 	orr.w	r3, r3, #16
 8000552:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000554:	2003      	movs	r0, #3
 8000556:	f000 f923 	bl	80007a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800055a:	2000      	movs	r0, #0
 800055c:	f000 f808 	bl	8000570 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000560:	f7ff ff34 	bl	80003cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000564:	2300      	movs	r3, #0
}
 8000566:	4618      	mov	r0, r3
 8000568:	bd80      	pop	{r7, pc}
 800056a:	bf00      	nop
 800056c:	40022000 	.word	0x40022000

08000570 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b082      	sub	sp, #8
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000578:	4b12      	ldr	r3, [pc, #72]	; (80005c4 <HAL_InitTick+0x54>)
 800057a:	681a      	ldr	r2, [r3, #0]
 800057c:	4b12      	ldr	r3, [pc, #72]	; (80005c8 <HAL_InitTick+0x58>)
 800057e:	781b      	ldrb	r3, [r3, #0]
 8000580:	4619      	mov	r1, r3
 8000582:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000586:	fbb3 f3f1 	udiv	r3, r3, r1
 800058a:	fbb2 f3f3 	udiv	r3, r2, r3
 800058e:	4618      	mov	r0, r3
 8000590:	f000 f93b 	bl	800080a <HAL_SYSTICK_Config>
 8000594:	4603      	mov	r3, r0
 8000596:	2b00      	cmp	r3, #0
 8000598:	d001      	beq.n	800059e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800059a:	2301      	movs	r3, #1
 800059c:	e00e      	b.n	80005bc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	2b0f      	cmp	r3, #15
 80005a2:	d80a      	bhi.n	80005ba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005a4:	2200      	movs	r2, #0
 80005a6:	6879      	ldr	r1, [r7, #4]
 80005a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80005ac:	f000 f903 	bl	80007b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80005b0:	4a06      	ldr	r2, [pc, #24]	; (80005cc <HAL_InitTick+0x5c>)
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80005b6:	2300      	movs	r3, #0
 80005b8:	e000      	b.n	80005bc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80005ba:	2301      	movs	r3, #1
}
 80005bc:	4618      	mov	r0, r3
 80005be:	3708      	adds	r7, #8
 80005c0:	46bd      	mov	sp, r7
 80005c2:	bd80      	pop	{r7, pc}
 80005c4:	20000000 	.word	0x20000000
 80005c8:	20000008 	.word	0x20000008
 80005cc:	20000004 	.word	0x20000004

080005d0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005d0:	b480      	push	{r7}
 80005d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005d4:	4b05      	ldr	r3, [pc, #20]	; (80005ec <HAL_IncTick+0x1c>)
 80005d6:	781b      	ldrb	r3, [r3, #0]
 80005d8:	461a      	mov	r2, r3
 80005da:	4b05      	ldr	r3, [pc, #20]	; (80005f0 <HAL_IncTick+0x20>)
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	4413      	add	r3, r2
 80005e0:	4a03      	ldr	r2, [pc, #12]	; (80005f0 <HAL_IncTick+0x20>)
 80005e2:	6013      	str	r3, [r2, #0]
}
 80005e4:	bf00      	nop
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bc80      	pop	{r7}
 80005ea:	4770      	bx	lr
 80005ec:	20000008 	.word	0x20000008
 80005f0:	20000198 	.word	0x20000198

080005f4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005f4:	b480      	push	{r7}
 80005f6:	af00      	add	r7, sp, #0
  return uwTick;
 80005f8:	4b02      	ldr	r3, [pc, #8]	; (8000604 <HAL_GetTick+0x10>)
 80005fa:	681b      	ldr	r3, [r3, #0]
}
 80005fc:	4618      	mov	r0, r3
 80005fe:	46bd      	mov	sp, r7
 8000600:	bc80      	pop	{r7}
 8000602:	4770      	bx	lr
 8000604:	20000198 	.word	0x20000198

08000608 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000608:	b480      	push	{r7}
 800060a:	b085      	sub	sp, #20
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	f003 0307 	and.w	r3, r3, #7
 8000616:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000618:	4b0c      	ldr	r3, [pc, #48]	; (800064c <__NVIC_SetPriorityGrouping+0x44>)
 800061a:	68db      	ldr	r3, [r3, #12]
 800061c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800061e:	68ba      	ldr	r2, [r7, #8]
 8000620:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000624:	4013      	ands	r3, r2
 8000626:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000628:	68fb      	ldr	r3, [r7, #12]
 800062a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800062c:	68bb      	ldr	r3, [r7, #8]
 800062e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000630:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000634:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000638:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800063a:	4a04      	ldr	r2, [pc, #16]	; (800064c <__NVIC_SetPriorityGrouping+0x44>)
 800063c:	68bb      	ldr	r3, [r7, #8]
 800063e:	60d3      	str	r3, [r2, #12]
}
 8000640:	bf00      	nop
 8000642:	3714      	adds	r7, #20
 8000644:	46bd      	mov	sp, r7
 8000646:	bc80      	pop	{r7}
 8000648:	4770      	bx	lr
 800064a:	bf00      	nop
 800064c:	e000ed00 	.word	0xe000ed00

08000650 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000650:	b480      	push	{r7}
 8000652:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000654:	4b04      	ldr	r3, [pc, #16]	; (8000668 <__NVIC_GetPriorityGrouping+0x18>)
 8000656:	68db      	ldr	r3, [r3, #12]
 8000658:	0a1b      	lsrs	r3, r3, #8
 800065a:	f003 0307 	and.w	r3, r3, #7
}
 800065e:	4618      	mov	r0, r3
 8000660:	46bd      	mov	sp, r7
 8000662:	bc80      	pop	{r7}
 8000664:	4770      	bx	lr
 8000666:	bf00      	nop
 8000668:	e000ed00 	.word	0xe000ed00

0800066c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800066c:	b480      	push	{r7}
 800066e:	b083      	sub	sp, #12
 8000670:	af00      	add	r7, sp, #0
 8000672:	4603      	mov	r3, r0
 8000674:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000676:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800067a:	2b00      	cmp	r3, #0
 800067c:	db0b      	blt.n	8000696 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800067e:	79fb      	ldrb	r3, [r7, #7]
 8000680:	f003 021f 	and.w	r2, r3, #31
 8000684:	4906      	ldr	r1, [pc, #24]	; (80006a0 <__NVIC_EnableIRQ+0x34>)
 8000686:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800068a:	095b      	lsrs	r3, r3, #5
 800068c:	2001      	movs	r0, #1
 800068e:	fa00 f202 	lsl.w	r2, r0, r2
 8000692:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000696:	bf00      	nop
 8000698:	370c      	adds	r7, #12
 800069a:	46bd      	mov	sp, r7
 800069c:	bc80      	pop	{r7}
 800069e:	4770      	bx	lr
 80006a0:	e000e100 	.word	0xe000e100

080006a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006a4:	b480      	push	{r7}
 80006a6:	b083      	sub	sp, #12
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	4603      	mov	r3, r0
 80006ac:	6039      	str	r1, [r7, #0]
 80006ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	db0a      	blt.n	80006ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006b8:	683b      	ldr	r3, [r7, #0]
 80006ba:	b2da      	uxtb	r2, r3
 80006bc:	490c      	ldr	r1, [pc, #48]	; (80006f0 <__NVIC_SetPriority+0x4c>)
 80006be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006c2:	0112      	lsls	r2, r2, #4
 80006c4:	b2d2      	uxtb	r2, r2
 80006c6:	440b      	add	r3, r1
 80006c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006cc:	e00a      	b.n	80006e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006ce:	683b      	ldr	r3, [r7, #0]
 80006d0:	b2da      	uxtb	r2, r3
 80006d2:	4908      	ldr	r1, [pc, #32]	; (80006f4 <__NVIC_SetPriority+0x50>)
 80006d4:	79fb      	ldrb	r3, [r7, #7]
 80006d6:	f003 030f 	and.w	r3, r3, #15
 80006da:	3b04      	subs	r3, #4
 80006dc:	0112      	lsls	r2, r2, #4
 80006de:	b2d2      	uxtb	r2, r2
 80006e0:	440b      	add	r3, r1
 80006e2:	761a      	strb	r2, [r3, #24]
}
 80006e4:	bf00      	nop
 80006e6:	370c      	adds	r7, #12
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bc80      	pop	{r7}
 80006ec:	4770      	bx	lr
 80006ee:	bf00      	nop
 80006f0:	e000e100 	.word	0xe000e100
 80006f4:	e000ed00 	.word	0xe000ed00

080006f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006f8:	b480      	push	{r7}
 80006fa:	b089      	sub	sp, #36	; 0x24
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	60f8      	str	r0, [r7, #12]
 8000700:	60b9      	str	r1, [r7, #8]
 8000702:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000704:	68fb      	ldr	r3, [r7, #12]
 8000706:	f003 0307 	and.w	r3, r3, #7
 800070a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800070c:	69fb      	ldr	r3, [r7, #28]
 800070e:	f1c3 0307 	rsb	r3, r3, #7
 8000712:	2b04      	cmp	r3, #4
 8000714:	bf28      	it	cs
 8000716:	2304      	movcs	r3, #4
 8000718:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800071a:	69fb      	ldr	r3, [r7, #28]
 800071c:	3304      	adds	r3, #4
 800071e:	2b06      	cmp	r3, #6
 8000720:	d902      	bls.n	8000728 <NVIC_EncodePriority+0x30>
 8000722:	69fb      	ldr	r3, [r7, #28]
 8000724:	3b03      	subs	r3, #3
 8000726:	e000      	b.n	800072a <NVIC_EncodePriority+0x32>
 8000728:	2300      	movs	r3, #0
 800072a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800072c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000730:	69bb      	ldr	r3, [r7, #24]
 8000732:	fa02 f303 	lsl.w	r3, r2, r3
 8000736:	43da      	mvns	r2, r3
 8000738:	68bb      	ldr	r3, [r7, #8]
 800073a:	401a      	ands	r2, r3
 800073c:	697b      	ldr	r3, [r7, #20]
 800073e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000740:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000744:	697b      	ldr	r3, [r7, #20]
 8000746:	fa01 f303 	lsl.w	r3, r1, r3
 800074a:	43d9      	mvns	r1, r3
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000750:	4313      	orrs	r3, r2
         );
}
 8000752:	4618      	mov	r0, r3
 8000754:	3724      	adds	r7, #36	; 0x24
 8000756:	46bd      	mov	sp, r7
 8000758:	bc80      	pop	{r7}
 800075a:	4770      	bx	lr

0800075c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b082      	sub	sp, #8
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	3b01      	subs	r3, #1
 8000768:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800076c:	d301      	bcc.n	8000772 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800076e:	2301      	movs	r3, #1
 8000770:	e00f      	b.n	8000792 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000772:	4a0a      	ldr	r2, [pc, #40]	; (800079c <SysTick_Config+0x40>)
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	3b01      	subs	r3, #1
 8000778:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800077a:	210f      	movs	r1, #15
 800077c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000780:	f7ff ff90 	bl	80006a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000784:	4b05      	ldr	r3, [pc, #20]	; (800079c <SysTick_Config+0x40>)
 8000786:	2200      	movs	r2, #0
 8000788:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800078a:	4b04      	ldr	r3, [pc, #16]	; (800079c <SysTick_Config+0x40>)
 800078c:	2207      	movs	r2, #7
 800078e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000790:	2300      	movs	r3, #0
}
 8000792:	4618      	mov	r0, r3
 8000794:	3708      	adds	r7, #8
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	e000e010 	.word	0xe000e010

080007a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b082      	sub	sp, #8
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007a8:	6878      	ldr	r0, [r7, #4]
 80007aa:	f7ff ff2d 	bl	8000608 <__NVIC_SetPriorityGrouping>
}
 80007ae:	bf00      	nop
 80007b0:	3708      	adds	r7, #8
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}

080007b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80007b6:	b580      	push	{r7, lr}
 80007b8:	b086      	sub	sp, #24
 80007ba:	af00      	add	r7, sp, #0
 80007bc:	4603      	mov	r3, r0
 80007be:	60b9      	str	r1, [r7, #8]
 80007c0:	607a      	str	r2, [r7, #4]
 80007c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80007c4:	2300      	movs	r3, #0
 80007c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80007c8:	f7ff ff42 	bl	8000650 <__NVIC_GetPriorityGrouping>
 80007cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007ce:	687a      	ldr	r2, [r7, #4]
 80007d0:	68b9      	ldr	r1, [r7, #8]
 80007d2:	6978      	ldr	r0, [r7, #20]
 80007d4:	f7ff ff90 	bl	80006f8 <NVIC_EncodePriority>
 80007d8:	4602      	mov	r2, r0
 80007da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007de:	4611      	mov	r1, r2
 80007e0:	4618      	mov	r0, r3
 80007e2:	f7ff ff5f 	bl	80006a4 <__NVIC_SetPriority>
}
 80007e6:	bf00      	nop
 80007e8:	3718      	adds	r7, #24
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}

080007ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007ee:	b580      	push	{r7, lr}
 80007f0:	b082      	sub	sp, #8
 80007f2:	af00      	add	r7, sp, #0
 80007f4:	4603      	mov	r3, r0
 80007f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80007f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007fc:	4618      	mov	r0, r3
 80007fe:	f7ff ff35 	bl	800066c <__NVIC_EnableIRQ>
}
 8000802:	bf00      	nop
 8000804:	3708      	adds	r7, #8
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}

0800080a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800080a:	b580      	push	{r7, lr}
 800080c:	b082      	sub	sp, #8
 800080e:	af00      	add	r7, sp, #0
 8000810:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000812:	6878      	ldr	r0, [r7, #4]
 8000814:	f7ff ffa2 	bl	800075c <SysTick_Config>
 8000818:	4603      	mov	r3, r0
}
 800081a:	4618      	mov	r0, r3
 800081c:	3708      	adds	r7, #8
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}
	...

08000824 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000824:	b480      	push	{r7}
 8000826:	b08b      	sub	sp, #44	; 0x2c
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
 800082c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800082e:	2300      	movs	r3, #0
 8000830:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000832:	2300      	movs	r3, #0
 8000834:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000836:	e133      	b.n	8000aa0 <HAL_GPIO_Init+0x27c>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000838:	2201      	movs	r2, #1
 800083a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800083c:	fa02 f303 	lsl.w	r3, r2, r3
 8000840:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000842:	683b      	ldr	r3, [r7, #0]
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	69fa      	ldr	r2, [r7, #28]
 8000848:	4013      	ands	r3, r2
 800084a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800084c:	69ba      	ldr	r2, [r7, #24]
 800084e:	69fb      	ldr	r3, [r7, #28]
 8000850:	429a      	cmp	r2, r3
 8000852:	f040 8122 	bne.w	8000a9a <HAL_GPIO_Init+0x276>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000856:	683b      	ldr	r3, [r7, #0]
 8000858:	685b      	ldr	r3, [r3, #4]
 800085a:	2b12      	cmp	r3, #18
 800085c:	d034      	beq.n	80008c8 <HAL_GPIO_Init+0xa4>
 800085e:	2b12      	cmp	r3, #18
 8000860:	d80d      	bhi.n	800087e <HAL_GPIO_Init+0x5a>
 8000862:	2b02      	cmp	r3, #2
 8000864:	d02b      	beq.n	80008be <HAL_GPIO_Init+0x9a>
 8000866:	2b02      	cmp	r3, #2
 8000868:	d804      	bhi.n	8000874 <HAL_GPIO_Init+0x50>
 800086a:	2b00      	cmp	r3, #0
 800086c:	d031      	beq.n	80008d2 <HAL_GPIO_Init+0xae>
 800086e:	2b01      	cmp	r3, #1
 8000870:	d01c      	beq.n	80008ac <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000872:	e048      	b.n	8000906 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000874:	2b03      	cmp	r3, #3
 8000876:	d043      	beq.n	8000900 <HAL_GPIO_Init+0xdc>
 8000878:	2b11      	cmp	r3, #17
 800087a:	d01b      	beq.n	80008b4 <HAL_GPIO_Init+0x90>
          break;
 800087c:	e043      	b.n	8000906 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800087e:	4a8f      	ldr	r2, [pc, #572]	; (8000abc <HAL_GPIO_Init+0x298>)
 8000880:	4293      	cmp	r3, r2
 8000882:	d026      	beq.n	80008d2 <HAL_GPIO_Init+0xae>
 8000884:	4a8d      	ldr	r2, [pc, #564]	; (8000abc <HAL_GPIO_Init+0x298>)
 8000886:	4293      	cmp	r3, r2
 8000888:	d806      	bhi.n	8000898 <HAL_GPIO_Init+0x74>
 800088a:	4a8d      	ldr	r2, [pc, #564]	; (8000ac0 <HAL_GPIO_Init+0x29c>)
 800088c:	4293      	cmp	r3, r2
 800088e:	d020      	beq.n	80008d2 <HAL_GPIO_Init+0xae>
 8000890:	4a8c      	ldr	r2, [pc, #560]	; (8000ac4 <HAL_GPIO_Init+0x2a0>)
 8000892:	4293      	cmp	r3, r2
 8000894:	d01d      	beq.n	80008d2 <HAL_GPIO_Init+0xae>
          break;
 8000896:	e036      	b.n	8000906 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000898:	4a8b      	ldr	r2, [pc, #556]	; (8000ac8 <HAL_GPIO_Init+0x2a4>)
 800089a:	4293      	cmp	r3, r2
 800089c:	d019      	beq.n	80008d2 <HAL_GPIO_Init+0xae>
 800089e:	4a8b      	ldr	r2, [pc, #556]	; (8000acc <HAL_GPIO_Init+0x2a8>)
 80008a0:	4293      	cmp	r3, r2
 80008a2:	d016      	beq.n	80008d2 <HAL_GPIO_Init+0xae>
 80008a4:	4a8a      	ldr	r2, [pc, #552]	; (8000ad0 <HAL_GPIO_Init+0x2ac>)
 80008a6:	4293      	cmp	r3, r2
 80008a8:	d013      	beq.n	80008d2 <HAL_GPIO_Init+0xae>
          break;
 80008aa:	e02c      	b.n	8000906 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80008ac:	683b      	ldr	r3, [r7, #0]
 80008ae:	68db      	ldr	r3, [r3, #12]
 80008b0:	623b      	str	r3, [r7, #32]
          break;
 80008b2:	e028      	b.n	8000906 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80008b4:	683b      	ldr	r3, [r7, #0]
 80008b6:	68db      	ldr	r3, [r3, #12]
 80008b8:	3304      	adds	r3, #4
 80008ba:	623b      	str	r3, [r7, #32]
          break;
 80008bc:	e023      	b.n	8000906 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80008be:	683b      	ldr	r3, [r7, #0]
 80008c0:	68db      	ldr	r3, [r3, #12]
 80008c2:	3308      	adds	r3, #8
 80008c4:	623b      	str	r3, [r7, #32]
          break;
 80008c6:	e01e      	b.n	8000906 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80008c8:	683b      	ldr	r3, [r7, #0]
 80008ca:	68db      	ldr	r3, [r3, #12]
 80008cc:	330c      	adds	r3, #12
 80008ce:	623b      	str	r3, [r7, #32]
          break;
 80008d0:	e019      	b.n	8000906 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80008d2:	683b      	ldr	r3, [r7, #0]
 80008d4:	689b      	ldr	r3, [r3, #8]
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d102      	bne.n	80008e0 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80008da:	2304      	movs	r3, #4
 80008dc:	623b      	str	r3, [r7, #32]
          break;
 80008de:	e012      	b.n	8000906 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80008e0:	683b      	ldr	r3, [r7, #0]
 80008e2:	689b      	ldr	r3, [r3, #8]
 80008e4:	2b01      	cmp	r3, #1
 80008e6:	d105      	bne.n	80008f4 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80008e8:	2308      	movs	r3, #8
 80008ea:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	69fa      	ldr	r2, [r7, #28]
 80008f0:	611a      	str	r2, [r3, #16]
          break;
 80008f2:	e008      	b.n	8000906 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80008f4:	2308      	movs	r3, #8
 80008f6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	69fa      	ldr	r2, [r7, #28]
 80008fc:	615a      	str	r2, [r3, #20]
          break;
 80008fe:	e002      	b.n	8000906 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000900:	2300      	movs	r3, #0
 8000902:	623b      	str	r3, [r7, #32]
          break;
 8000904:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000906:	69bb      	ldr	r3, [r7, #24]
 8000908:	2bff      	cmp	r3, #255	; 0xff
 800090a:	d801      	bhi.n	8000910 <HAL_GPIO_Init+0xec>
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	e001      	b.n	8000914 <HAL_GPIO_Init+0xf0>
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	3304      	adds	r3, #4
 8000914:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000916:	69bb      	ldr	r3, [r7, #24]
 8000918:	2bff      	cmp	r3, #255	; 0xff
 800091a:	d802      	bhi.n	8000922 <HAL_GPIO_Init+0xfe>
 800091c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800091e:	009b      	lsls	r3, r3, #2
 8000920:	e002      	b.n	8000928 <HAL_GPIO_Init+0x104>
 8000922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000924:	3b08      	subs	r3, #8
 8000926:	009b      	lsls	r3, r3, #2
 8000928:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800092a:	697b      	ldr	r3, [r7, #20]
 800092c:	681a      	ldr	r2, [r3, #0]
 800092e:	210f      	movs	r1, #15
 8000930:	693b      	ldr	r3, [r7, #16]
 8000932:	fa01 f303 	lsl.w	r3, r1, r3
 8000936:	43db      	mvns	r3, r3
 8000938:	401a      	ands	r2, r3
 800093a:	6a39      	ldr	r1, [r7, #32]
 800093c:	693b      	ldr	r3, [r7, #16]
 800093e:	fa01 f303 	lsl.w	r3, r1, r3
 8000942:	431a      	orrs	r2, r3
 8000944:	697b      	ldr	r3, [r7, #20]
 8000946:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000948:	683b      	ldr	r3, [r7, #0]
 800094a:	685b      	ldr	r3, [r3, #4]
 800094c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000950:	2b00      	cmp	r3, #0
 8000952:	f000 80a2 	beq.w	8000a9a <HAL_GPIO_Init+0x276>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000956:	4b5f      	ldr	r3, [pc, #380]	; (8000ad4 <HAL_GPIO_Init+0x2b0>)
 8000958:	699b      	ldr	r3, [r3, #24]
 800095a:	4a5e      	ldr	r2, [pc, #376]	; (8000ad4 <HAL_GPIO_Init+0x2b0>)
 800095c:	f043 0301 	orr.w	r3, r3, #1
 8000960:	6193      	str	r3, [r2, #24]
 8000962:	4b5c      	ldr	r3, [pc, #368]	; (8000ad4 <HAL_GPIO_Init+0x2b0>)
 8000964:	699b      	ldr	r3, [r3, #24]
 8000966:	f003 0301 	and.w	r3, r3, #1
 800096a:	60bb      	str	r3, [r7, #8]
 800096c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800096e:	4a5a      	ldr	r2, [pc, #360]	; (8000ad8 <HAL_GPIO_Init+0x2b4>)
 8000970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000972:	089b      	lsrs	r3, r3, #2
 8000974:	3302      	adds	r3, #2
 8000976:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800097a:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800097c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800097e:	f003 0303 	and.w	r3, r3, #3
 8000982:	009b      	lsls	r3, r3, #2
 8000984:	220f      	movs	r2, #15
 8000986:	fa02 f303 	lsl.w	r3, r2, r3
 800098a:	43db      	mvns	r3, r3
 800098c:	68fa      	ldr	r2, [r7, #12]
 800098e:	4013      	ands	r3, r2
 8000990:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	4a51      	ldr	r2, [pc, #324]	; (8000adc <HAL_GPIO_Init+0x2b8>)
 8000996:	4293      	cmp	r3, r2
 8000998:	d01f      	beq.n	80009da <HAL_GPIO_Init+0x1b6>
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	4a50      	ldr	r2, [pc, #320]	; (8000ae0 <HAL_GPIO_Init+0x2bc>)
 800099e:	4293      	cmp	r3, r2
 80009a0:	d019      	beq.n	80009d6 <HAL_GPIO_Init+0x1b2>
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	4a4f      	ldr	r2, [pc, #316]	; (8000ae4 <HAL_GPIO_Init+0x2c0>)
 80009a6:	4293      	cmp	r3, r2
 80009a8:	d013      	beq.n	80009d2 <HAL_GPIO_Init+0x1ae>
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	4a4e      	ldr	r2, [pc, #312]	; (8000ae8 <HAL_GPIO_Init+0x2c4>)
 80009ae:	4293      	cmp	r3, r2
 80009b0:	d00d      	beq.n	80009ce <HAL_GPIO_Init+0x1aa>
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	4a4d      	ldr	r2, [pc, #308]	; (8000aec <HAL_GPIO_Init+0x2c8>)
 80009b6:	4293      	cmp	r3, r2
 80009b8:	d007      	beq.n	80009ca <HAL_GPIO_Init+0x1a6>
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	4a4c      	ldr	r2, [pc, #304]	; (8000af0 <HAL_GPIO_Init+0x2cc>)
 80009be:	4293      	cmp	r3, r2
 80009c0:	d101      	bne.n	80009c6 <HAL_GPIO_Init+0x1a2>
 80009c2:	2305      	movs	r3, #5
 80009c4:	e00a      	b.n	80009dc <HAL_GPIO_Init+0x1b8>
 80009c6:	2306      	movs	r3, #6
 80009c8:	e008      	b.n	80009dc <HAL_GPIO_Init+0x1b8>
 80009ca:	2304      	movs	r3, #4
 80009cc:	e006      	b.n	80009dc <HAL_GPIO_Init+0x1b8>
 80009ce:	2303      	movs	r3, #3
 80009d0:	e004      	b.n	80009dc <HAL_GPIO_Init+0x1b8>
 80009d2:	2302      	movs	r3, #2
 80009d4:	e002      	b.n	80009dc <HAL_GPIO_Init+0x1b8>
 80009d6:	2301      	movs	r3, #1
 80009d8:	e000      	b.n	80009dc <HAL_GPIO_Init+0x1b8>
 80009da:	2300      	movs	r3, #0
 80009dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80009de:	f002 0203 	and.w	r2, r2, #3
 80009e2:	0092      	lsls	r2, r2, #2
 80009e4:	4093      	lsls	r3, r2
 80009e6:	68fa      	ldr	r2, [r7, #12]
 80009e8:	4313      	orrs	r3, r2
 80009ea:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80009ec:	493a      	ldr	r1, [pc, #232]	; (8000ad8 <HAL_GPIO_Init+0x2b4>)
 80009ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009f0:	089b      	lsrs	r3, r3, #2
 80009f2:	3302      	adds	r3, #2
 80009f4:	68fa      	ldr	r2, [r7, #12]
 80009f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80009fa:	683b      	ldr	r3, [r7, #0]
 80009fc:	685b      	ldr	r3, [r3, #4]
 80009fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d006      	beq.n	8000a14 <HAL_GPIO_Init+0x1f0>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000a06:	4b3b      	ldr	r3, [pc, #236]	; (8000af4 <HAL_GPIO_Init+0x2d0>)
 8000a08:	681a      	ldr	r2, [r3, #0]
 8000a0a:	493a      	ldr	r1, [pc, #232]	; (8000af4 <HAL_GPIO_Init+0x2d0>)
 8000a0c:	69bb      	ldr	r3, [r7, #24]
 8000a0e:	4313      	orrs	r3, r2
 8000a10:	600b      	str	r3, [r1, #0]
 8000a12:	e006      	b.n	8000a22 <HAL_GPIO_Init+0x1fe>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000a14:	4b37      	ldr	r3, [pc, #220]	; (8000af4 <HAL_GPIO_Init+0x2d0>)
 8000a16:	681a      	ldr	r2, [r3, #0]
 8000a18:	69bb      	ldr	r3, [r7, #24]
 8000a1a:	43db      	mvns	r3, r3
 8000a1c:	4935      	ldr	r1, [pc, #212]	; (8000af4 <HAL_GPIO_Init+0x2d0>)
 8000a1e:	4013      	ands	r3, r2
 8000a20:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a22:	683b      	ldr	r3, [r7, #0]
 8000a24:	685b      	ldr	r3, [r3, #4]
 8000a26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d006      	beq.n	8000a3c <HAL_GPIO_Init+0x218>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000a2e:	4b31      	ldr	r3, [pc, #196]	; (8000af4 <HAL_GPIO_Init+0x2d0>)
 8000a30:	685a      	ldr	r2, [r3, #4]
 8000a32:	4930      	ldr	r1, [pc, #192]	; (8000af4 <HAL_GPIO_Init+0x2d0>)
 8000a34:	69bb      	ldr	r3, [r7, #24]
 8000a36:	4313      	orrs	r3, r2
 8000a38:	604b      	str	r3, [r1, #4]
 8000a3a:	e006      	b.n	8000a4a <HAL_GPIO_Init+0x226>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000a3c:	4b2d      	ldr	r3, [pc, #180]	; (8000af4 <HAL_GPIO_Init+0x2d0>)
 8000a3e:	685a      	ldr	r2, [r3, #4]
 8000a40:	69bb      	ldr	r3, [r7, #24]
 8000a42:	43db      	mvns	r3, r3
 8000a44:	492b      	ldr	r1, [pc, #172]	; (8000af4 <HAL_GPIO_Init+0x2d0>)
 8000a46:	4013      	ands	r3, r2
 8000a48:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000a4a:	683b      	ldr	r3, [r7, #0]
 8000a4c:	685b      	ldr	r3, [r3, #4]
 8000a4e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d006      	beq.n	8000a64 <HAL_GPIO_Init+0x240>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000a56:	4b27      	ldr	r3, [pc, #156]	; (8000af4 <HAL_GPIO_Init+0x2d0>)
 8000a58:	689a      	ldr	r2, [r3, #8]
 8000a5a:	4926      	ldr	r1, [pc, #152]	; (8000af4 <HAL_GPIO_Init+0x2d0>)
 8000a5c:	69bb      	ldr	r3, [r7, #24]
 8000a5e:	4313      	orrs	r3, r2
 8000a60:	608b      	str	r3, [r1, #8]
 8000a62:	e006      	b.n	8000a72 <HAL_GPIO_Init+0x24e>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000a64:	4b23      	ldr	r3, [pc, #140]	; (8000af4 <HAL_GPIO_Init+0x2d0>)
 8000a66:	689a      	ldr	r2, [r3, #8]
 8000a68:	69bb      	ldr	r3, [r7, #24]
 8000a6a:	43db      	mvns	r3, r3
 8000a6c:	4921      	ldr	r1, [pc, #132]	; (8000af4 <HAL_GPIO_Init+0x2d0>)
 8000a6e:	4013      	ands	r3, r2
 8000a70:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000a72:	683b      	ldr	r3, [r7, #0]
 8000a74:	685b      	ldr	r3, [r3, #4]
 8000a76:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d006      	beq.n	8000a8c <HAL_GPIO_Init+0x268>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000a7e:	4b1d      	ldr	r3, [pc, #116]	; (8000af4 <HAL_GPIO_Init+0x2d0>)
 8000a80:	68da      	ldr	r2, [r3, #12]
 8000a82:	491c      	ldr	r1, [pc, #112]	; (8000af4 <HAL_GPIO_Init+0x2d0>)
 8000a84:	69bb      	ldr	r3, [r7, #24]
 8000a86:	4313      	orrs	r3, r2
 8000a88:	60cb      	str	r3, [r1, #12]
 8000a8a:	e006      	b.n	8000a9a <HAL_GPIO_Init+0x276>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000a8c:	4b19      	ldr	r3, [pc, #100]	; (8000af4 <HAL_GPIO_Init+0x2d0>)
 8000a8e:	68da      	ldr	r2, [r3, #12]
 8000a90:	69bb      	ldr	r3, [r7, #24]
 8000a92:	43db      	mvns	r3, r3
 8000a94:	4917      	ldr	r1, [pc, #92]	; (8000af4 <HAL_GPIO_Init+0x2d0>)
 8000a96:	4013      	ands	r3, r2
 8000a98:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a9c:	3301      	adds	r3, #1
 8000a9e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000aa0:	683b      	ldr	r3, [r7, #0]
 8000aa2:	681a      	ldr	r2, [r3, #0]
 8000aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000aa6:	fa22 f303 	lsr.w	r3, r2, r3
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	f47f aec4 	bne.w	8000838 <HAL_GPIO_Init+0x14>
  }
}
 8000ab0:	bf00      	nop
 8000ab2:	372c      	adds	r7, #44	; 0x2c
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bc80      	pop	{r7}
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop
 8000abc:	10210000 	.word	0x10210000
 8000ac0:	10110000 	.word	0x10110000
 8000ac4:	10120000 	.word	0x10120000
 8000ac8:	10310000 	.word	0x10310000
 8000acc:	10320000 	.word	0x10320000
 8000ad0:	10220000 	.word	0x10220000
 8000ad4:	40021000 	.word	0x40021000
 8000ad8:	40010000 	.word	0x40010000
 8000adc:	40010800 	.word	0x40010800
 8000ae0:	40010c00 	.word	0x40010c00
 8000ae4:	40011000 	.word	0x40011000
 8000ae8:	40011400 	.word	0x40011400
 8000aec:	40011800 	.word	0x40011800
 8000af0:	40011c00 	.word	0x40011c00
 8000af4:	40010400 	.word	0x40010400

08000af8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000af8:	b480      	push	{r7}
 8000afa:	b083      	sub	sp, #12
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
 8000b00:	460b      	mov	r3, r1
 8000b02:	807b      	strh	r3, [r7, #2]
 8000b04:	4613      	mov	r3, r2
 8000b06:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000b08:	787b      	ldrb	r3, [r7, #1]
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d003      	beq.n	8000b16 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000b0e:	887a      	ldrh	r2, [r7, #2]
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000b14:	e003      	b.n	8000b1e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000b16:	887b      	ldrh	r3, [r7, #2]
 8000b18:	041a      	lsls	r2, r3, #16
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	611a      	str	r2, [r3, #16]
}
 8000b1e:	bf00      	nop
 8000b20:	370c      	adds	r7, #12
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bc80      	pop	{r7}
 8000b26:	4770      	bx	lr

08000b28 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000b28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b2a:	b08b      	sub	sp, #44	; 0x2c
 8000b2c:	af06      	add	r7, sp, #24
 8000b2e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d101      	bne.n	8000b3a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000b36:	2301      	movs	r3, #1
 8000b38:	e0d3      	b.n	8000ce2 <HAL_PCD_Init+0x1ba>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	f893 3229 	ldrb.w	r3, [r3, #553]	; 0x229
 8000b40:	b2db      	uxtb	r3, r3
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d106      	bne.n	8000b54 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	2200      	movs	r2, #0
 8000b4a:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000b4e:	6878      	ldr	r0, [r7, #4]
 8000b50:	f003 ffec 	bl	8004b2c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	2203      	movs	r2, #3
 8000b58:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	4618      	mov	r0, r3
 8000b62:	f001 fb76 	bl	8002252 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	603b      	str	r3, [r7, #0]
 8000b6c:	687e      	ldr	r6, [r7, #4]
 8000b6e:	466d      	mov	r5, sp
 8000b70:	f106 0410 	add.w	r4, r6, #16
 8000b74:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000b76:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000b78:	6823      	ldr	r3, [r4, #0]
 8000b7a:	602b      	str	r3, [r5, #0]
 8000b7c:	1d33      	adds	r3, r6, #4
 8000b7e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000b80:	6838      	ldr	r0, [r7, #0]
 8000b82:	f001 fb3f 	bl	8002204 <USB_CoreInit>
 8000b86:	4603      	mov	r3, r0
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d005      	beq.n	8000b98 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	2202      	movs	r2, #2
 8000b90:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 8000b94:	2301      	movs	r3, #1
 8000b96:	e0a4      	b.n	8000ce2 <HAL_PCD_Init+0x1ba>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	2100      	movs	r1, #0
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f001 fb73 	bl	800228a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	73fb      	strb	r3, [r7, #15]
 8000ba8:	e035      	b.n	8000c16 <HAL_PCD_Init+0xee>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000baa:	7bfb      	ldrb	r3, [r7, #15]
 8000bac:	687a      	ldr	r2, [r7, #4]
 8000bae:	015b      	lsls	r3, r3, #5
 8000bb0:	4413      	add	r3, r2
 8000bb2:	3329      	adds	r3, #41	; 0x29
 8000bb4:	2201      	movs	r2, #1
 8000bb6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000bb8:	7bfb      	ldrb	r3, [r7, #15]
 8000bba:	687a      	ldr	r2, [r7, #4]
 8000bbc:	015b      	lsls	r3, r3, #5
 8000bbe:	4413      	add	r3, r2
 8000bc0:	3328      	adds	r3, #40	; 0x28
 8000bc2:	7bfa      	ldrb	r2, [r7, #15]
 8000bc4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000bc6:	7bfb      	ldrb	r3, [r7, #15]
 8000bc8:	7bfa      	ldrb	r2, [r7, #15]
 8000bca:	b291      	uxth	r1, r2
 8000bcc:	687a      	ldr	r2, [r7, #4]
 8000bce:	015b      	lsls	r3, r3, #5
 8000bd0:	4413      	add	r3, r2
 8000bd2:	3336      	adds	r3, #54	; 0x36
 8000bd4:	460a      	mov	r2, r1
 8000bd6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000bd8:	7bfb      	ldrb	r3, [r7, #15]
 8000bda:	687a      	ldr	r2, [r7, #4]
 8000bdc:	015b      	lsls	r3, r3, #5
 8000bde:	4413      	add	r3, r2
 8000be0:	332b      	adds	r3, #43	; 0x2b
 8000be2:	2200      	movs	r2, #0
 8000be4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000be6:	7bfb      	ldrb	r3, [r7, #15]
 8000be8:	687a      	ldr	r2, [r7, #4]
 8000bea:	015b      	lsls	r3, r3, #5
 8000bec:	4413      	add	r3, r2
 8000bee:	3338      	adds	r3, #56	; 0x38
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000bf4:	7bfb      	ldrb	r3, [r7, #15]
 8000bf6:	687a      	ldr	r2, [r7, #4]
 8000bf8:	015b      	lsls	r3, r3, #5
 8000bfa:	4413      	add	r3, r2
 8000bfc:	333c      	adds	r3, #60	; 0x3c
 8000bfe:	2200      	movs	r2, #0
 8000c00:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000c02:	7bfb      	ldrb	r3, [r7, #15]
 8000c04:	687a      	ldr	r2, [r7, #4]
 8000c06:	3302      	adds	r3, #2
 8000c08:	015b      	lsls	r3, r3, #5
 8000c0a:	4413      	add	r3, r2
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000c10:	7bfb      	ldrb	r3, [r7, #15]
 8000c12:	3301      	adds	r3, #1
 8000c14:	73fb      	strb	r3, [r7, #15]
 8000c16:	7bfa      	ldrb	r2, [r7, #15]
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	685b      	ldr	r3, [r3, #4]
 8000c1c:	429a      	cmp	r2, r3
 8000c1e:	d3c4      	bcc.n	8000baa <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000c20:	2300      	movs	r3, #0
 8000c22:	73fb      	strb	r3, [r7, #15]
 8000c24:	e031      	b.n	8000c8a <HAL_PCD_Init+0x162>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000c26:	7bfb      	ldrb	r3, [r7, #15]
 8000c28:	687a      	ldr	r2, [r7, #4]
 8000c2a:	015b      	lsls	r3, r3, #5
 8000c2c:	4413      	add	r3, r2
 8000c2e:	f203 1329 	addw	r3, r3, #297	; 0x129
 8000c32:	2200      	movs	r2, #0
 8000c34:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000c36:	7bfb      	ldrb	r3, [r7, #15]
 8000c38:	687a      	ldr	r2, [r7, #4]
 8000c3a:	015b      	lsls	r3, r3, #5
 8000c3c:	4413      	add	r3, r2
 8000c3e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8000c42:	7bfa      	ldrb	r2, [r7, #15]
 8000c44:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000c46:	7bfb      	ldrb	r3, [r7, #15]
 8000c48:	687a      	ldr	r2, [r7, #4]
 8000c4a:	015b      	lsls	r3, r3, #5
 8000c4c:	4413      	add	r3, r2
 8000c4e:	f203 132b 	addw	r3, r3, #299	; 0x12b
 8000c52:	2200      	movs	r2, #0
 8000c54:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000c56:	7bfb      	ldrb	r3, [r7, #15]
 8000c58:	687a      	ldr	r2, [r7, #4]
 8000c5a:	015b      	lsls	r3, r3, #5
 8000c5c:	4413      	add	r3, r2
 8000c5e:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8000c62:	2200      	movs	r2, #0
 8000c64:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000c66:	7bfb      	ldrb	r3, [r7, #15]
 8000c68:	687a      	ldr	r2, [r7, #4]
 8000c6a:	015b      	lsls	r3, r3, #5
 8000c6c:	4413      	add	r3, r2
 8000c6e:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8000c72:	2200      	movs	r2, #0
 8000c74:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000c76:	7bfb      	ldrb	r3, [r7, #15]
 8000c78:	687a      	ldr	r2, [r7, #4]
 8000c7a:	330a      	adds	r3, #10
 8000c7c:	015b      	lsls	r3, r3, #5
 8000c7e:	4413      	add	r3, r2
 8000c80:	2200      	movs	r2, #0
 8000c82:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000c84:	7bfb      	ldrb	r3, [r7, #15]
 8000c86:	3301      	adds	r3, #1
 8000c88:	73fb      	strb	r3, [r7, #15]
 8000c8a:	7bfa      	ldrb	r2, [r7, #15]
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	685b      	ldr	r3, [r3, #4]
 8000c90:	429a      	cmp	r2, r3
 8000c92:	d3c8      	bcc.n	8000c26 <HAL_PCD_Init+0xfe>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	603b      	str	r3, [r7, #0]
 8000c9a:	687e      	ldr	r6, [r7, #4]
 8000c9c:	466d      	mov	r5, sp
 8000c9e:	f106 0410 	add.w	r4, r6, #16
 8000ca2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ca4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000ca6:	6823      	ldr	r3, [r4, #0]
 8000ca8:	602b      	str	r3, [r5, #0]
 8000caa:	1d33      	adds	r3, r6, #4
 8000cac:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000cae:	6838      	ldr	r0, [r7, #0]
 8000cb0:	f001 faf7 	bl	80022a2 <USB_DevInit>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d005      	beq.n	8000cc6 <HAL_PCD_Init+0x19e>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	2202      	movs	r2, #2
 8000cbe:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 8000cc2:	2301      	movs	r3, #1
 8000cc4:	e00d      	b.n	8000ce2 <HAL_PCD_Init+0x1ba>
  }

  hpcd->USB_Address = 0U;
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	2200      	movs	r2, #0
 8000cca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	2201      	movs	r2, #1
 8000cd2:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
  (void)USB_DevDisconnect(hpcd->Instance);
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	4618      	mov	r0, r3
 8000cdc:	f002 fb35 	bl	800334a <USB_DevDisconnect>

  return HAL_OK;
 8000ce0:	2300      	movs	r3, #0
}
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	3714      	adds	r7, #20
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000cea <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8000cea:	b580      	push	{r7, lr}
 8000cec:	b082      	sub	sp, #8
 8000cee:	af00      	add	r7, sp, #0
 8000cf0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8000cf8:	2b01      	cmp	r3, #1
 8000cfa:	d101      	bne.n	8000d00 <HAL_PCD_Start+0x16>
 8000cfc:	2302      	movs	r3, #2
 8000cfe:	e016      	b.n	8000d2e <HAL_PCD_Start+0x44>
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	2201      	movs	r2, #1
 8000d04:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8000d08:	2101      	movs	r1, #1
 8000d0a:	6878      	ldr	r0, [r7, #4]
 8000d0c:	f004 f94f 	bl	8004fae <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */
  (void)USB_DevConnect(hpcd->Instance);
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	4618      	mov	r0, r3
 8000d16:	f002 fb0e 	bl	8003336 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	4618      	mov	r0, r3
 8000d20:	f001 fa80 	bl	8002224 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	2200      	movs	r2, #0
 8000d28:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8000d2c:	2300      	movs	r3, #0
}
 8000d2e:	4618      	mov	r0, r3
 8000d30:	3708      	adds	r7, #8
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}

08000d36 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8000d36:	b580      	push	{r7, lr}
 8000d38:	b082      	sub	sp, #8
 8000d3a:	af00      	add	r7, sp, #0
 8000d3c:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	4618      	mov	r0, r3
 8000d44:	f002 fb0b 	bl	800335e <USB_ReadInterrupts>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000d4e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000d52:	d102      	bne.n	8000d5a <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8000d54:	6878      	ldr	r0, [r7, #4]
 8000d56:	f000 fadf 	bl	8001318 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	4618      	mov	r0, r3
 8000d60:	f002 fafd 	bl	800335e <USB_ReadInterrupts>
 8000d64:	4603      	mov	r3, r0
 8000d66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000d6e:	d112      	bne.n	8000d96 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000d78:	b29a      	uxth	r2, r3
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000d82:	b292      	uxth	r2, r2
 8000d84:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8000d88:	6878      	ldr	r0, [r7, #4]
 8000d8a:	f003 ff44 	bl	8004c16 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8000d8e:	2100      	movs	r1, #0
 8000d90:	6878      	ldr	r0, [r7, #4]
 8000d92:	f000 f8de 	bl	8000f52 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	f002 fadf 	bl	800335e <USB_ReadInterrupts>
 8000da0:	4603      	mov	r3, r0
 8000da2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000da6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000daa:	d10b      	bne.n	8000dc4 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000db4:	b29a      	uxth	r2, r3
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8000dbe:	b292      	uxth	r2, r2
 8000dc0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	4618      	mov	r0, r3
 8000dca:	f002 fac8 	bl	800335e <USB_ReadInterrupts>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000dd4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000dd8:	d10b      	bne.n	8000df2 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000de2:	b29a      	uxth	r2, r3
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8000dec:	b292      	uxth	r2, r2
 8000dee:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	4618      	mov	r0, r3
 8000df8:	f002 fab1 	bl	800335e <USB_ReadInterrupts>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000e06:	d126      	bne.n	8000e56 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000e10:	b29a      	uxth	r2, r3
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	f022 0204 	bic.w	r2, r2, #4
 8000e1a:	b292      	uxth	r2, r2
 8000e1c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000e28:	b29a      	uxth	r2, r3
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	f022 0208 	bic.w	r2, r2, #8
 8000e32:	b292      	uxth	r2, r2
 8000e34:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8000e38:	6878      	ldr	r0, [r7, #4]
 8000e3a:	f003 ff25 	bl	8004c88 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000e46:	b29a      	uxth	r2, r3
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000e50:	b292      	uxth	r2, r2
 8000e52:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f002 fa7f 	bl	800335e <USB_ReadInterrupts>
 8000e60:	4603      	mov	r3, r0
 8000e62:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000e66:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000e6a:	d13d      	bne.n	8000ee8 <HAL_PCD_IRQHandler+0x1b2>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000e74:	b29a      	uxth	r2, r3
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	f042 0208 	orr.w	r2, r2, #8
 8000e7e:	b292      	uxth	r2, r2
 8000e80:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000e8c:	b29a      	uxth	r2, r3
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000e96:	b292      	uxth	r2, r2
 8000e98:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= USB_CNTR_LP_MODE;
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000ea4:	b29a      	uxth	r2, r3
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	f042 0204 	orr.w	r2, r2, #4
 8000eae:	b292      	uxth	r2, r2
 8000eb0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* WA: Clear Wakeup flag if raised with suspend signal */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	4618      	mov	r0, r3
 8000eba:	f002 fa50 	bl	800335e <USB_ReadInterrupts>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000ec4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000ec8:	d10b      	bne.n	8000ee2 <HAL_PCD_IRQHandler+0x1ac>
    {
       __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000ed2:	b29a      	uxth	r2, r3
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000edc:	b292      	uxth	r2, r2
 8000ede:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8000ee2:	6878      	ldr	r0, [r7, #4]
 8000ee4:	f003 feb6 	bl	8004c54 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	4618      	mov	r0, r3
 8000eee:	f002 fa36 	bl	800335e <USB_ReadInterrupts>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000ef8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000efc:	d10e      	bne.n	8000f1c <HAL_PCD_IRQHandler+0x1e6>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000f06:	b29a      	uxth	r2, r3
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000f10:	b292      	uxth	r2, r2
 8000f12:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8000f16:	6878      	ldr	r0, [r7, #4]
 8000f18:	f003 fe6f 	bl	8004bfa <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	4618      	mov	r0, r3
 8000f22:	f002 fa1c 	bl	800335e <USB_ReadInterrupts>
 8000f26:	4603      	mov	r3, r0
 8000f28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f2c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000f30:	d10b      	bne.n	8000f4a <HAL_PCD_IRQHandler+0x214>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000f3a:	b29a      	uxth	r2, r3
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000f44:	b292      	uxth	r2, r2
 8000f46:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8000f4a:	bf00      	nop
 8000f4c:	3708      	adds	r7, #8
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}

08000f52 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8000f52:	b580      	push	{r7, lr}
 8000f54:	b082      	sub	sp, #8
 8000f56:	af00      	add	r7, sp, #0
 8000f58:	6078      	str	r0, [r7, #4]
 8000f5a:	460b      	mov	r3, r1
 8000f5c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8000f64:	2b01      	cmp	r3, #1
 8000f66:	d101      	bne.n	8000f6c <HAL_PCD_SetAddress+0x1a>
 8000f68:	2302      	movs	r3, #2
 8000f6a:	e013      	b.n	8000f94 <HAL_PCD_SetAddress+0x42>
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	2201      	movs	r2, #1
 8000f70:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  hpcd->USB_Address = address;
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	78fa      	ldrb	r2, [r7, #3]
 8000f78:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	78fa      	ldrb	r2, [r7, #3]
 8000f82:	4611      	mov	r1, r2
 8000f84:	4618      	mov	r0, r3
 8000f86:	f002 f9c3 	bl	8003310 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8000f92:	2300      	movs	r3, #0
}
 8000f94:	4618      	mov	r0, r3
 8000f96:	3708      	adds	r7, #8
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}

08000f9c <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b084      	sub	sp, #16
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
 8000fa4:	4608      	mov	r0, r1
 8000fa6:	4611      	mov	r1, r2
 8000fa8:	461a      	mov	r2, r3
 8000faa:	4603      	mov	r3, r0
 8000fac:	70fb      	strb	r3, [r7, #3]
 8000fae:	460b      	mov	r3, r1
 8000fb0:	803b      	strh	r3, [r7, #0]
 8000fb2:	4613      	mov	r3, r2
 8000fb4:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8000fba:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	da0b      	bge.n	8000fda <HAL_PCD_EP_Open+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000fc2:	78fb      	ldrb	r3, [r7, #3]
 8000fc4:	f003 0307 	and.w	r3, r3, #7
 8000fc8:	015b      	lsls	r3, r3, #5
 8000fca:	3328      	adds	r3, #40	; 0x28
 8000fcc:	687a      	ldr	r2, [r7, #4]
 8000fce:	4413      	add	r3, r2
 8000fd0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	2201      	movs	r2, #1
 8000fd6:	705a      	strb	r2, [r3, #1]
 8000fd8:	e00b      	b.n	8000ff2 <HAL_PCD_EP_Open+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8000fda:	78fb      	ldrb	r3, [r7, #3]
 8000fdc:	f003 0307 	and.w	r3, r3, #7
 8000fe0:	015b      	lsls	r3, r3, #5
 8000fe2:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8000fe6:	687a      	ldr	r2, [r7, #4]
 8000fe8:	4413      	add	r3, r2
 8000fea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	2200      	movs	r2, #0
 8000ff0:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8000ff2:	78fb      	ldrb	r3, [r7, #3]
 8000ff4:	f003 0307 	and.w	r3, r3, #7
 8000ff8:	b2da      	uxtb	r2, r3
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8000ffe:	883a      	ldrh	r2, [r7, #0]
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	78ba      	ldrb	r2, [r7, #2]
 8001008:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	785b      	ldrb	r3, [r3, #1]
 800100e:	2b00      	cmp	r3, #0
 8001010:	d004      	beq.n	800101c <HAL_PCD_EP_Open+0x80>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	781b      	ldrb	r3, [r3, #0]
 8001016:	b29a      	uxth	r2, r3
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800101c:	78bb      	ldrb	r3, [r7, #2]
 800101e:	2b02      	cmp	r3, #2
 8001020:	d102      	bne.n	8001028 <HAL_PCD_EP_Open+0x8c>
  {
    ep->data_pid_start = 0U;
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	2200      	movs	r2, #0
 8001026:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 800102e:	2b01      	cmp	r3, #1
 8001030:	d101      	bne.n	8001036 <HAL_PCD_EP_Open+0x9a>
 8001032:	2302      	movs	r3, #2
 8001034:	e00e      	b.n	8001054 <HAL_PCD_EP_Open+0xb8>
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	2201      	movs	r2, #1
 800103a:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	68f9      	ldr	r1, [r7, #12]
 8001044:	4618      	mov	r0, r3
 8001046:	f001 f951 	bl	80022ec <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	2200      	movs	r2, #0
 800104e:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return ret;
 8001052:	7afb      	ldrb	r3, [r7, #11]
}
 8001054:	4618      	mov	r0, r3
 8001056:	3710      	adds	r7, #16
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}

0800105c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b084      	sub	sp, #16
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
 8001064:	460b      	mov	r3, r1
 8001066:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001068:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800106c:	2b00      	cmp	r3, #0
 800106e:	da0b      	bge.n	8001088 <HAL_PCD_EP_Close+0x2c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001070:	78fb      	ldrb	r3, [r7, #3]
 8001072:	f003 0307 	and.w	r3, r3, #7
 8001076:	015b      	lsls	r3, r3, #5
 8001078:	3328      	adds	r3, #40	; 0x28
 800107a:	687a      	ldr	r2, [r7, #4]
 800107c:	4413      	add	r3, r2
 800107e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	2201      	movs	r2, #1
 8001084:	705a      	strb	r2, [r3, #1]
 8001086:	e00b      	b.n	80010a0 <HAL_PCD_EP_Close+0x44>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001088:	78fb      	ldrb	r3, [r7, #3]
 800108a:	f003 0307 	and.w	r3, r3, #7
 800108e:	015b      	lsls	r3, r3, #5
 8001090:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001094:	687a      	ldr	r2, [r7, #4]
 8001096:	4413      	add	r3, r2
 8001098:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	2200      	movs	r2, #0
 800109e:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80010a0:	78fb      	ldrb	r3, [r7, #3]
 80010a2:	f003 0307 	and.w	r3, r3, #7
 80010a6:	b2da      	uxtb	r2, r3
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 80010b2:	2b01      	cmp	r3, #1
 80010b4:	d101      	bne.n	80010ba <HAL_PCD_EP_Close+0x5e>
 80010b6:	2302      	movs	r3, #2
 80010b8:	e00e      	b.n	80010d8 <HAL_PCD_EP_Close+0x7c>
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	2201      	movs	r2, #1
 80010be:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	68f9      	ldr	r1, [r7, #12]
 80010c8:	4618      	mov	r0, r3
 80010ca:	f001 fbfd 	bl	80028c8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	2200      	movs	r2, #0
 80010d2:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 80010d6:	2300      	movs	r3, #0
}
 80010d8:	4618      	mov	r0, r3
 80010da:	3710      	adds	r7, #16
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}

080010e0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b086      	sub	sp, #24
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	60f8      	str	r0, [r7, #12]
 80010e8:	607a      	str	r2, [r7, #4]
 80010ea:	603b      	str	r3, [r7, #0]
 80010ec:	460b      	mov	r3, r1
 80010ee:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80010f0:	7afb      	ldrb	r3, [r7, #11]
 80010f2:	f003 0307 	and.w	r3, r3, #7
 80010f6:	015b      	lsls	r3, r3, #5
 80010f8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80010fc:	68fa      	ldr	r2, [r7, #12]
 80010fe:	4413      	add	r3, r2
 8001100:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001102:	697b      	ldr	r3, [r7, #20]
 8001104:	687a      	ldr	r2, [r7, #4]
 8001106:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001108:	697b      	ldr	r3, [r7, #20]
 800110a:	683a      	ldr	r2, [r7, #0]
 800110c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800110e:	697b      	ldr	r3, [r7, #20]
 8001110:	2200      	movs	r2, #0
 8001112:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001114:	697b      	ldr	r3, [r7, #20]
 8001116:	2200      	movs	r2, #0
 8001118:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800111a:	7afb      	ldrb	r3, [r7, #11]
 800111c:	f003 0307 	and.w	r3, r3, #7
 8001120:	b2da      	uxtb	r2, r3
 8001122:	697b      	ldr	r3, [r7, #20]
 8001124:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001126:	7afb      	ldrb	r3, [r7, #11]
 8001128:	f003 0307 	and.w	r3, r3, #7
 800112c:	2b00      	cmp	r3, #0
 800112e:	d106      	bne.n	800113e <HAL_PCD_EP_Receive+0x5e>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	6979      	ldr	r1, [r7, #20]
 8001136:	4618      	mov	r0, r3
 8001138:	f001 fd5c 	bl	8002bf4 <USB_EPStartXfer>
 800113c:	e005      	b.n	800114a <HAL_PCD_EP_Receive+0x6a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	6979      	ldr	r1, [r7, #20]
 8001144:	4618      	mov	r0, r3
 8001146:	f001 fd55 	bl	8002bf4 <USB_EPStartXfer>
  }

  return HAL_OK;
 800114a:	2300      	movs	r3, #0
}
 800114c:	4618      	mov	r0, r3
 800114e:	3718      	adds	r7, #24
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}

08001154 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b086      	sub	sp, #24
 8001158:	af00      	add	r7, sp, #0
 800115a:	60f8      	str	r0, [r7, #12]
 800115c:	607a      	str	r2, [r7, #4]
 800115e:	603b      	str	r3, [r7, #0]
 8001160:	460b      	mov	r3, r1
 8001162:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001164:	7afb      	ldrb	r3, [r7, #11]
 8001166:	f003 0307 	and.w	r3, r3, #7
 800116a:	015b      	lsls	r3, r3, #5
 800116c:	3328      	adds	r3, #40	; 0x28
 800116e:	68fa      	ldr	r2, [r7, #12]
 8001170:	4413      	add	r3, r2
 8001172:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001174:	697b      	ldr	r3, [r7, #20]
 8001176:	687a      	ldr	r2, [r7, #4]
 8001178:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800117a:	697b      	ldr	r3, [r7, #20]
 800117c:	683a      	ldr	r2, [r7, #0]
 800117e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001180:	697b      	ldr	r3, [r7, #20]
 8001182:	2200      	movs	r2, #0
 8001184:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001186:	697b      	ldr	r3, [r7, #20]
 8001188:	2201      	movs	r2, #1
 800118a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800118c:	7afb      	ldrb	r3, [r7, #11]
 800118e:	f003 0307 	and.w	r3, r3, #7
 8001192:	b2da      	uxtb	r2, r3
 8001194:	697b      	ldr	r3, [r7, #20]
 8001196:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001198:	7afb      	ldrb	r3, [r7, #11]
 800119a:	f003 0307 	and.w	r3, r3, #7
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d106      	bne.n	80011b0 <HAL_PCD_EP_Transmit+0x5c>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	6979      	ldr	r1, [r7, #20]
 80011a8:	4618      	mov	r0, r3
 80011aa:	f001 fd23 	bl	8002bf4 <USB_EPStartXfer>
 80011ae:	e005      	b.n	80011bc <HAL_PCD_EP_Transmit+0x68>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	6979      	ldr	r1, [r7, #20]
 80011b6:	4618      	mov	r0, r3
 80011b8:	f001 fd1c 	bl	8002bf4 <USB_EPStartXfer>
  }

  return HAL_OK;
 80011bc:	2300      	movs	r3, #0
}
 80011be:	4618      	mov	r0, r3
 80011c0:	3718      	adds	r7, #24
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}

080011c6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80011c6:	b580      	push	{r7, lr}
 80011c8:	b084      	sub	sp, #16
 80011ca:	af00      	add	r7, sp, #0
 80011cc:	6078      	str	r0, [r7, #4]
 80011ce:	460b      	mov	r3, r1
 80011d0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80011d2:	78fb      	ldrb	r3, [r7, #3]
 80011d4:	f003 0207 	and.w	r2, r3, #7
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	429a      	cmp	r2, r3
 80011de:	d901      	bls.n	80011e4 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80011e0:	2301      	movs	r3, #1
 80011e2:	e046      	b.n	8001272 <HAL_PCD_EP_SetStall+0xac>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80011e4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	da0b      	bge.n	8001204 <HAL_PCD_EP_SetStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80011ec:	78fb      	ldrb	r3, [r7, #3]
 80011ee:	f003 0307 	and.w	r3, r3, #7
 80011f2:	015b      	lsls	r3, r3, #5
 80011f4:	3328      	adds	r3, #40	; 0x28
 80011f6:	687a      	ldr	r2, [r7, #4]
 80011f8:	4413      	add	r3, r2
 80011fa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	2201      	movs	r2, #1
 8001200:	705a      	strb	r2, [r3, #1]
 8001202:	e009      	b.n	8001218 <HAL_PCD_EP_SetStall+0x52>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001204:	78fb      	ldrb	r3, [r7, #3]
 8001206:	015b      	lsls	r3, r3, #5
 8001208:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800120c:	687a      	ldr	r2, [r7, #4]
 800120e:	4413      	add	r3, r2
 8001210:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	2200      	movs	r2, #0
 8001216:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	2201      	movs	r2, #1
 800121c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800121e:	78fb      	ldrb	r3, [r7, #3]
 8001220:	f003 0307 	and.w	r3, r3, #7
 8001224:	b2da      	uxtb	r2, r3
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8001230:	2b01      	cmp	r3, #1
 8001232:	d101      	bne.n	8001238 <HAL_PCD_EP_SetStall+0x72>
 8001234:	2302      	movs	r3, #2
 8001236:	e01c      	b.n	8001272 <HAL_PCD_EP_SetStall+0xac>
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	2201      	movs	r2, #1
 800123c:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	68f9      	ldr	r1, [r7, #12]
 8001246:	4618      	mov	r0, r3
 8001248:	f001 ff8c 	bl	8003164 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800124c:	78fb      	ldrb	r3, [r7, #3]
 800124e:	f003 0307 	and.w	r3, r3, #7
 8001252:	2b00      	cmp	r3, #0
 8001254:	d108      	bne.n	8001268 <HAL_PCD_EP_SetStall+0xa2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681a      	ldr	r2, [r3, #0]
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8001260:	4619      	mov	r1, r3
 8001262:	4610      	mov	r0, r2
 8001264:	f002 f88a 	bl	800337c <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	2200      	movs	r2, #0
 800126c:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 8001270:	2300      	movs	r3, #0
}
 8001272:	4618      	mov	r0, r3
 8001274:	3710      	adds	r7, #16
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}

0800127a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800127a:	b580      	push	{r7, lr}
 800127c:	b084      	sub	sp, #16
 800127e:	af00      	add	r7, sp, #0
 8001280:	6078      	str	r0, [r7, #4]
 8001282:	460b      	mov	r3, r1
 8001284:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001286:	78fb      	ldrb	r3, [r7, #3]
 8001288:	f003 020f 	and.w	r2, r3, #15
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	429a      	cmp	r2, r3
 8001292:	d901      	bls.n	8001298 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001294:	2301      	movs	r3, #1
 8001296:	e03a      	b.n	800130e <HAL_PCD_EP_ClrStall+0x94>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001298:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800129c:	2b00      	cmp	r3, #0
 800129e:	da0b      	bge.n	80012b8 <HAL_PCD_EP_ClrStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80012a0:	78fb      	ldrb	r3, [r7, #3]
 80012a2:	f003 0307 	and.w	r3, r3, #7
 80012a6:	015b      	lsls	r3, r3, #5
 80012a8:	3328      	adds	r3, #40	; 0x28
 80012aa:	687a      	ldr	r2, [r7, #4]
 80012ac:	4413      	add	r3, r2
 80012ae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	2201      	movs	r2, #1
 80012b4:	705a      	strb	r2, [r3, #1]
 80012b6:	e00b      	b.n	80012d0 <HAL_PCD_EP_ClrStall+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80012b8:	78fb      	ldrb	r3, [r7, #3]
 80012ba:	f003 0307 	and.w	r3, r3, #7
 80012be:	015b      	lsls	r3, r3, #5
 80012c0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80012c4:	687a      	ldr	r2, [r7, #4]
 80012c6:	4413      	add	r3, r2
 80012c8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	2200      	movs	r2, #0
 80012ce:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	2200      	movs	r2, #0
 80012d4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80012d6:	78fb      	ldrb	r3, [r7, #3]
 80012d8:	f003 0307 	and.w	r3, r3, #7
 80012dc:	b2da      	uxtb	r2, r3
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 80012e8:	2b01      	cmp	r3, #1
 80012ea:	d101      	bne.n	80012f0 <HAL_PCD_EP_ClrStall+0x76>
 80012ec:	2302      	movs	r3, #2
 80012ee:	e00e      	b.n	800130e <HAL_PCD_EP_ClrStall+0x94>
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	2201      	movs	r2, #1
 80012f4:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	68f9      	ldr	r1, [r7, #12]
 80012fe:	4618      	mov	r0, r3
 8001300:	f001 ff72 	bl	80031e8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	2200      	movs	r2, #0
 8001308:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 800130c:	2300      	movs	r3, #0
}
 800130e:	4618      	mov	r0, r3
 8001310:	3710      	adds	r7, #16
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
	...

08001318 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001318:	b590      	push	{r4, r7, lr}
 800131a:	b089      	sub	sp, #36	; 0x24
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  uint16_t wIstr;
  uint16_t wEPVal;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001320:	e282      	b.n	8001828 <PCD_EP_ISR_Handler+0x510>
  {
    wIstr = hpcd->Instance->ISTR;
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800132a:	82fb      	strh	r3, [r7, #22]
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800132c:	8afb      	ldrh	r3, [r7, #22]
 800132e:	b2db      	uxtb	r3, r3
 8001330:	f003 030f 	and.w	r3, r3, #15
 8001334:	757b      	strb	r3, [r7, #21]

    if (epindex == 0U)
 8001336:	7d7b      	ldrb	r3, [r7, #21]
 8001338:	2b00      	cmp	r3, #0
 800133a:	f040 8142 	bne.w	80015c2 <PCD_EP_ISR_Handler+0x2aa>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800133e:	8afb      	ldrh	r3, [r7, #22]
 8001340:	f003 0310 	and.w	r3, r3, #16
 8001344:	2b00      	cmp	r3, #0
 8001346:	d151      	bne.n	80013ec <PCD_EP_ISR_Handler+0xd4>
      {
        /* DIR = 0 */

        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	881b      	ldrh	r3, [r3, #0]
 800134e:	b29b      	uxth	r3, r3
 8001350:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001354:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001358:	b29c      	uxth	r4, r3
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681a      	ldr	r2, [r3, #0]
 800135e:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 8001362:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001366:	b29b      	uxth	r3, r3
 8001368:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	3328      	adds	r3, #40	; 0x28
 800136e:	60fb      	str	r3, [r7, #12]

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001378:	b29b      	uxth	r3, r3
 800137a:	461a      	mov	r2, r3
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	781b      	ldrb	r3, [r3, #0]
 8001380:	00db      	lsls	r3, r3, #3
 8001382:	4413      	add	r3, r2
 8001384:	3302      	adds	r3, #2
 8001386:	005b      	lsls	r3, r3, #1
 8001388:	687a      	ldr	r2, [r7, #4]
 800138a:	6812      	ldr	r2, [r2, #0]
 800138c:	4413      	add	r3, r2
 800138e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001392:	881b      	ldrh	r3, [r3, #0]
 8001394:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	695a      	ldr	r2, [r3, #20]
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	69db      	ldr	r3, [r3, #28]
 80013a4:	441a      	add	r2, r3
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80013aa:	2100      	movs	r1, #0
 80013ac:	6878      	ldr	r0, [r7, #4]
 80013ae:	f003 fc0d 	bl	8004bcc <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80013b8:	b2db      	uxtb	r3, r3
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	f000 8234 	beq.w	8001828 <PCD_EP_ISR_Handler+0x510>
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	699b      	ldr	r3, [r3, #24]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	f040 822f 	bne.w	8001828 <PCD_EP_ISR_Handler+0x510>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80013d0:	b2db      	uxtb	r3, r3
 80013d2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80013d6:	b2da      	uxtb	r2, r3
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	b292      	uxth	r2, r2
 80013de:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	2200      	movs	r2, #0
 80013e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80013ea:	e21d      	b.n	8001828 <PCD_EP_ISR_Handler+0x510>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80013f2:	60fb      	str	r3, [r7, #12]
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	881b      	ldrh	r3, [r3, #0]
 80013fa:	827b      	strh	r3, [r7, #18]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80013fc:	8a7b      	ldrh	r3, [r7, #18]
 80013fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001402:	2b00      	cmp	r3, #0
 8001404:	d033      	beq.n	800146e <PCD_EP_ISR_Handler+0x156>
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800140e:	b29b      	uxth	r3, r3
 8001410:	461a      	mov	r2, r3
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	781b      	ldrb	r3, [r3, #0]
 8001416:	00db      	lsls	r3, r3, #3
 8001418:	4413      	add	r3, r2
 800141a:	3306      	adds	r3, #6
 800141c:	005b      	lsls	r3, r3, #1
 800141e:	687a      	ldr	r2, [r7, #4]
 8001420:	6812      	ldr	r2, [r2, #0]
 8001422:	4413      	add	r3, r2
 8001424:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001428:	881b      	ldrh	r3, [r3, #0]
 800142a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	6818      	ldr	r0, [r3, #0]
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	f503 710c 	add.w	r1, r3, #560	; 0x230
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001444:	b29b      	uxth	r3, r3
 8001446:	f001 ffe8 	bl	800341a <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1*/
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	881b      	ldrh	r3, [r3, #0]
 8001450:	b29a      	uxth	r2, r3
 8001452:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001456:	4013      	ands	r3, r2
 8001458:	b29c      	uxth	r4, r3
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8001462:	b292      	uxth	r2, r2
 8001464:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001466:	6878      	ldr	r0, [r7, #4]
 8001468:	f003 fb86 	bl	8004b78 <HAL_PCD_SetupStageCallback>
 800146c:	e1dc      	b.n	8001828 <PCD_EP_ISR_Handler+0x510>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }

        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800146e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001472:	2b00      	cmp	r3, #0
 8001474:	f280 81d8 	bge.w	8001828 <PCD_EP_ISR_Handler+0x510>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	881b      	ldrh	r3, [r3, #0]
 800147e:	b29a      	uxth	r2, r3
 8001480:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001484:	4013      	ands	r3, r2
 8001486:	b29c      	uxth	r4, r3
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8001490:	b292      	uxth	r2, r2
 8001492:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800149c:	b29b      	uxth	r3, r3
 800149e:	461a      	mov	r2, r3
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	781b      	ldrb	r3, [r3, #0]
 80014a4:	00db      	lsls	r3, r3, #3
 80014a6:	4413      	add	r3, r2
 80014a8:	3306      	adds	r3, #6
 80014aa:	005b      	lsls	r3, r3, #1
 80014ac:	687a      	ldr	r2, [r7, #4]
 80014ae:	6812      	ldr	r2, [r2, #0]
 80014b0:	4413      	add	r3, r2
 80014b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80014b6:	881b      	ldrh	r3, [r3, #0]
 80014b8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	69db      	ldr	r3, [r3, #28]
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d019      	beq.n	80014fc <PCD_EP_ISR_Handler+0x1e4>
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	695b      	ldr	r3, [r3, #20]
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d015      	beq.n	80014fc <PCD_EP_ISR_Handler+0x1e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	6818      	ldr	r0, [r3, #0]
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	6959      	ldr	r1, [r3, #20]
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80014e0:	b29b      	uxth	r3, r3
 80014e2:	f001 ff9a 	bl	800341a <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	695a      	ldr	r2, [r3, #20]
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	69db      	ldr	r3, [r3, #28]
 80014ee:	441a      	add	r2, r3
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80014f4:	2100      	movs	r1, #0
 80014f6:	6878      	ldr	r0, [r7, #4]
 80014f8:	f003 fb50 	bl	8004b9c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	461c      	mov	r4, r3
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800150a:	b29b      	uxth	r3, r3
 800150c:	441c      	add	r4, r3
 800150e:	f204 430c 	addw	r3, r4, #1036	; 0x40c
 8001512:	461c      	mov	r4, r3
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	691b      	ldr	r3, [r3, #16]
 8001518:	2b00      	cmp	r3, #0
 800151a:	d10e      	bne.n	800153a <PCD_EP_ISR_Handler+0x222>
 800151c:	8823      	ldrh	r3, [r4, #0]
 800151e:	b29b      	uxth	r3, r3
 8001520:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001524:	b29b      	uxth	r3, r3
 8001526:	8023      	strh	r3, [r4, #0]
 8001528:	8823      	ldrh	r3, [r4, #0]
 800152a:	b29b      	uxth	r3, r3
 800152c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001530:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001534:	b29b      	uxth	r3, r3
 8001536:	8023      	strh	r3, [r4, #0]
 8001538:	e02d      	b.n	8001596 <PCD_EP_ISR_Handler+0x27e>
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	691b      	ldr	r3, [r3, #16]
 800153e:	2b3e      	cmp	r3, #62	; 0x3e
 8001540:	d812      	bhi.n	8001568 <PCD_EP_ISR_Handler+0x250>
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	691b      	ldr	r3, [r3, #16]
 8001546:	085b      	lsrs	r3, r3, #1
 8001548:	61bb      	str	r3, [r7, #24]
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	691b      	ldr	r3, [r3, #16]
 800154e:	f003 0301 	and.w	r3, r3, #1
 8001552:	2b00      	cmp	r3, #0
 8001554:	d002      	beq.n	800155c <PCD_EP_ISR_Handler+0x244>
 8001556:	69bb      	ldr	r3, [r7, #24]
 8001558:	3301      	adds	r3, #1
 800155a:	61bb      	str	r3, [r7, #24]
 800155c:	69bb      	ldr	r3, [r7, #24]
 800155e:	b29b      	uxth	r3, r3
 8001560:	029b      	lsls	r3, r3, #10
 8001562:	b29b      	uxth	r3, r3
 8001564:	8023      	strh	r3, [r4, #0]
 8001566:	e016      	b.n	8001596 <PCD_EP_ISR_Handler+0x27e>
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	691b      	ldr	r3, [r3, #16]
 800156c:	095b      	lsrs	r3, r3, #5
 800156e:	61bb      	str	r3, [r7, #24]
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	691b      	ldr	r3, [r3, #16]
 8001574:	f003 031f 	and.w	r3, r3, #31
 8001578:	2b00      	cmp	r3, #0
 800157a:	d102      	bne.n	8001582 <PCD_EP_ISR_Handler+0x26a>
 800157c:	69bb      	ldr	r3, [r7, #24]
 800157e:	3b01      	subs	r3, #1
 8001580:	61bb      	str	r3, [r7, #24]
 8001582:	69bb      	ldr	r3, [r7, #24]
 8001584:	b29b      	uxth	r3, r3
 8001586:	029b      	lsls	r3, r3, #10
 8001588:	b29b      	uxth	r3, r3
 800158a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800158e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001592:	b29b      	uxth	r3, r3
 8001594:	8023      	strh	r3, [r4, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	881b      	ldrh	r3, [r3, #0]
 800159c:	b29b      	uxth	r3, r3
 800159e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80015a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80015a6:	b29c      	uxth	r4, r3
 80015a8:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 80015ac:	b29c      	uxth	r4, r3
 80015ae:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 80015b2:	b29c      	uxth	r4, r3
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681a      	ldr	r2, [r3, #0]
 80015b8:	4ba2      	ldr	r3, [pc, #648]	; (8001844 <PCD_EP_ISR_Handler+0x52c>)
 80015ba:	4323      	orrs	r3, r4
 80015bc:	b29b      	uxth	r3, r3
 80015be:	8013      	strh	r3, [r2, #0]
 80015c0:	e132      	b.n	8001828 <PCD_EP_ISR_Handler+0x510>
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	461a      	mov	r2, r3
 80015c8:	7d7b      	ldrb	r3, [r7, #21]
 80015ca:	009b      	lsls	r3, r3, #2
 80015cc:	4413      	add	r3, r2
 80015ce:	881b      	ldrh	r3, [r3, #0]
 80015d0:	827b      	strh	r3, [r7, #18]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80015d2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	f280 80d1 	bge.w	800177e <PCD_EP_ISR_Handler+0x466>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	461a      	mov	r2, r3
 80015e2:	7d7b      	ldrb	r3, [r7, #21]
 80015e4:	009b      	lsls	r3, r3, #2
 80015e6:	4413      	add	r3, r2
 80015e8:	881b      	ldrh	r3, [r3, #0]
 80015ea:	b29a      	uxth	r2, r3
 80015ec:	f640 738f 	movw	r3, #3983	; 0xf8f
 80015f0:	4013      	ands	r3, r2
 80015f2:	b29c      	uxth	r4, r3
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	461a      	mov	r2, r3
 80015fa:	7d7b      	ldrb	r3, [r7, #21]
 80015fc:	009b      	lsls	r3, r3, #2
 80015fe:	4413      	add	r3, r2
 8001600:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8001604:	b292      	uxth	r2, r2
 8001606:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001608:	7d7b      	ldrb	r3, [r7, #21]
 800160a:	015b      	lsls	r3, r3, #5
 800160c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001610:	687a      	ldr	r2, [r7, #4]
 8001612:	4413      	add	r3, r2
 8001614:	60fb      	str	r3, [r7, #12]

        /* OUT double Buffering*/
        if (ep->doublebuffer == 0U)
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	7b1b      	ldrb	r3, [r3, #12]
 800161a:	2b00      	cmp	r3, #0
 800161c:	d121      	bne.n	8001662 <PCD_EP_ISR_Handler+0x34a>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001626:	b29b      	uxth	r3, r3
 8001628:	461a      	mov	r2, r3
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	781b      	ldrb	r3, [r3, #0]
 800162e:	00db      	lsls	r3, r3, #3
 8001630:	4413      	add	r3, r2
 8001632:	3306      	adds	r3, #6
 8001634:	005b      	lsls	r3, r3, #1
 8001636:	687a      	ldr	r2, [r7, #4]
 8001638:	6812      	ldr	r2, [r2, #0]
 800163a:	4413      	add	r3, r2
 800163c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001640:	881b      	ldrh	r3, [r3, #0]
 8001642:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001646:	83fb      	strh	r3, [r7, #30]
          if (count != 0U)
 8001648:	8bfb      	ldrh	r3, [r7, #30]
 800164a:	2b00      	cmp	r3, #0
 800164c:	d072      	beq.n	8001734 <PCD_EP_ISR_Handler+0x41c>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	6818      	ldr	r0, [r3, #0]
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	6959      	ldr	r1, [r3, #20]
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	88da      	ldrh	r2, [r3, #6]
 800165a:	8bfb      	ldrh	r3, [r7, #30]
 800165c:	f001 fedd 	bl	800341a <USB_ReadPMA>
 8001660:	e068      	b.n	8001734 <PCD_EP_ISR_Handler+0x41c>
          }
        }
        else
        {
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	461a      	mov	r2, r3
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	781b      	ldrb	r3, [r3, #0]
 800166c:	009b      	lsls	r3, r3, #2
 800166e:	4413      	add	r3, r2
 8001670:	881b      	ldrh	r3, [r3, #0]
 8001672:	b29b      	uxth	r3, r3
 8001674:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001678:	2b00      	cmp	r3, #0
 800167a:	d021      	beq.n	80016c0 <PCD_EP_ISR_Handler+0x3a8>
          {
            /*read from endpoint BUF0Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001684:	b29b      	uxth	r3, r3
 8001686:	461a      	mov	r2, r3
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	781b      	ldrb	r3, [r3, #0]
 800168c:	00db      	lsls	r3, r3, #3
 800168e:	4413      	add	r3, r2
 8001690:	3302      	adds	r3, #2
 8001692:	005b      	lsls	r3, r3, #1
 8001694:	687a      	ldr	r2, [r7, #4]
 8001696:	6812      	ldr	r2, [r2, #0]
 8001698:	4413      	add	r3, r2
 800169a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800169e:	881b      	ldrh	r3, [r3, #0]
 80016a0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80016a4:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 80016a6:	8bfb      	ldrh	r3, [r7, #30]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d02a      	beq.n	8001702 <PCD_EP_ISR_Handler+0x3ea>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6818      	ldr	r0, [r3, #0]
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	6959      	ldr	r1, [r3, #20]
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	891a      	ldrh	r2, [r3, #8]
 80016b8:	8bfb      	ldrh	r3, [r7, #30]
 80016ba:	f001 feae 	bl	800341a <USB_ReadPMA>
 80016be:	e020      	b.n	8001702 <PCD_EP_ISR_Handler+0x3ea>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80016c8:	b29b      	uxth	r3, r3
 80016ca:	461a      	mov	r2, r3
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	781b      	ldrb	r3, [r3, #0]
 80016d0:	00db      	lsls	r3, r3, #3
 80016d2:	4413      	add	r3, r2
 80016d4:	3306      	adds	r3, #6
 80016d6:	005b      	lsls	r3, r3, #1
 80016d8:	687a      	ldr	r2, [r7, #4]
 80016da:	6812      	ldr	r2, [r2, #0]
 80016dc:	4413      	add	r3, r2
 80016de:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80016e2:	881b      	ldrh	r3, [r3, #0]
 80016e4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80016e8:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 80016ea:	8bfb      	ldrh	r3, [r7, #30]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d008      	beq.n	8001702 <PCD_EP_ISR_Handler+0x3ea>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6818      	ldr	r0, [r3, #0]
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	6959      	ldr	r1, [r3, #20]
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	895a      	ldrh	r2, [r3, #10]
 80016fc:	8bfb      	ldrh	r3, [r7, #30]
 80016fe:	f001 fe8c 	bl	800341a <USB_ReadPMA>
            }
          }
          /* free EP OUT Buffer */
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	461a      	mov	r2, r3
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	781b      	ldrb	r3, [r3, #0]
 800170c:	009b      	lsls	r3, r3, #2
 800170e:	4413      	add	r3, r2
 8001710:	881b      	ldrh	r3, [r3, #0]
 8001712:	b29b      	uxth	r3, r3
 8001714:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001718:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800171c:	b29c      	uxth	r4, r3
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	461a      	mov	r2, r3
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	781b      	ldrb	r3, [r3, #0]
 8001728:	009b      	lsls	r3, r3, #2
 800172a:	441a      	add	r2, r3
 800172c:	4b46      	ldr	r3, [pc, #280]	; (8001848 <PCD_EP_ISR_Handler+0x530>)
 800172e:	4323      	orrs	r3, r4
 8001730:	b29b      	uxth	r3, r3
 8001732:	8013      	strh	r3, [r2, #0]
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count += count;
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	69da      	ldr	r2, [r3, #28]
 8001738:	8bfb      	ldrh	r3, [r7, #30]
 800173a:	441a      	add	r2, r3
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	695a      	ldr	r2, [r3, #20]
 8001744:	8bfb      	ldrh	r3, [r7, #30]
 8001746:	441a      	add	r2, r3
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	699b      	ldr	r3, [r3, #24]
 8001750:	2b00      	cmp	r3, #0
 8001752:	d004      	beq.n	800175e <PCD_EP_ISR_Handler+0x446>
 8001754:	8bfa      	ldrh	r2, [r7, #30]
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	691b      	ldr	r3, [r3, #16]
 800175a:	429a      	cmp	r2, r3
 800175c:	d206      	bcs.n	800176c <PCD_EP_ISR_Handler+0x454>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	781b      	ldrb	r3, [r3, #0]
 8001762:	4619      	mov	r1, r3
 8001764:	6878      	ldr	r0, [r7, #4]
 8001766:	f003 fa19 	bl	8004b9c <HAL_PCD_DataOutStageCallback>
 800176a:	e008      	b.n	800177e <PCD_EP_ISR_Handler+0x466>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	7819      	ldrb	r1, [r3, #0]
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	695a      	ldr	r2, [r3, #20]
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	699b      	ldr	r3, [r3, #24]
 8001778:	6878      	ldr	r0, [r7, #4]
 800177a:	f7ff fcb1 	bl	80010e0 <HAL_PCD_EP_Receive>
        }

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800177e:	8a7b      	ldrh	r3, [r7, #18]
 8001780:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001784:	2b00      	cmp	r3, #0
 8001786:	d04f      	beq.n	8001828 <PCD_EP_ISR_Handler+0x510>
      {
        ep = &hpcd->IN_ep[epindex];
 8001788:	7d7b      	ldrb	r3, [r7, #21]
 800178a:	015b      	lsls	r3, r3, #5
 800178c:	3328      	adds	r3, #40	; 0x28
 800178e:	687a      	ldr	r2, [r7, #4]
 8001790:	4413      	add	r3, r2
 8001792:	60fb      	str	r3, [r7, #12]

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	461a      	mov	r2, r3
 800179a:	7d7b      	ldrb	r3, [r7, #21]
 800179c:	009b      	lsls	r3, r3, #2
 800179e:	4413      	add	r3, r2
 80017a0:	881b      	ldrh	r3, [r3, #0]
 80017a2:	b29b      	uxth	r3, r3
 80017a4:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80017a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80017ac:	b29c      	uxth	r4, r3
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	461a      	mov	r2, r3
 80017b4:	7d7b      	ldrb	r3, [r7, #21]
 80017b6:	009b      	lsls	r3, r3, #2
 80017b8:	441a      	add	r2, r3
 80017ba:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 80017be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80017c2:	b29b      	uxth	r3, r3
 80017c4:	8013      	strh	r3, [r2, #0]

        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80017ce:	b29b      	uxth	r3, r3
 80017d0:	461a      	mov	r2, r3
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	781b      	ldrb	r3, [r3, #0]
 80017d6:	00db      	lsls	r3, r3, #3
 80017d8:	4413      	add	r3, r2
 80017da:	3302      	adds	r3, #2
 80017dc:	005b      	lsls	r3, r3, #1
 80017de:	687a      	ldr	r2, [r7, #4]
 80017e0:	6812      	ldr	r2, [r2, #0]
 80017e2:	4413      	add	r3, r2
 80017e4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80017e8:	881b      	ldrh	r3, [r3, #0]
 80017ea:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	695a      	ldr	r2, [r3, #20]
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	69db      	ldr	r3, [r3, #28]
 80017fa:	441a      	add	r2, r3
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	615a      	str	r2, [r3, #20]

        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	699b      	ldr	r3, [r3, #24]
 8001804:	2b00      	cmp	r3, #0
 8001806:	d106      	bne.n	8001816 <PCD_EP_ISR_Handler+0x4fe>
        {
          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	781b      	ldrb	r3, [r3, #0]
 800180c:	4619      	mov	r1, r3
 800180e:	6878      	ldr	r0, [r7, #4]
 8001810:	f003 f9dc 	bl	8004bcc <HAL_PCD_DataInStageCallback>
 8001814:	e008      	b.n	8001828 <PCD_EP_ISR_Handler+0x510>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	7819      	ldrb	r1, [r3, #0]
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	695a      	ldr	r2, [r3, #20]
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	699b      	ldr	r3, [r3, #24]
 8001822:	6878      	ldr	r0, [r7, #4]
 8001824:	f7ff fc96 	bl	8001154 <HAL_PCD_EP_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001830:	b29b      	uxth	r3, r3
 8001832:	b21b      	sxth	r3, r3
 8001834:	2b00      	cmp	r3, #0
 8001836:	f6ff ad74 	blt.w	8001322 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }
  return HAL_OK;
 800183a:	2300      	movs	r3, #0
}
 800183c:	4618      	mov	r0, r3
 800183e:	3724      	adds	r7, #36	; 0x24
 8001840:	46bd      	mov	sp, r7
 8001842:	bd90      	pop	{r4, r7, pc}
 8001844:	ffff8080 	.word	0xffff8080
 8001848:	ffff80c0 	.word	0xffff80c0

0800184c <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 800184c:	b480      	push	{r7}
 800184e:	b087      	sub	sp, #28
 8001850:	af00      	add	r7, sp, #0
 8001852:	60f8      	str	r0, [r7, #12]
 8001854:	607b      	str	r3, [r7, #4]
 8001856:	460b      	mov	r3, r1
 8001858:	817b      	strh	r3, [r7, #10]
 800185a:	4613      	mov	r3, r2
 800185c:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800185e:	897b      	ldrh	r3, [r7, #10]
 8001860:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001864:	b29b      	uxth	r3, r3
 8001866:	2b00      	cmp	r3, #0
 8001868:	d008      	beq.n	800187c <HAL_PCDEx_PMAConfig+0x30>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800186a:	897b      	ldrh	r3, [r7, #10]
 800186c:	f003 0307 	and.w	r3, r3, #7
 8001870:	015b      	lsls	r3, r3, #5
 8001872:	3328      	adds	r3, #40	; 0x28
 8001874:	68fa      	ldr	r2, [r7, #12]
 8001876:	4413      	add	r3, r2
 8001878:	617b      	str	r3, [r7, #20]
 800187a:	e006      	b.n	800188a <HAL_PCDEx_PMAConfig+0x3e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800187c:	897b      	ldrh	r3, [r7, #10]
 800187e:	015b      	lsls	r3, r3, #5
 8001880:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001884:	68fa      	ldr	r2, [r7, #12]
 8001886:	4413      	add	r3, r2
 8001888:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800188a:	893b      	ldrh	r3, [r7, #8]
 800188c:	2b00      	cmp	r3, #0
 800188e:	d107      	bne.n	80018a0 <HAL_PCDEx_PMAConfig+0x54>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8001890:	697b      	ldr	r3, [r7, #20]
 8001892:	2200      	movs	r2, #0
 8001894:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	b29a      	uxth	r2, r3
 800189a:	697b      	ldr	r3, [r7, #20]
 800189c:	80da      	strh	r2, [r3, #6]
 800189e:	e00b      	b.n	80018b8 <HAL_PCDEx_PMAConfig+0x6c>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80018a0:	697b      	ldr	r3, [r7, #20]
 80018a2:	2201      	movs	r2, #1
 80018a4:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	b29a      	uxth	r2, r3
 80018aa:	697b      	ldr	r3, [r7, #20]
 80018ac:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	0c1b      	lsrs	r3, r3, #16
 80018b2:	b29a      	uxth	r2, r3
 80018b4:	697b      	ldr	r3, [r7, #20]
 80018b6:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 80018b8:	2300      	movs	r3, #0
}
 80018ba:	4618      	mov	r0, r3
 80018bc:	371c      	adds	r7, #28
 80018be:	46bd      	mov	sp, r7
 80018c0:	bc80      	pop	{r7}
 80018c2:	4770      	bx	lr

080018c4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b086      	sub	sp, #24
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d101      	bne.n	80018d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80018d2:	2301      	movs	r3, #1
 80018d4:	e26c      	b.n	8001db0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f003 0301 	and.w	r3, r3, #1
 80018de:	2b00      	cmp	r3, #0
 80018e0:	f000 8087 	beq.w	80019f2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80018e4:	4b92      	ldr	r3, [pc, #584]	; (8001b30 <HAL_RCC_OscConfig+0x26c>)
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	f003 030c 	and.w	r3, r3, #12
 80018ec:	2b04      	cmp	r3, #4
 80018ee:	d00c      	beq.n	800190a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80018f0:	4b8f      	ldr	r3, [pc, #572]	; (8001b30 <HAL_RCC_OscConfig+0x26c>)
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	f003 030c 	and.w	r3, r3, #12
 80018f8:	2b08      	cmp	r3, #8
 80018fa:	d112      	bne.n	8001922 <HAL_RCC_OscConfig+0x5e>
 80018fc:	4b8c      	ldr	r3, [pc, #560]	; (8001b30 <HAL_RCC_OscConfig+0x26c>)
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001904:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001908:	d10b      	bne.n	8001922 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800190a:	4b89      	ldr	r3, [pc, #548]	; (8001b30 <HAL_RCC_OscConfig+0x26c>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001912:	2b00      	cmp	r3, #0
 8001914:	d06c      	beq.n	80019f0 <HAL_RCC_OscConfig+0x12c>
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	2b00      	cmp	r3, #0
 800191c:	d168      	bne.n	80019f0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800191e:	2301      	movs	r3, #1
 8001920:	e246      	b.n	8001db0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800192a:	d106      	bne.n	800193a <HAL_RCC_OscConfig+0x76>
 800192c:	4b80      	ldr	r3, [pc, #512]	; (8001b30 <HAL_RCC_OscConfig+0x26c>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4a7f      	ldr	r2, [pc, #508]	; (8001b30 <HAL_RCC_OscConfig+0x26c>)
 8001932:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001936:	6013      	str	r3, [r2, #0]
 8001938:	e02e      	b.n	8001998 <HAL_RCC_OscConfig+0xd4>
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	2b00      	cmp	r3, #0
 8001940:	d10c      	bne.n	800195c <HAL_RCC_OscConfig+0x98>
 8001942:	4b7b      	ldr	r3, [pc, #492]	; (8001b30 <HAL_RCC_OscConfig+0x26c>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4a7a      	ldr	r2, [pc, #488]	; (8001b30 <HAL_RCC_OscConfig+0x26c>)
 8001948:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800194c:	6013      	str	r3, [r2, #0]
 800194e:	4b78      	ldr	r3, [pc, #480]	; (8001b30 <HAL_RCC_OscConfig+0x26c>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4a77      	ldr	r2, [pc, #476]	; (8001b30 <HAL_RCC_OscConfig+0x26c>)
 8001954:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001958:	6013      	str	r3, [r2, #0]
 800195a:	e01d      	b.n	8001998 <HAL_RCC_OscConfig+0xd4>
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001964:	d10c      	bne.n	8001980 <HAL_RCC_OscConfig+0xbc>
 8001966:	4b72      	ldr	r3, [pc, #456]	; (8001b30 <HAL_RCC_OscConfig+0x26c>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	4a71      	ldr	r2, [pc, #452]	; (8001b30 <HAL_RCC_OscConfig+0x26c>)
 800196c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001970:	6013      	str	r3, [r2, #0]
 8001972:	4b6f      	ldr	r3, [pc, #444]	; (8001b30 <HAL_RCC_OscConfig+0x26c>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	4a6e      	ldr	r2, [pc, #440]	; (8001b30 <HAL_RCC_OscConfig+0x26c>)
 8001978:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800197c:	6013      	str	r3, [r2, #0]
 800197e:	e00b      	b.n	8001998 <HAL_RCC_OscConfig+0xd4>
 8001980:	4b6b      	ldr	r3, [pc, #428]	; (8001b30 <HAL_RCC_OscConfig+0x26c>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4a6a      	ldr	r2, [pc, #424]	; (8001b30 <HAL_RCC_OscConfig+0x26c>)
 8001986:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800198a:	6013      	str	r3, [r2, #0]
 800198c:	4b68      	ldr	r3, [pc, #416]	; (8001b30 <HAL_RCC_OscConfig+0x26c>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4a67      	ldr	r2, [pc, #412]	; (8001b30 <HAL_RCC_OscConfig+0x26c>)
 8001992:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001996:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	2b00      	cmp	r3, #0
 800199e:	d013      	beq.n	80019c8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019a0:	f7fe fe28 	bl	80005f4 <HAL_GetTick>
 80019a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019a6:	e008      	b.n	80019ba <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019a8:	f7fe fe24 	bl	80005f4 <HAL_GetTick>
 80019ac:	4602      	mov	r2, r0
 80019ae:	693b      	ldr	r3, [r7, #16]
 80019b0:	1ad3      	subs	r3, r2, r3
 80019b2:	2b64      	cmp	r3, #100	; 0x64
 80019b4:	d901      	bls.n	80019ba <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80019b6:	2303      	movs	r3, #3
 80019b8:	e1fa      	b.n	8001db0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019ba:	4b5d      	ldr	r3, [pc, #372]	; (8001b30 <HAL_RCC_OscConfig+0x26c>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d0f0      	beq.n	80019a8 <HAL_RCC_OscConfig+0xe4>
 80019c6:	e014      	b.n	80019f2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019c8:	f7fe fe14 	bl	80005f4 <HAL_GetTick>
 80019cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019ce:	e008      	b.n	80019e2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019d0:	f7fe fe10 	bl	80005f4 <HAL_GetTick>
 80019d4:	4602      	mov	r2, r0
 80019d6:	693b      	ldr	r3, [r7, #16]
 80019d8:	1ad3      	subs	r3, r2, r3
 80019da:	2b64      	cmp	r3, #100	; 0x64
 80019dc:	d901      	bls.n	80019e2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80019de:	2303      	movs	r3, #3
 80019e0:	e1e6      	b.n	8001db0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019e2:	4b53      	ldr	r3, [pc, #332]	; (8001b30 <HAL_RCC_OscConfig+0x26c>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d1f0      	bne.n	80019d0 <HAL_RCC_OscConfig+0x10c>
 80019ee:	e000      	b.n	80019f2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f003 0302 	and.w	r3, r3, #2
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d063      	beq.n	8001ac6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80019fe:	4b4c      	ldr	r3, [pc, #304]	; (8001b30 <HAL_RCC_OscConfig+0x26c>)
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	f003 030c 	and.w	r3, r3, #12
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d00b      	beq.n	8001a22 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001a0a:	4b49      	ldr	r3, [pc, #292]	; (8001b30 <HAL_RCC_OscConfig+0x26c>)
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	f003 030c 	and.w	r3, r3, #12
 8001a12:	2b08      	cmp	r3, #8
 8001a14:	d11c      	bne.n	8001a50 <HAL_RCC_OscConfig+0x18c>
 8001a16:	4b46      	ldr	r3, [pc, #280]	; (8001b30 <HAL_RCC_OscConfig+0x26c>)
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d116      	bne.n	8001a50 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a22:	4b43      	ldr	r3, [pc, #268]	; (8001b30 <HAL_RCC_OscConfig+0x26c>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f003 0302 	and.w	r3, r3, #2
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d005      	beq.n	8001a3a <HAL_RCC_OscConfig+0x176>
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	691b      	ldr	r3, [r3, #16]
 8001a32:	2b01      	cmp	r3, #1
 8001a34:	d001      	beq.n	8001a3a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001a36:	2301      	movs	r3, #1
 8001a38:	e1ba      	b.n	8001db0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a3a:	4b3d      	ldr	r3, [pc, #244]	; (8001b30 <HAL_RCC_OscConfig+0x26c>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	695b      	ldr	r3, [r3, #20]
 8001a46:	00db      	lsls	r3, r3, #3
 8001a48:	4939      	ldr	r1, [pc, #228]	; (8001b30 <HAL_RCC_OscConfig+0x26c>)
 8001a4a:	4313      	orrs	r3, r2
 8001a4c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a4e:	e03a      	b.n	8001ac6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	691b      	ldr	r3, [r3, #16]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d020      	beq.n	8001a9a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a58:	4b36      	ldr	r3, [pc, #216]	; (8001b34 <HAL_RCC_OscConfig+0x270>)
 8001a5a:	2201      	movs	r2, #1
 8001a5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a5e:	f7fe fdc9 	bl	80005f4 <HAL_GetTick>
 8001a62:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a64:	e008      	b.n	8001a78 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a66:	f7fe fdc5 	bl	80005f4 <HAL_GetTick>
 8001a6a:	4602      	mov	r2, r0
 8001a6c:	693b      	ldr	r3, [r7, #16]
 8001a6e:	1ad3      	subs	r3, r2, r3
 8001a70:	2b02      	cmp	r3, #2
 8001a72:	d901      	bls.n	8001a78 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001a74:	2303      	movs	r3, #3
 8001a76:	e19b      	b.n	8001db0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a78:	4b2d      	ldr	r3, [pc, #180]	; (8001b30 <HAL_RCC_OscConfig+0x26c>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f003 0302 	and.w	r3, r3, #2
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d0f0      	beq.n	8001a66 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a84:	4b2a      	ldr	r3, [pc, #168]	; (8001b30 <HAL_RCC_OscConfig+0x26c>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	695b      	ldr	r3, [r3, #20]
 8001a90:	00db      	lsls	r3, r3, #3
 8001a92:	4927      	ldr	r1, [pc, #156]	; (8001b30 <HAL_RCC_OscConfig+0x26c>)
 8001a94:	4313      	orrs	r3, r2
 8001a96:	600b      	str	r3, [r1, #0]
 8001a98:	e015      	b.n	8001ac6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a9a:	4b26      	ldr	r3, [pc, #152]	; (8001b34 <HAL_RCC_OscConfig+0x270>)
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aa0:	f7fe fda8 	bl	80005f4 <HAL_GetTick>
 8001aa4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001aa6:	e008      	b.n	8001aba <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001aa8:	f7fe fda4 	bl	80005f4 <HAL_GetTick>
 8001aac:	4602      	mov	r2, r0
 8001aae:	693b      	ldr	r3, [r7, #16]
 8001ab0:	1ad3      	subs	r3, r2, r3
 8001ab2:	2b02      	cmp	r3, #2
 8001ab4:	d901      	bls.n	8001aba <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001ab6:	2303      	movs	r3, #3
 8001ab8:	e17a      	b.n	8001db0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001aba:	4b1d      	ldr	r3, [pc, #116]	; (8001b30 <HAL_RCC_OscConfig+0x26c>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f003 0302 	and.w	r3, r3, #2
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d1f0      	bne.n	8001aa8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f003 0308 	and.w	r3, r3, #8
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d03a      	beq.n	8001b48 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	699b      	ldr	r3, [r3, #24]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d019      	beq.n	8001b0e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ada:	4b17      	ldr	r3, [pc, #92]	; (8001b38 <HAL_RCC_OscConfig+0x274>)
 8001adc:	2201      	movs	r2, #1
 8001ade:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ae0:	f7fe fd88 	bl	80005f4 <HAL_GetTick>
 8001ae4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ae6:	e008      	b.n	8001afa <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ae8:	f7fe fd84 	bl	80005f4 <HAL_GetTick>
 8001aec:	4602      	mov	r2, r0
 8001aee:	693b      	ldr	r3, [r7, #16]
 8001af0:	1ad3      	subs	r3, r2, r3
 8001af2:	2b02      	cmp	r3, #2
 8001af4:	d901      	bls.n	8001afa <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001af6:	2303      	movs	r3, #3
 8001af8:	e15a      	b.n	8001db0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001afa:	4b0d      	ldr	r3, [pc, #52]	; (8001b30 <HAL_RCC_OscConfig+0x26c>)
 8001afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001afe:	f003 0302 	and.w	r3, r3, #2
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d0f0      	beq.n	8001ae8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001b06:	2001      	movs	r0, #1
 8001b08:	f000 faa8 	bl	800205c <RCC_Delay>
 8001b0c:	e01c      	b.n	8001b48 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b0e:	4b0a      	ldr	r3, [pc, #40]	; (8001b38 <HAL_RCC_OscConfig+0x274>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b14:	f7fe fd6e 	bl	80005f4 <HAL_GetTick>
 8001b18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b1a:	e00f      	b.n	8001b3c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b1c:	f7fe fd6a 	bl	80005f4 <HAL_GetTick>
 8001b20:	4602      	mov	r2, r0
 8001b22:	693b      	ldr	r3, [r7, #16]
 8001b24:	1ad3      	subs	r3, r2, r3
 8001b26:	2b02      	cmp	r3, #2
 8001b28:	d908      	bls.n	8001b3c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001b2a:	2303      	movs	r3, #3
 8001b2c:	e140      	b.n	8001db0 <HAL_RCC_OscConfig+0x4ec>
 8001b2e:	bf00      	nop
 8001b30:	40021000 	.word	0x40021000
 8001b34:	42420000 	.word	0x42420000
 8001b38:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b3c:	4b9e      	ldr	r3, [pc, #632]	; (8001db8 <HAL_RCC_OscConfig+0x4f4>)
 8001b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b40:	f003 0302 	and.w	r3, r3, #2
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d1e9      	bne.n	8001b1c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f003 0304 	and.w	r3, r3, #4
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	f000 80a6 	beq.w	8001ca2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b56:	2300      	movs	r3, #0
 8001b58:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b5a:	4b97      	ldr	r3, [pc, #604]	; (8001db8 <HAL_RCC_OscConfig+0x4f4>)
 8001b5c:	69db      	ldr	r3, [r3, #28]
 8001b5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d10d      	bne.n	8001b82 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b66:	4b94      	ldr	r3, [pc, #592]	; (8001db8 <HAL_RCC_OscConfig+0x4f4>)
 8001b68:	69db      	ldr	r3, [r3, #28]
 8001b6a:	4a93      	ldr	r2, [pc, #588]	; (8001db8 <HAL_RCC_OscConfig+0x4f4>)
 8001b6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b70:	61d3      	str	r3, [r2, #28]
 8001b72:	4b91      	ldr	r3, [pc, #580]	; (8001db8 <HAL_RCC_OscConfig+0x4f4>)
 8001b74:	69db      	ldr	r3, [r3, #28]
 8001b76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b7a:	60bb      	str	r3, [r7, #8]
 8001b7c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b7e:	2301      	movs	r3, #1
 8001b80:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b82:	4b8e      	ldr	r3, [pc, #568]	; (8001dbc <HAL_RCC_OscConfig+0x4f8>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d118      	bne.n	8001bc0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b8e:	4b8b      	ldr	r3, [pc, #556]	; (8001dbc <HAL_RCC_OscConfig+0x4f8>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4a8a      	ldr	r2, [pc, #552]	; (8001dbc <HAL_RCC_OscConfig+0x4f8>)
 8001b94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b98:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b9a:	f7fe fd2b 	bl	80005f4 <HAL_GetTick>
 8001b9e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ba0:	e008      	b.n	8001bb4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ba2:	f7fe fd27 	bl	80005f4 <HAL_GetTick>
 8001ba6:	4602      	mov	r2, r0
 8001ba8:	693b      	ldr	r3, [r7, #16]
 8001baa:	1ad3      	subs	r3, r2, r3
 8001bac:	2b64      	cmp	r3, #100	; 0x64
 8001bae:	d901      	bls.n	8001bb4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001bb0:	2303      	movs	r3, #3
 8001bb2:	e0fd      	b.n	8001db0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bb4:	4b81      	ldr	r3, [pc, #516]	; (8001dbc <HAL_RCC_OscConfig+0x4f8>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d0f0      	beq.n	8001ba2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	68db      	ldr	r3, [r3, #12]
 8001bc4:	2b01      	cmp	r3, #1
 8001bc6:	d106      	bne.n	8001bd6 <HAL_RCC_OscConfig+0x312>
 8001bc8:	4b7b      	ldr	r3, [pc, #492]	; (8001db8 <HAL_RCC_OscConfig+0x4f4>)
 8001bca:	6a1b      	ldr	r3, [r3, #32]
 8001bcc:	4a7a      	ldr	r2, [pc, #488]	; (8001db8 <HAL_RCC_OscConfig+0x4f4>)
 8001bce:	f043 0301 	orr.w	r3, r3, #1
 8001bd2:	6213      	str	r3, [r2, #32]
 8001bd4:	e02d      	b.n	8001c32 <HAL_RCC_OscConfig+0x36e>
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	68db      	ldr	r3, [r3, #12]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d10c      	bne.n	8001bf8 <HAL_RCC_OscConfig+0x334>
 8001bde:	4b76      	ldr	r3, [pc, #472]	; (8001db8 <HAL_RCC_OscConfig+0x4f4>)
 8001be0:	6a1b      	ldr	r3, [r3, #32]
 8001be2:	4a75      	ldr	r2, [pc, #468]	; (8001db8 <HAL_RCC_OscConfig+0x4f4>)
 8001be4:	f023 0301 	bic.w	r3, r3, #1
 8001be8:	6213      	str	r3, [r2, #32]
 8001bea:	4b73      	ldr	r3, [pc, #460]	; (8001db8 <HAL_RCC_OscConfig+0x4f4>)
 8001bec:	6a1b      	ldr	r3, [r3, #32]
 8001bee:	4a72      	ldr	r2, [pc, #456]	; (8001db8 <HAL_RCC_OscConfig+0x4f4>)
 8001bf0:	f023 0304 	bic.w	r3, r3, #4
 8001bf4:	6213      	str	r3, [r2, #32]
 8001bf6:	e01c      	b.n	8001c32 <HAL_RCC_OscConfig+0x36e>
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	68db      	ldr	r3, [r3, #12]
 8001bfc:	2b05      	cmp	r3, #5
 8001bfe:	d10c      	bne.n	8001c1a <HAL_RCC_OscConfig+0x356>
 8001c00:	4b6d      	ldr	r3, [pc, #436]	; (8001db8 <HAL_RCC_OscConfig+0x4f4>)
 8001c02:	6a1b      	ldr	r3, [r3, #32]
 8001c04:	4a6c      	ldr	r2, [pc, #432]	; (8001db8 <HAL_RCC_OscConfig+0x4f4>)
 8001c06:	f043 0304 	orr.w	r3, r3, #4
 8001c0a:	6213      	str	r3, [r2, #32]
 8001c0c:	4b6a      	ldr	r3, [pc, #424]	; (8001db8 <HAL_RCC_OscConfig+0x4f4>)
 8001c0e:	6a1b      	ldr	r3, [r3, #32]
 8001c10:	4a69      	ldr	r2, [pc, #420]	; (8001db8 <HAL_RCC_OscConfig+0x4f4>)
 8001c12:	f043 0301 	orr.w	r3, r3, #1
 8001c16:	6213      	str	r3, [r2, #32]
 8001c18:	e00b      	b.n	8001c32 <HAL_RCC_OscConfig+0x36e>
 8001c1a:	4b67      	ldr	r3, [pc, #412]	; (8001db8 <HAL_RCC_OscConfig+0x4f4>)
 8001c1c:	6a1b      	ldr	r3, [r3, #32]
 8001c1e:	4a66      	ldr	r2, [pc, #408]	; (8001db8 <HAL_RCC_OscConfig+0x4f4>)
 8001c20:	f023 0301 	bic.w	r3, r3, #1
 8001c24:	6213      	str	r3, [r2, #32]
 8001c26:	4b64      	ldr	r3, [pc, #400]	; (8001db8 <HAL_RCC_OscConfig+0x4f4>)
 8001c28:	6a1b      	ldr	r3, [r3, #32]
 8001c2a:	4a63      	ldr	r2, [pc, #396]	; (8001db8 <HAL_RCC_OscConfig+0x4f4>)
 8001c2c:	f023 0304 	bic.w	r3, r3, #4
 8001c30:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	68db      	ldr	r3, [r3, #12]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d015      	beq.n	8001c66 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c3a:	f7fe fcdb 	bl	80005f4 <HAL_GetTick>
 8001c3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c40:	e00a      	b.n	8001c58 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c42:	f7fe fcd7 	bl	80005f4 <HAL_GetTick>
 8001c46:	4602      	mov	r2, r0
 8001c48:	693b      	ldr	r3, [r7, #16]
 8001c4a:	1ad3      	subs	r3, r2, r3
 8001c4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c50:	4293      	cmp	r3, r2
 8001c52:	d901      	bls.n	8001c58 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001c54:	2303      	movs	r3, #3
 8001c56:	e0ab      	b.n	8001db0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c58:	4b57      	ldr	r3, [pc, #348]	; (8001db8 <HAL_RCC_OscConfig+0x4f4>)
 8001c5a:	6a1b      	ldr	r3, [r3, #32]
 8001c5c:	f003 0302 	and.w	r3, r3, #2
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d0ee      	beq.n	8001c42 <HAL_RCC_OscConfig+0x37e>
 8001c64:	e014      	b.n	8001c90 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c66:	f7fe fcc5 	bl	80005f4 <HAL_GetTick>
 8001c6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c6c:	e00a      	b.n	8001c84 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c6e:	f7fe fcc1 	bl	80005f4 <HAL_GetTick>
 8001c72:	4602      	mov	r2, r0
 8001c74:	693b      	ldr	r3, [r7, #16]
 8001c76:	1ad3      	subs	r3, r2, r3
 8001c78:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c7c:	4293      	cmp	r3, r2
 8001c7e:	d901      	bls.n	8001c84 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001c80:	2303      	movs	r3, #3
 8001c82:	e095      	b.n	8001db0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c84:	4b4c      	ldr	r3, [pc, #304]	; (8001db8 <HAL_RCC_OscConfig+0x4f4>)
 8001c86:	6a1b      	ldr	r3, [r3, #32]
 8001c88:	f003 0302 	and.w	r3, r3, #2
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d1ee      	bne.n	8001c6e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001c90:	7dfb      	ldrb	r3, [r7, #23]
 8001c92:	2b01      	cmp	r3, #1
 8001c94:	d105      	bne.n	8001ca2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c96:	4b48      	ldr	r3, [pc, #288]	; (8001db8 <HAL_RCC_OscConfig+0x4f4>)
 8001c98:	69db      	ldr	r3, [r3, #28]
 8001c9a:	4a47      	ldr	r2, [pc, #284]	; (8001db8 <HAL_RCC_OscConfig+0x4f4>)
 8001c9c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ca0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	69db      	ldr	r3, [r3, #28]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	f000 8081 	beq.w	8001dae <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001cac:	4b42      	ldr	r3, [pc, #264]	; (8001db8 <HAL_RCC_OscConfig+0x4f4>)
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	f003 030c 	and.w	r3, r3, #12
 8001cb4:	2b08      	cmp	r3, #8
 8001cb6:	d061      	beq.n	8001d7c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	69db      	ldr	r3, [r3, #28]
 8001cbc:	2b02      	cmp	r3, #2
 8001cbe:	d146      	bne.n	8001d4e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cc0:	4b3f      	ldr	r3, [pc, #252]	; (8001dc0 <HAL_RCC_OscConfig+0x4fc>)
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cc6:	f7fe fc95 	bl	80005f4 <HAL_GetTick>
 8001cca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ccc:	e008      	b.n	8001ce0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cce:	f7fe fc91 	bl	80005f4 <HAL_GetTick>
 8001cd2:	4602      	mov	r2, r0
 8001cd4:	693b      	ldr	r3, [r7, #16]
 8001cd6:	1ad3      	subs	r3, r2, r3
 8001cd8:	2b02      	cmp	r3, #2
 8001cda:	d901      	bls.n	8001ce0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001cdc:	2303      	movs	r3, #3
 8001cde:	e067      	b.n	8001db0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ce0:	4b35      	ldr	r3, [pc, #212]	; (8001db8 <HAL_RCC_OscConfig+0x4f4>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d1f0      	bne.n	8001cce <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6a1b      	ldr	r3, [r3, #32]
 8001cf0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cf4:	d108      	bne.n	8001d08 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001cf6:	4b30      	ldr	r3, [pc, #192]	; (8001db8 <HAL_RCC_OscConfig+0x4f4>)
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	689b      	ldr	r3, [r3, #8]
 8001d02:	492d      	ldr	r1, [pc, #180]	; (8001db8 <HAL_RCC_OscConfig+0x4f4>)
 8001d04:	4313      	orrs	r3, r2
 8001d06:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d08:	4b2b      	ldr	r3, [pc, #172]	; (8001db8 <HAL_RCC_OscConfig+0x4f4>)
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6a19      	ldr	r1, [r3, #32]
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d18:	430b      	orrs	r3, r1
 8001d1a:	4927      	ldr	r1, [pc, #156]	; (8001db8 <HAL_RCC_OscConfig+0x4f4>)
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d20:	4b27      	ldr	r3, [pc, #156]	; (8001dc0 <HAL_RCC_OscConfig+0x4fc>)
 8001d22:	2201      	movs	r2, #1
 8001d24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d26:	f7fe fc65 	bl	80005f4 <HAL_GetTick>
 8001d2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d2c:	e008      	b.n	8001d40 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d2e:	f7fe fc61 	bl	80005f4 <HAL_GetTick>
 8001d32:	4602      	mov	r2, r0
 8001d34:	693b      	ldr	r3, [r7, #16]
 8001d36:	1ad3      	subs	r3, r2, r3
 8001d38:	2b02      	cmp	r3, #2
 8001d3a:	d901      	bls.n	8001d40 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001d3c:	2303      	movs	r3, #3
 8001d3e:	e037      	b.n	8001db0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d40:	4b1d      	ldr	r3, [pc, #116]	; (8001db8 <HAL_RCC_OscConfig+0x4f4>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d0f0      	beq.n	8001d2e <HAL_RCC_OscConfig+0x46a>
 8001d4c:	e02f      	b.n	8001dae <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d4e:	4b1c      	ldr	r3, [pc, #112]	; (8001dc0 <HAL_RCC_OscConfig+0x4fc>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d54:	f7fe fc4e 	bl	80005f4 <HAL_GetTick>
 8001d58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d5a:	e008      	b.n	8001d6e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d5c:	f7fe fc4a 	bl	80005f4 <HAL_GetTick>
 8001d60:	4602      	mov	r2, r0
 8001d62:	693b      	ldr	r3, [r7, #16]
 8001d64:	1ad3      	subs	r3, r2, r3
 8001d66:	2b02      	cmp	r3, #2
 8001d68:	d901      	bls.n	8001d6e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001d6a:	2303      	movs	r3, #3
 8001d6c:	e020      	b.n	8001db0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d6e:	4b12      	ldr	r3, [pc, #72]	; (8001db8 <HAL_RCC_OscConfig+0x4f4>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d1f0      	bne.n	8001d5c <HAL_RCC_OscConfig+0x498>
 8001d7a:	e018      	b.n	8001dae <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	69db      	ldr	r3, [r3, #28]
 8001d80:	2b01      	cmp	r3, #1
 8001d82:	d101      	bne.n	8001d88 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001d84:	2301      	movs	r3, #1
 8001d86:	e013      	b.n	8001db0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001d88:	4b0b      	ldr	r3, [pc, #44]	; (8001db8 <HAL_RCC_OscConfig+0x4f4>)
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6a1b      	ldr	r3, [r3, #32]
 8001d98:	429a      	cmp	r2, r3
 8001d9a:	d106      	bne.n	8001daa <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001da6:	429a      	cmp	r2, r3
 8001da8:	d001      	beq.n	8001dae <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001daa:	2301      	movs	r3, #1
 8001dac:	e000      	b.n	8001db0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001dae:	2300      	movs	r3, #0
}
 8001db0:	4618      	mov	r0, r3
 8001db2:	3718      	adds	r7, #24
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bd80      	pop	{r7, pc}
 8001db8:	40021000 	.word	0x40021000
 8001dbc:	40007000 	.word	0x40007000
 8001dc0:	42420060 	.word	0x42420060

08001dc4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b084      	sub	sp, #16
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
 8001dcc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d101      	bne.n	8001dd8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	e0d0      	b.n	8001f7a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001dd8:	4b6a      	ldr	r3, [pc, #424]	; (8001f84 <HAL_RCC_ClockConfig+0x1c0>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f003 0307 	and.w	r3, r3, #7
 8001de0:	683a      	ldr	r2, [r7, #0]
 8001de2:	429a      	cmp	r2, r3
 8001de4:	d910      	bls.n	8001e08 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001de6:	4b67      	ldr	r3, [pc, #412]	; (8001f84 <HAL_RCC_ClockConfig+0x1c0>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f023 0207 	bic.w	r2, r3, #7
 8001dee:	4965      	ldr	r1, [pc, #404]	; (8001f84 <HAL_RCC_ClockConfig+0x1c0>)
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	4313      	orrs	r3, r2
 8001df4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001df6:	4b63      	ldr	r3, [pc, #396]	; (8001f84 <HAL_RCC_ClockConfig+0x1c0>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f003 0307 	and.w	r3, r3, #7
 8001dfe:	683a      	ldr	r2, [r7, #0]
 8001e00:	429a      	cmp	r2, r3
 8001e02:	d001      	beq.n	8001e08 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001e04:	2301      	movs	r3, #1
 8001e06:	e0b8      	b.n	8001f7a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f003 0302 	and.w	r3, r3, #2
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d020      	beq.n	8001e56 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f003 0304 	and.w	r3, r3, #4
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d005      	beq.n	8001e2c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e20:	4b59      	ldr	r3, [pc, #356]	; (8001f88 <HAL_RCC_ClockConfig+0x1c4>)
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	4a58      	ldr	r2, [pc, #352]	; (8001f88 <HAL_RCC_ClockConfig+0x1c4>)
 8001e26:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001e2a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f003 0308 	and.w	r3, r3, #8
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d005      	beq.n	8001e44 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e38:	4b53      	ldr	r3, [pc, #332]	; (8001f88 <HAL_RCC_ClockConfig+0x1c4>)
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	4a52      	ldr	r2, [pc, #328]	; (8001f88 <HAL_RCC_ClockConfig+0x1c4>)
 8001e3e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001e42:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e44:	4b50      	ldr	r3, [pc, #320]	; (8001f88 <HAL_RCC_ClockConfig+0x1c4>)
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	689b      	ldr	r3, [r3, #8]
 8001e50:	494d      	ldr	r1, [pc, #308]	; (8001f88 <HAL_RCC_ClockConfig+0x1c4>)
 8001e52:	4313      	orrs	r3, r2
 8001e54:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f003 0301 	and.w	r3, r3, #1
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d040      	beq.n	8001ee4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	2b01      	cmp	r3, #1
 8001e68:	d107      	bne.n	8001e7a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e6a:	4b47      	ldr	r3, [pc, #284]	; (8001f88 <HAL_RCC_ClockConfig+0x1c4>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d115      	bne.n	8001ea2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e76:	2301      	movs	r3, #1
 8001e78:	e07f      	b.n	8001f7a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	2b02      	cmp	r3, #2
 8001e80:	d107      	bne.n	8001e92 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e82:	4b41      	ldr	r3, [pc, #260]	; (8001f88 <HAL_RCC_ClockConfig+0x1c4>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d109      	bne.n	8001ea2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	e073      	b.n	8001f7a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e92:	4b3d      	ldr	r3, [pc, #244]	; (8001f88 <HAL_RCC_ClockConfig+0x1c4>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f003 0302 	and.w	r3, r3, #2
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d101      	bne.n	8001ea2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	e06b      	b.n	8001f7a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ea2:	4b39      	ldr	r3, [pc, #228]	; (8001f88 <HAL_RCC_ClockConfig+0x1c4>)
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	f023 0203 	bic.w	r2, r3, #3
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	4936      	ldr	r1, [pc, #216]	; (8001f88 <HAL_RCC_ClockConfig+0x1c4>)
 8001eb0:	4313      	orrs	r3, r2
 8001eb2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001eb4:	f7fe fb9e 	bl	80005f4 <HAL_GetTick>
 8001eb8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001eba:	e00a      	b.n	8001ed2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ebc:	f7fe fb9a 	bl	80005f4 <HAL_GetTick>
 8001ec0:	4602      	mov	r2, r0
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	1ad3      	subs	r3, r2, r3
 8001ec6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d901      	bls.n	8001ed2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001ece:	2303      	movs	r3, #3
 8001ed0:	e053      	b.n	8001f7a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ed2:	4b2d      	ldr	r3, [pc, #180]	; (8001f88 <HAL_RCC_ClockConfig+0x1c4>)
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	f003 020c 	and.w	r2, r3, #12
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	009b      	lsls	r3, r3, #2
 8001ee0:	429a      	cmp	r2, r3
 8001ee2:	d1eb      	bne.n	8001ebc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001ee4:	4b27      	ldr	r3, [pc, #156]	; (8001f84 <HAL_RCC_ClockConfig+0x1c0>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f003 0307 	and.w	r3, r3, #7
 8001eec:	683a      	ldr	r2, [r7, #0]
 8001eee:	429a      	cmp	r2, r3
 8001ef0:	d210      	bcs.n	8001f14 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ef2:	4b24      	ldr	r3, [pc, #144]	; (8001f84 <HAL_RCC_ClockConfig+0x1c0>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f023 0207 	bic.w	r2, r3, #7
 8001efa:	4922      	ldr	r1, [pc, #136]	; (8001f84 <HAL_RCC_ClockConfig+0x1c0>)
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	4313      	orrs	r3, r2
 8001f00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f02:	4b20      	ldr	r3, [pc, #128]	; (8001f84 <HAL_RCC_ClockConfig+0x1c0>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f003 0307 	and.w	r3, r3, #7
 8001f0a:	683a      	ldr	r2, [r7, #0]
 8001f0c:	429a      	cmp	r2, r3
 8001f0e:	d001      	beq.n	8001f14 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001f10:	2301      	movs	r3, #1
 8001f12:	e032      	b.n	8001f7a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f003 0304 	and.w	r3, r3, #4
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d008      	beq.n	8001f32 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f20:	4b19      	ldr	r3, [pc, #100]	; (8001f88 <HAL_RCC_ClockConfig+0x1c4>)
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	68db      	ldr	r3, [r3, #12]
 8001f2c:	4916      	ldr	r1, [pc, #88]	; (8001f88 <HAL_RCC_ClockConfig+0x1c4>)
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f003 0308 	and.w	r3, r3, #8
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d009      	beq.n	8001f52 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001f3e:	4b12      	ldr	r3, [pc, #72]	; (8001f88 <HAL_RCC_ClockConfig+0x1c4>)
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	691b      	ldr	r3, [r3, #16]
 8001f4a:	00db      	lsls	r3, r3, #3
 8001f4c:	490e      	ldr	r1, [pc, #56]	; (8001f88 <HAL_RCC_ClockConfig+0x1c4>)
 8001f4e:	4313      	orrs	r3, r2
 8001f50:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001f52:	f000 f821 	bl	8001f98 <HAL_RCC_GetSysClockFreq>
 8001f56:	4601      	mov	r1, r0
 8001f58:	4b0b      	ldr	r3, [pc, #44]	; (8001f88 <HAL_RCC_ClockConfig+0x1c4>)
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	091b      	lsrs	r3, r3, #4
 8001f5e:	f003 030f 	and.w	r3, r3, #15
 8001f62:	4a0a      	ldr	r2, [pc, #40]	; (8001f8c <HAL_RCC_ClockConfig+0x1c8>)
 8001f64:	5cd3      	ldrb	r3, [r2, r3]
 8001f66:	fa21 f303 	lsr.w	r3, r1, r3
 8001f6a:	4a09      	ldr	r2, [pc, #36]	; (8001f90 <HAL_RCC_ClockConfig+0x1cc>)
 8001f6c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001f6e:	4b09      	ldr	r3, [pc, #36]	; (8001f94 <HAL_RCC_ClockConfig+0x1d0>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4618      	mov	r0, r3
 8001f74:	f7fe fafc 	bl	8000570 <HAL_InitTick>

  return HAL_OK;
 8001f78:	2300      	movs	r3, #0
}
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	3710      	adds	r7, #16
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}
 8001f82:	bf00      	nop
 8001f84:	40022000 	.word	0x40022000
 8001f88:	40021000 	.word	0x40021000
 8001f8c:	080050d8 	.word	0x080050d8
 8001f90:	20000000 	.word	0x20000000
 8001f94:	20000004 	.word	0x20000004

08001f98 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f98:	b490      	push	{r4, r7}
 8001f9a:	b08a      	sub	sp, #40	; 0x28
 8001f9c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001f9e:	4b2a      	ldr	r3, [pc, #168]	; (8002048 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001fa0:	1d3c      	adds	r4, r7, #4
 8001fa2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001fa4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001fa8:	4b28      	ldr	r3, [pc, #160]	; (800204c <HAL_RCC_GetSysClockFreq+0xb4>)
 8001faa:	881b      	ldrh	r3, [r3, #0]
 8001fac:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	61fb      	str	r3, [r7, #28]
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	61bb      	str	r3, [r7, #24]
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	627b      	str	r3, [r7, #36]	; 0x24
 8001fba:	2300      	movs	r3, #0
 8001fbc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001fc2:	4b23      	ldr	r3, [pc, #140]	; (8002050 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001fc8:	69fb      	ldr	r3, [r7, #28]
 8001fca:	f003 030c 	and.w	r3, r3, #12
 8001fce:	2b04      	cmp	r3, #4
 8001fd0:	d002      	beq.n	8001fd8 <HAL_RCC_GetSysClockFreq+0x40>
 8001fd2:	2b08      	cmp	r3, #8
 8001fd4:	d003      	beq.n	8001fde <HAL_RCC_GetSysClockFreq+0x46>
 8001fd6:	e02d      	b.n	8002034 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001fd8:	4b1e      	ldr	r3, [pc, #120]	; (8002054 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001fda:	623b      	str	r3, [r7, #32]
      break;
 8001fdc:	e02d      	b.n	800203a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001fde:	69fb      	ldr	r3, [r7, #28]
 8001fe0:	0c9b      	lsrs	r3, r3, #18
 8001fe2:	f003 030f 	and.w	r3, r3, #15
 8001fe6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001fea:	4413      	add	r3, r2
 8001fec:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001ff0:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001ff2:	69fb      	ldr	r3, [r7, #28]
 8001ff4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d013      	beq.n	8002024 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001ffc:	4b14      	ldr	r3, [pc, #80]	; (8002050 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	0c5b      	lsrs	r3, r3, #17
 8002002:	f003 0301 	and.w	r3, r3, #1
 8002006:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800200a:	4413      	add	r3, r2
 800200c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002010:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002012:	697b      	ldr	r3, [r7, #20]
 8002014:	4a0f      	ldr	r2, [pc, #60]	; (8002054 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002016:	fb02 f203 	mul.w	r2, r2, r3
 800201a:	69bb      	ldr	r3, [r7, #24]
 800201c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002020:	627b      	str	r3, [r7, #36]	; 0x24
 8002022:	e004      	b.n	800202e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002024:	697b      	ldr	r3, [r7, #20]
 8002026:	4a0c      	ldr	r2, [pc, #48]	; (8002058 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002028:	fb02 f303 	mul.w	r3, r2, r3
 800202c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800202e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002030:	623b      	str	r3, [r7, #32]
      break;
 8002032:	e002      	b.n	800203a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002034:	4b07      	ldr	r3, [pc, #28]	; (8002054 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002036:	623b      	str	r3, [r7, #32]
      break;
 8002038:	bf00      	nop
    }
  }
  return sysclockfreq;
 800203a:	6a3b      	ldr	r3, [r7, #32]
}
 800203c:	4618      	mov	r0, r3
 800203e:	3728      	adds	r7, #40	; 0x28
 8002040:	46bd      	mov	sp, r7
 8002042:	bc90      	pop	{r4, r7}
 8002044:	4770      	bx	lr
 8002046:	bf00      	nop
 8002048:	0800508c 	.word	0x0800508c
 800204c:	0800509c 	.word	0x0800509c
 8002050:	40021000 	.word	0x40021000
 8002054:	007a1200 	.word	0x007a1200
 8002058:	003d0900 	.word	0x003d0900

0800205c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800205c:	b480      	push	{r7}
 800205e:	b085      	sub	sp, #20
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002064:	4b0a      	ldr	r3, [pc, #40]	; (8002090 <RCC_Delay+0x34>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4a0a      	ldr	r2, [pc, #40]	; (8002094 <RCC_Delay+0x38>)
 800206a:	fba2 2303 	umull	r2, r3, r2, r3
 800206e:	0a5b      	lsrs	r3, r3, #9
 8002070:	687a      	ldr	r2, [r7, #4]
 8002072:	fb02 f303 	mul.w	r3, r2, r3
 8002076:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002078:	bf00      	nop
  }
  while (Delay --);
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	1e5a      	subs	r2, r3, #1
 800207e:	60fa      	str	r2, [r7, #12]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d1f9      	bne.n	8002078 <RCC_Delay+0x1c>
}
 8002084:	bf00      	nop
 8002086:	3714      	adds	r7, #20
 8002088:	46bd      	mov	sp, r7
 800208a:	bc80      	pop	{r7}
 800208c:	4770      	bx	lr
 800208e:	bf00      	nop
 8002090:	20000000 	.word	0x20000000
 8002094:	10624dd3 	.word	0x10624dd3

08002098 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b086      	sub	sp, #24
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80020a0:	2300      	movs	r3, #0
 80020a2:	613b      	str	r3, [r7, #16]
 80020a4:	2300      	movs	r3, #0
 80020a6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f003 0301 	and.w	r3, r3, #1
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d07d      	beq.n	80021b0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 80020b4:	2300      	movs	r3, #0
 80020b6:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020b8:	4b4f      	ldr	r3, [pc, #316]	; (80021f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80020ba:	69db      	ldr	r3, [r3, #28]
 80020bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d10d      	bne.n	80020e0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020c4:	4b4c      	ldr	r3, [pc, #304]	; (80021f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80020c6:	69db      	ldr	r3, [r3, #28]
 80020c8:	4a4b      	ldr	r2, [pc, #300]	; (80021f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80020ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020ce:	61d3      	str	r3, [r2, #28]
 80020d0:	4b49      	ldr	r3, [pc, #292]	; (80021f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80020d2:	69db      	ldr	r3, [r3, #28]
 80020d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020d8:	60bb      	str	r3, [r7, #8]
 80020da:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020dc:	2301      	movs	r3, #1
 80020de:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020e0:	4b46      	ldr	r3, [pc, #280]	; (80021fc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d118      	bne.n	800211e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020ec:	4b43      	ldr	r3, [pc, #268]	; (80021fc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4a42      	ldr	r2, [pc, #264]	; (80021fc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80020f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020f6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020f8:	f7fe fa7c 	bl	80005f4 <HAL_GetTick>
 80020fc:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020fe:	e008      	b.n	8002112 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002100:	f7fe fa78 	bl	80005f4 <HAL_GetTick>
 8002104:	4602      	mov	r2, r0
 8002106:	693b      	ldr	r3, [r7, #16]
 8002108:	1ad3      	subs	r3, r2, r3
 800210a:	2b64      	cmp	r3, #100	; 0x64
 800210c:	d901      	bls.n	8002112 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800210e:	2303      	movs	r3, #3
 8002110:	e06d      	b.n	80021ee <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002112:	4b3a      	ldr	r3, [pc, #232]	; (80021fc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800211a:	2b00      	cmp	r3, #0
 800211c:	d0f0      	beq.n	8002100 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800211e:	4b36      	ldr	r3, [pc, #216]	; (80021f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002120:	6a1b      	ldr	r3, [r3, #32]
 8002122:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002126:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d02e      	beq.n	800218c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002136:	68fa      	ldr	r2, [r7, #12]
 8002138:	429a      	cmp	r2, r3
 800213a:	d027      	beq.n	800218c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800213c:	4b2e      	ldr	r3, [pc, #184]	; (80021f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800213e:	6a1b      	ldr	r3, [r3, #32]
 8002140:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002144:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002146:	4b2e      	ldr	r3, [pc, #184]	; (8002200 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002148:	2201      	movs	r2, #1
 800214a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800214c:	4b2c      	ldr	r3, [pc, #176]	; (8002200 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800214e:	2200      	movs	r2, #0
 8002150:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002152:	4a29      	ldr	r2, [pc, #164]	; (80021f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	f003 0301 	and.w	r3, r3, #1
 800215e:	2b00      	cmp	r3, #0
 8002160:	d014      	beq.n	800218c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002162:	f7fe fa47 	bl	80005f4 <HAL_GetTick>
 8002166:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002168:	e00a      	b.n	8002180 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800216a:	f7fe fa43 	bl	80005f4 <HAL_GetTick>
 800216e:	4602      	mov	r2, r0
 8002170:	693b      	ldr	r3, [r7, #16]
 8002172:	1ad3      	subs	r3, r2, r3
 8002174:	f241 3288 	movw	r2, #5000	; 0x1388
 8002178:	4293      	cmp	r3, r2
 800217a:	d901      	bls.n	8002180 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800217c:	2303      	movs	r3, #3
 800217e:	e036      	b.n	80021ee <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002180:	4b1d      	ldr	r3, [pc, #116]	; (80021f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002182:	6a1b      	ldr	r3, [r3, #32]
 8002184:	f003 0302 	and.w	r3, r3, #2
 8002188:	2b00      	cmp	r3, #0
 800218a:	d0ee      	beq.n	800216a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800218c:	4b1a      	ldr	r3, [pc, #104]	; (80021f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800218e:	6a1b      	ldr	r3, [r3, #32]
 8002190:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	4917      	ldr	r1, [pc, #92]	; (80021f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800219a:	4313      	orrs	r3, r2
 800219c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800219e:	7dfb      	ldrb	r3, [r7, #23]
 80021a0:	2b01      	cmp	r3, #1
 80021a2:	d105      	bne.n	80021b0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021a4:	4b14      	ldr	r3, [pc, #80]	; (80021f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021a6:	69db      	ldr	r3, [r3, #28]
 80021a8:	4a13      	ldr	r2, [pc, #76]	; (80021f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021ae:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f003 0302 	and.w	r3, r3, #2
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d008      	beq.n	80021ce <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80021bc:	4b0e      	ldr	r3, [pc, #56]	; (80021f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	689b      	ldr	r3, [r3, #8]
 80021c8:	490b      	ldr	r1, [pc, #44]	; (80021f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021ca:	4313      	orrs	r3, r2
 80021cc:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f003 0310 	and.w	r3, r3, #16
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d008      	beq.n	80021ec <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80021da:	4b07      	ldr	r3, [pc, #28]	; (80021f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	695b      	ldr	r3, [r3, #20]
 80021e6:	4904      	ldr	r1, [pc, #16]	; (80021f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021e8:	4313      	orrs	r3, r2
 80021ea:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80021ec:	2300      	movs	r3, #0
}
 80021ee:	4618      	mov	r0, r3
 80021f0:	3718      	adds	r7, #24
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	bf00      	nop
 80021f8:	40021000 	.word	0x40021000
 80021fc:	40007000 	.word	0x40007000
 8002200:	42420440 	.word	0x42420440

08002204 <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8002204:	b084      	sub	sp, #16
 8002206:	b480      	push	{r7}
 8002208:	b083      	sub	sp, #12
 800220a:	af00      	add	r7, sp, #0
 800220c:	6078      	str	r0, [r7, #4]
 800220e:	f107 0014 	add.w	r0, r7, #20
 8002212:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8002216:	2300      	movs	r3, #0
}
 8002218:	4618      	mov	r0, r3
 800221a:	370c      	adds	r7, #12
 800221c:	46bd      	mov	sp, r7
 800221e:	bc80      	pop	{r7}
 8002220:	b004      	add	sp, #16
 8002222:	4770      	bx	lr

08002224 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8002224:	b480      	push	{r7}
 8002226:	b085      	sub	sp, #20
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800222c:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8002230:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002238:	b29a      	uxth	r2, r3
 800223a:	89fb      	ldrh	r3, [r7, #14]
 800223c:	4313      	orrs	r3, r2
 800223e:	b29a      	uxth	r2, r3
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002246:	2300      	movs	r3, #0
}
 8002248:	4618      	mov	r0, r3
 800224a:	3714      	adds	r7, #20
 800224c:	46bd      	mov	sp, r7
 800224e:	bc80      	pop	{r7}
 8002250:	4770      	bx	lr

08002252 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8002252:	b480      	push	{r7}
 8002254:	b085      	sub	sp, #20
 8002256:	af00      	add	r7, sp, #0
 8002258:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800225a:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800225e:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002266:	b29b      	uxth	r3, r3
 8002268:	b21a      	sxth	r2, r3
 800226a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800226e:	43db      	mvns	r3, r3
 8002270:	b21b      	sxth	r3, r3
 8002272:	4013      	ands	r3, r2
 8002274:	b21b      	sxth	r3, r3
 8002276:	b29a      	uxth	r2, r3
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800227e:	2300      	movs	r3, #0
}
 8002280:	4618      	mov	r0, r3
 8002282:	3714      	adds	r7, #20
 8002284:	46bd      	mov	sp, r7
 8002286:	bc80      	pop	{r7}
 8002288:	4770      	bx	lr

0800228a <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE: Peripheral mode mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 800228a:	b480      	push	{r7}
 800228c:	b083      	sub	sp, #12
 800228e:	af00      	add	r7, sp, #0
 8002290:	6078      	str	r0, [r7, #4]
 8002292:	460b      	mov	r3, r1
 8002294:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8002296:	2300      	movs	r3, #0
}
 8002298:	4618      	mov	r0, r3
 800229a:	370c      	adds	r7, #12
 800229c:	46bd      	mov	sp, r7
 800229e:	bc80      	pop	{r7}
 80022a0:	4770      	bx	lr

080022a2 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80022a2:	b084      	sub	sp, #16
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b082      	sub	sp, #8
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
 80022ac:	f107 0014 	add.w	r0, r7, #20
 80022b0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2201      	movs	r2, #1
 80022b8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2200      	movs	r2, #0
 80022c0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2200      	movs	r2, #0
 80022c8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2200      	movs	r2, #0
 80022d0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);
 80022d4:	6878      	ldr	r0, [r7, #4]
 80022d6:	f7ff ffa5 	bl	8002224 <USB_EnableGlobalInt>

  return HAL_OK;
 80022da:	2300      	movs	r3, #0
}
 80022dc:	4618      	mov	r0, r3
 80022de:	3708      	adds	r7, #8
 80022e0:	46bd      	mov	sp, r7
 80022e2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80022e6:	b004      	add	sp, #16
 80022e8:	4770      	bx	lr
	...

080022ec <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80022ec:	b490      	push	{r4, r7}
 80022ee:	b084      	sub	sp, #16
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
 80022f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80022f6:	2300      	movs	r3, #0
 80022f8:	73fb      	strb	r3, [r7, #15]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80022fa:	687a      	ldr	r2, [r7, #4]
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	781b      	ldrb	r3, [r3, #0]
 8002300:	009b      	lsls	r3, r3, #2
 8002302:	4413      	add	r3, r2
 8002304:	881b      	ldrh	r3, [r3, #0]
 8002306:	b29b      	uxth	r3, r3
 8002308:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800230c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002310:	81bb      	strh	r3, [r7, #12]

  /* initialize Endpoint */
  switch (ep->type)
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	78db      	ldrb	r3, [r3, #3]
 8002316:	2b03      	cmp	r3, #3
 8002318:	d819      	bhi.n	800234e <USB_ActivateEndpoint+0x62>
 800231a:	a201      	add	r2, pc, #4	; (adr r2, 8002320 <USB_ActivateEndpoint+0x34>)
 800231c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002320:	08002331 	.word	0x08002331
 8002324:	08002345 	.word	0x08002345
 8002328:	08002355 	.word	0x08002355
 800232c:	0800233b 	.word	0x0800233b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8002330:	89bb      	ldrh	r3, [r7, #12]
 8002332:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002336:	81bb      	strh	r3, [r7, #12]
      break;
 8002338:	e00d      	b.n	8002356 <USB_ActivateEndpoint+0x6a>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800233a:	89bb      	ldrh	r3, [r7, #12]
 800233c:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8002340:	81bb      	strh	r3, [r7, #12]
      break;
 8002342:	e008      	b.n	8002356 <USB_ActivateEndpoint+0x6a>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8002344:	89bb      	ldrh	r3, [r7, #12]
 8002346:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800234a:	81bb      	strh	r3, [r7, #12]
      break;
 800234c:	e003      	b.n	8002356 <USB_ActivateEndpoint+0x6a>

    default:
      ret = HAL_ERROR;
 800234e:	2301      	movs	r3, #1
 8002350:	73fb      	strb	r3, [r7, #15]
      break;
 8002352:	e000      	b.n	8002356 <USB_ActivateEndpoint+0x6a>
      break;
 8002354:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX);
 8002356:	687a      	ldr	r2, [r7, #4]
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	781b      	ldrb	r3, [r3, #0]
 800235c:	009b      	lsls	r3, r3, #2
 800235e:	441a      	add	r2, r3
 8002360:	89bb      	ldrh	r3, [r7, #12]
 8002362:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002366:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800236a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800236e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002372:	b29b      	uxth	r3, r3
 8002374:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8002376:	687a      	ldr	r2, [r7, #4]
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	781b      	ldrb	r3, [r3, #0]
 800237c:	009b      	lsls	r3, r3, #2
 800237e:	4413      	add	r3, r2
 8002380:	881b      	ldrh	r3, [r3, #0]
 8002382:	b29b      	uxth	r3, r3
 8002384:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002388:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800238c:	b29a      	uxth	r2, r3
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	781b      	ldrb	r3, [r3, #0]
 8002392:	b29b      	uxth	r3, r3
 8002394:	4313      	orrs	r3, r2
 8002396:	b29c      	uxth	r4, r3
 8002398:	687a      	ldr	r2, [r7, #4]
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	781b      	ldrb	r3, [r3, #0]
 800239e:	009b      	lsls	r3, r3, #2
 80023a0:	441a      	add	r2, r3
 80023a2:	4b8a      	ldr	r3, [pc, #552]	; (80025cc <USB_ActivateEndpoint+0x2e0>)
 80023a4:	4323      	orrs	r3, r4
 80023a6:	b29b      	uxth	r3, r3
 80023a8:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	7b1b      	ldrb	r3, [r3, #12]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	f040 8112 	bne.w	80025d8 <USB_ActivateEndpoint+0x2ec>
  {
    if (ep->is_in != 0U)
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	785b      	ldrb	r3, [r3, #1]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d067      	beq.n	800248c <USB_ActivateEndpoint+0x1a0>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80023bc:	687c      	ldr	r4, [r7, #4]
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80023c4:	b29b      	uxth	r3, r3
 80023c6:	441c      	add	r4, r3
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	781b      	ldrb	r3, [r3, #0]
 80023cc:	011b      	lsls	r3, r3, #4
 80023ce:	4423      	add	r3, r4
 80023d0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80023d4:	461c      	mov	r4, r3
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	88db      	ldrh	r3, [r3, #6]
 80023da:	085b      	lsrs	r3, r3, #1
 80023dc:	b29b      	uxth	r3, r3
 80023de:	005b      	lsls	r3, r3, #1
 80023e0:	b29b      	uxth	r3, r3
 80023e2:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80023e4:	687a      	ldr	r2, [r7, #4]
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	781b      	ldrb	r3, [r3, #0]
 80023ea:	009b      	lsls	r3, r3, #2
 80023ec:	4413      	add	r3, r2
 80023ee:	881b      	ldrh	r3, [r3, #0]
 80023f0:	b29c      	uxth	r4, r3
 80023f2:	4623      	mov	r3, r4
 80023f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d014      	beq.n	8002426 <USB_ActivateEndpoint+0x13a>
 80023fc:	687a      	ldr	r2, [r7, #4]
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	781b      	ldrb	r3, [r3, #0]
 8002402:	009b      	lsls	r3, r3, #2
 8002404:	4413      	add	r3, r2
 8002406:	881b      	ldrh	r3, [r3, #0]
 8002408:	b29b      	uxth	r3, r3
 800240a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800240e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002412:	b29c      	uxth	r4, r3
 8002414:	687a      	ldr	r2, [r7, #4]
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	781b      	ldrb	r3, [r3, #0]
 800241a:	009b      	lsls	r3, r3, #2
 800241c:	441a      	add	r2, r3
 800241e:	4b6c      	ldr	r3, [pc, #432]	; (80025d0 <USB_ActivateEndpoint+0x2e4>)
 8002420:	4323      	orrs	r3, r4
 8002422:	b29b      	uxth	r3, r3
 8002424:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	78db      	ldrb	r3, [r3, #3]
 800242a:	2b01      	cmp	r3, #1
 800242c:	d018      	beq.n	8002460 <USB_ActivateEndpoint+0x174>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800242e:	687a      	ldr	r2, [r7, #4]
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	781b      	ldrb	r3, [r3, #0]
 8002434:	009b      	lsls	r3, r3, #2
 8002436:	4413      	add	r3, r2
 8002438:	881b      	ldrh	r3, [r3, #0]
 800243a:	b29b      	uxth	r3, r3
 800243c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002440:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002444:	b29c      	uxth	r4, r3
 8002446:	f084 0320 	eor.w	r3, r4, #32
 800244a:	b29c      	uxth	r4, r3
 800244c:	687a      	ldr	r2, [r7, #4]
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	781b      	ldrb	r3, [r3, #0]
 8002452:	009b      	lsls	r3, r3, #2
 8002454:	441a      	add	r2, r3
 8002456:	4b5d      	ldr	r3, [pc, #372]	; (80025cc <USB_ActivateEndpoint+0x2e0>)
 8002458:	4323      	orrs	r3, r4
 800245a:	b29b      	uxth	r3, r3
 800245c:	8013      	strh	r3, [r2, #0]
 800245e:	e22b      	b.n	80028b8 <USB_ActivateEndpoint+0x5cc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002460:	687a      	ldr	r2, [r7, #4]
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	781b      	ldrb	r3, [r3, #0]
 8002466:	009b      	lsls	r3, r3, #2
 8002468:	4413      	add	r3, r2
 800246a:	881b      	ldrh	r3, [r3, #0]
 800246c:	b29b      	uxth	r3, r3
 800246e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002472:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002476:	b29c      	uxth	r4, r3
 8002478:	687a      	ldr	r2, [r7, #4]
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	781b      	ldrb	r3, [r3, #0]
 800247e:	009b      	lsls	r3, r3, #2
 8002480:	441a      	add	r2, r3
 8002482:	4b52      	ldr	r3, [pc, #328]	; (80025cc <USB_ActivateEndpoint+0x2e0>)
 8002484:	4323      	orrs	r3, r4
 8002486:	b29b      	uxth	r3, r3
 8002488:	8013      	strh	r3, [r2, #0]
 800248a:	e215      	b.n	80028b8 <USB_ActivateEndpoint+0x5cc>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800248c:	687c      	ldr	r4, [r7, #4]
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002494:	b29b      	uxth	r3, r3
 8002496:	441c      	add	r4, r3
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	781b      	ldrb	r3, [r3, #0]
 800249c:	011b      	lsls	r3, r3, #4
 800249e:	4423      	add	r3, r4
 80024a0:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80024a4:	461c      	mov	r4, r3
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	88db      	ldrh	r3, [r3, #6]
 80024aa:	085b      	lsrs	r3, r3, #1
 80024ac:	b29b      	uxth	r3, r3
 80024ae:	005b      	lsls	r3, r3, #1
 80024b0:	b29b      	uxth	r3, r3
 80024b2:	8023      	strh	r3, [r4, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80024b4:	687c      	ldr	r4, [r7, #4]
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80024bc:	b29b      	uxth	r3, r3
 80024be:	441c      	add	r4, r3
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	781b      	ldrb	r3, [r3, #0]
 80024c4:	011b      	lsls	r3, r3, #4
 80024c6:	4423      	add	r3, r4
 80024c8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80024cc:	461c      	mov	r4, r3
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	691b      	ldr	r3, [r3, #16]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d10e      	bne.n	80024f4 <USB_ActivateEndpoint+0x208>
 80024d6:	8823      	ldrh	r3, [r4, #0]
 80024d8:	b29b      	uxth	r3, r3
 80024da:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80024de:	b29b      	uxth	r3, r3
 80024e0:	8023      	strh	r3, [r4, #0]
 80024e2:	8823      	ldrh	r3, [r4, #0]
 80024e4:	b29b      	uxth	r3, r3
 80024e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80024ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80024ee:	b29b      	uxth	r3, r3
 80024f0:	8023      	strh	r3, [r4, #0]
 80024f2:	e02d      	b.n	8002550 <USB_ActivateEndpoint+0x264>
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	691b      	ldr	r3, [r3, #16]
 80024f8:	2b3e      	cmp	r3, #62	; 0x3e
 80024fa:	d812      	bhi.n	8002522 <USB_ActivateEndpoint+0x236>
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	691b      	ldr	r3, [r3, #16]
 8002500:	085b      	lsrs	r3, r3, #1
 8002502:	60bb      	str	r3, [r7, #8]
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	691b      	ldr	r3, [r3, #16]
 8002508:	f003 0301 	and.w	r3, r3, #1
 800250c:	2b00      	cmp	r3, #0
 800250e:	d002      	beq.n	8002516 <USB_ActivateEndpoint+0x22a>
 8002510:	68bb      	ldr	r3, [r7, #8]
 8002512:	3301      	adds	r3, #1
 8002514:	60bb      	str	r3, [r7, #8]
 8002516:	68bb      	ldr	r3, [r7, #8]
 8002518:	b29b      	uxth	r3, r3
 800251a:	029b      	lsls	r3, r3, #10
 800251c:	b29b      	uxth	r3, r3
 800251e:	8023      	strh	r3, [r4, #0]
 8002520:	e016      	b.n	8002550 <USB_ActivateEndpoint+0x264>
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	691b      	ldr	r3, [r3, #16]
 8002526:	095b      	lsrs	r3, r3, #5
 8002528:	60bb      	str	r3, [r7, #8]
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	691b      	ldr	r3, [r3, #16]
 800252e:	f003 031f 	and.w	r3, r3, #31
 8002532:	2b00      	cmp	r3, #0
 8002534:	d102      	bne.n	800253c <USB_ActivateEndpoint+0x250>
 8002536:	68bb      	ldr	r3, [r7, #8]
 8002538:	3b01      	subs	r3, #1
 800253a:	60bb      	str	r3, [r7, #8]
 800253c:	68bb      	ldr	r3, [r7, #8]
 800253e:	b29b      	uxth	r3, r3
 8002540:	029b      	lsls	r3, r3, #10
 8002542:	b29b      	uxth	r3, r3
 8002544:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002548:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800254c:	b29b      	uxth	r3, r3
 800254e:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002550:	687a      	ldr	r2, [r7, #4]
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	781b      	ldrb	r3, [r3, #0]
 8002556:	009b      	lsls	r3, r3, #2
 8002558:	4413      	add	r3, r2
 800255a:	881b      	ldrh	r3, [r3, #0]
 800255c:	b29c      	uxth	r4, r3
 800255e:	4623      	mov	r3, r4
 8002560:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002564:	2b00      	cmp	r3, #0
 8002566:	d014      	beq.n	8002592 <USB_ActivateEndpoint+0x2a6>
 8002568:	687a      	ldr	r2, [r7, #4]
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	781b      	ldrb	r3, [r3, #0]
 800256e:	009b      	lsls	r3, r3, #2
 8002570:	4413      	add	r3, r2
 8002572:	881b      	ldrh	r3, [r3, #0]
 8002574:	b29b      	uxth	r3, r3
 8002576:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800257a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800257e:	b29c      	uxth	r4, r3
 8002580:	687a      	ldr	r2, [r7, #4]
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	781b      	ldrb	r3, [r3, #0]
 8002586:	009b      	lsls	r3, r3, #2
 8002588:	441a      	add	r2, r3
 800258a:	4b12      	ldr	r3, [pc, #72]	; (80025d4 <USB_ActivateEndpoint+0x2e8>)
 800258c:	4323      	orrs	r3, r4
 800258e:	b29b      	uxth	r3, r3
 8002590:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002592:	687a      	ldr	r2, [r7, #4]
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	781b      	ldrb	r3, [r3, #0]
 8002598:	009b      	lsls	r3, r3, #2
 800259a:	4413      	add	r3, r2
 800259c:	881b      	ldrh	r3, [r3, #0]
 800259e:	b29b      	uxth	r3, r3
 80025a0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80025a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025a8:	b29c      	uxth	r4, r3
 80025aa:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 80025ae:	b29c      	uxth	r4, r3
 80025b0:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 80025b4:	b29c      	uxth	r4, r3
 80025b6:	687a      	ldr	r2, [r7, #4]
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	781b      	ldrb	r3, [r3, #0]
 80025bc:	009b      	lsls	r3, r3, #2
 80025be:	441a      	add	r2, r3
 80025c0:	4b02      	ldr	r3, [pc, #8]	; (80025cc <USB_ActivateEndpoint+0x2e0>)
 80025c2:	4323      	orrs	r3, r4
 80025c4:	b29b      	uxth	r3, r3
 80025c6:	8013      	strh	r3, [r2, #0]
 80025c8:	e176      	b.n	80028b8 <USB_ActivateEndpoint+0x5cc>
 80025ca:	bf00      	nop
 80025cc:	ffff8080 	.word	0xffff8080
 80025d0:	ffff80c0 	.word	0xffff80c0
 80025d4:	ffffc080 	.word	0xffffc080
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 80025d8:	687a      	ldr	r2, [r7, #4]
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	781b      	ldrb	r3, [r3, #0]
 80025de:	009b      	lsls	r3, r3, #2
 80025e0:	4413      	add	r3, r2
 80025e2:	881b      	ldrh	r3, [r3, #0]
 80025e4:	b29b      	uxth	r3, r3
 80025e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80025ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025ee:	b29c      	uxth	r4, r3
 80025f0:	687a      	ldr	r2, [r7, #4]
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	781b      	ldrb	r3, [r3, #0]
 80025f6:	009b      	lsls	r3, r3, #2
 80025f8:	441a      	add	r2, r3
 80025fa:	4b96      	ldr	r3, [pc, #600]	; (8002854 <USB_ActivateEndpoint+0x568>)
 80025fc:	4323      	orrs	r3, r4
 80025fe:	b29b      	uxth	r3, r3
 8002600:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8002602:	687c      	ldr	r4, [r7, #4]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800260a:	b29b      	uxth	r3, r3
 800260c:	441c      	add	r4, r3
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	781b      	ldrb	r3, [r3, #0]
 8002612:	011b      	lsls	r3, r3, #4
 8002614:	4423      	add	r3, r4
 8002616:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800261a:	461c      	mov	r4, r3
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	891b      	ldrh	r3, [r3, #8]
 8002620:	085b      	lsrs	r3, r3, #1
 8002622:	b29b      	uxth	r3, r3
 8002624:	005b      	lsls	r3, r3, #1
 8002626:	b29b      	uxth	r3, r3
 8002628:	8023      	strh	r3, [r4, #0]
 800262a:	687c      	ldr	r4, [r7, #4]
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002632:	b29b      	uxth	r3, r3
 8002634:	441c      	add	r4, r3
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	781b      	ldrb	r3, [r3, #0]
 800263a:	011b      	lsls	r3, r3, #4
 800263c:	4423      	add	r3, r4
 800263e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8002642:	461c      	mov	r4, r3
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	895b      	ldrh	r3, [r3, #10]
 8002648:	085b      	lsrs	r3, r3, #1
 800264a:	b29b      	uxth	r3, r3
 800264c:	005b      	lsls	r3, r3, #1
 800264e:	b29b      	uxth	r3, r3
 8002650:	8023      	strh	r3, [r4, #0]

    if (ep->is_in == 0U)
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	785b      	ldrb	r3, [r3, #1]
 8002656:	2b00      	cmp	r3, #0
 8002658:	f040 8088 	bne.w	800276c <USB_ActivateEndpoint+0x480>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800265c:	687a      	ldr	r2, [r7, #4]
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	781b      	ldrb	r3, [r3, #0]
 8002662:	009b      	lsls	r3, r3, #2
 8002664:	4413      	add	r3, r2
 8002666:	881b      	ldrh	r3, [r3, #0]
 8002668:	b29c      	uxth	r4, r3
 800266a:	4623      	mov	r3, r4
 800266c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002670:	2b00      	cmp	r3, #0
 8002672:	d014      	beq.n	800269e <USB_ActivateEndpoint+0x3b2>
 8002674:	687a      	ldr	r2, [r7, #4]
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	781b      	ldrb	r3, [r3, #0]
 800267a:	009b      	lsls	r3, r3, #2
 800267c:	4413      	add	r3, r2
 800267e:	881b      	ldrh	r3, [r3, #0]
 8002680:	b29b      	uxth	r3, r3
 8002682:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002686:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800268a:	b29c      	uxth	r4, r3
 800268c:	687a      	ldr	r2, [r7, #4]
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	781b      	ldrb	r3, [r3, #0]
 8002692:	009b      	lsls	r3, r3, #2
 8002694:	441a      	add	r2, r3
 8002696:	4b70      	ldr	r3, [pc, #448]	; (8002858 <USB_ActivateEndpoint+0x56c>)
 8002698:	4323      	orrs	r3, r4
 800269a:	b29b      	uxth	r3, r3
 800269c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800269e:	687a      	ldr	r2, [r7, #4]
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	781b      	ldrb	r3, [r3, #0]
 80026a4:	009b      	lsls	r3, r3, #2
 80026a6:	4413      	add	r3, r2
 80026a8:	881b      	ldrh	r3, [r3, #0]
 80026aa:	b29c      	uxth	r4, r3
 80026ac:	4623      	mov	r3, r4
 80026ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d014      	beq.n	80026e0 <USB_ActivateEndpoint+0x3f4>
 80026b6:	687a      	ldr	r2, [r7, #4]
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	781b      	ldrb	r3, [r3, #0]
 80026bc:	009b      	lsls	r3, r3, #2
 80026be:	4413      	add	r3, r2
 80026c0:	881b      	ldrh	r3, [r3, #0]
 80026c2:	b29b      	uxth	r3, r3
 80026c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80026c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026cc:	b29c      	uxth	r4, r3
 80026ce:	687a      	ldr	r2, [r7, #4]
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	781b      	ldrb	r3, [r3, #0]
 80026d4:	009b      	lsls	r3, r3, #2
 80026d6:	441a      	add	r2, r3
 80026d8:	4b60      	ldr	r3, [pc, #384]	; (800285c <USB_ActivateEndpoint+0x570>)
 80026da:	4323      	orrs	r3, r4
 80026dc:	b29b      	uxth	r3, r3
 80026de:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out */
      PCD_TX_DTOG(USBx, ep->num);
 80026e0:	687a      	ldr	r2, [r7, #4]
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	781b      	ldrb	r3, [r3, #0]
 80026e6:	009b      	lsls	r3, r3, #2
 80026e8:	4413      	add	r3, r2
 80026ea:	881b      	ldrh	r3, [r3, #0]
 80026ec:	b29b      	uxth	r3, r3
 80026ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80026f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026f6:	b29c      	uxth	r4, r3
 80026f8:	687a      	ldr	r2, [r7, #4]
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	781b      	ldrb	r3, [r3, #0]
 80026fe:	009b      	lsls	r3, r3, #2
 8002700:	441a      	add	r2, r3
 8002702:	4b56      	ldr	r3, [pc, #344]	; (800285c <USB_ActivateEndpoint+0x570>)
 8002704:	4323      	orrs	r3, r4
 8002706:	b29b      	uxth	r3, r3
 8002708:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800270a:	687a      	ldr	r2, [r7, #4]
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	781b      	ldrb	r3, [r3, #0]
 8002710:	009b      	lsls	r3, r3, #2
 8002712:	4413      	add	r3, r2
 8002714:	881b      	ldrh	r3, [r3, #0]
 8002716:	b29b      	uxth	r3, r3
 8002718:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800271c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002720:	b29c      	uxth	r4, r3
 8002722:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8002726:	b29c      	uxth	r4, r3
 8002728:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 800272c:	b29c      	uxth	r4, r3
 800272e:	687a      	ldr	r2, [r7, #4]
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	781b      	ldrb	r3, [r3, #0]
 8002734:	009b      	lsls	r3, r3, #2
 8002736:	441a      	add	r2, r3
 8002738:	4b49      	ldr	r3, [pc, #292]	; (8002860 <USB_ActivateEndpoint+0x574>)
 800273a:	4323      	orrs	r3, r4
 800273c:	b29b      	uxth	r3, r3
 800273e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002740:	687a      	ldr	r2, [r7, #4]
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	781b      	ldrb	r3, [r3, #0]
 8002746:	009b      	lsls	r3, r3, #2
 8002748:	4413      	add	r3, r2
 800274a:	881b      	ldrh	r3, [r3, #0]
 800274c:	b29b      	uxth	r3, r3
 800274e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002752:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002756:	b29c      	uxth	r4, r3
 8002758:	687a      	ldr	r2, [r7, #4]
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	781b      	ldrb	r3, [r3, #0]
 800275e:	009b      	lsls	r3, r3, #2
 8002760:	441a      	add	r2, r3
 8002762:	4b3f      	ldr	r3, [pc, #252]	; (8002860 <USB_ActivateEndpoint+0x574>)
 8002764:	4323      	orrs	r3, r4
 8002766:	b29b      	uxth	r3, r3
 8002768:	8013      	strh	r3, [r2, #0]
 800276a:	e0a5      	b.n	80028b8 <USB_ActivateEndpoint+0x5cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800276c:	687a      	ldr	r2, [r7, #4]
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	781b      	ldrb	r3, [r3, #0]
 8002772:	009b      	lsls	r3, r3, #2
 8002774:	4413      	add	r3, r2
 8002776:	881b      	ldrh	r3, [r3, #0]
 8002778:	b29c      	uxth	r4, r3
 800277a:	4623      	mov	r3, r4
 800277c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002780:	2b00      	cmp	r3, #0
 8002782:	d014      	beq.n	80027ae <USB_ActivateEndpoint+0x4c2>
 8002784:	687a      	ldr	r2, [r7, #4]
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	781b      	ldrb	r3, [r3, #0]
 800278a:	009b      	lsls	r3, r3, #2
 800278c:	4413      	add	r3, r2
 800278e:	881b      	ldrh	r3, [r3, #0]
 8002790:	b29b      	uxth	r3, r3
 8002792:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002796:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800279a:	b29c      	uxth	r4, r3
 800279c:	687a      	ldr	r2, [r7, #4]
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	781b      	ldrb	r3, [r3, #0]
 80027a2:	009b      	lsls	r3, r3, #2
 80027a4:	441a      	add	r2, r3
 80027a6:	4b2c      	ldr	r3, [pc, #176]	; (8002858 <USB_ActivateEndpoint+0x56c>)
 80027a8:	4323      	orrs	r3, r4
 80027aa:	b29b      	uxth	r3, r3
 80027ac:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80027ae:	687a      	ldr	r2, [r7, #4]
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	781b      	ldrb	r3, [r3, #0]
 80027b4:	009b      	lsls	r3, r3, #2
 80027b6:	4413      	add	r3, r2
 80027b8:	881b      	ldrh	r3, [r3, #0]
 80027ba:	b29c      	uxth	r4, r3
 80027bc:	4623      	mov	r3, r4
 80027be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d014      	beq.n	80027f0 <USB_ActivateEndpoint+0x504>
 80027c6:	687a      	ldr	r2, [r7, #4]
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	781b      	ldrb	r3, [r3, #0]
 80027cc:	009b      	lsls	r3, r3, #2
 80027ce:	4413      	add	r3, r2
 80027d0:	881b      	ldrh	r3, [r3, #0]
 80027d2:	b29b      	uxth	r3, r3
 80027d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80027d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027dc:	b29c      	uxth	r4, r3
 80027de:	687a      	ldr	r2, [r7, #4]
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	781b      	ldrb	r3, [r3, #0]
 80027e4:	009b      	lsls	r3, r3, #2
 80027e6:	441a      	add	r2, r3
 80027e8:	4b1c      	ldr	r3, [pc, #112]	; (800285c <USB_ActivateEndpoint+0x570>)
 80027ea:	4323      	orrs	r3, r4
 80027ec:	b29b      	uxth	r3, r3
 80027ee:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80027f0:	687a      	ldr	r2, [r7, #4]
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	781b      	ldrb	r3, [r3, #0]
 80027f6:	009b      	lsls	r3, r3, #2
 80027f8:	4413      	add	r3, r2
 80027fa:	881b      	ldrh	r3, [r3, #0]
 80027fc:	b29b      	uxth	r3, r3
 80027fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002802:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002806:	b29c      	uxth	r4, r3
 8002808:	687a      	ldr	r2, [r7, #4]
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	781b      	ldrb	r3, [r3, #0]
 800280e:	009b      	lsls	r3, r3, #2
 8002810:	441a      	add	r2, r3
 8002812:	4b11      	ldr	r3, [pc, #68]	; (8002858 <USB_ActivateEndpoint+0x56c>)
 8002814:	4323      	orrs	r3, r4
 8002816:	b29b      	uxth	r3, r3
 8002818:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	78db      	ldrb	r3, [r3, #3]
 800281e:	2b01      	cmp	r3, #1
 8002820:	d020      	beq.n	8002864 <USB_ActivateEndpoint+0x578>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8002822:	687a      	ldr	r2, [r7, #4]
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	781b      	ldrb	r3, [r3, #0]
 8002828:	009b      	lsls	r3, r3, #2
 800282a:	4413      	add	r3, r2
 800282c:	881b      	ldrh	r3, [r3, #0]
 800282e:	b29b      	uxth	r3, r3
 8002830:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002834:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002838:	b29c      	uxth	r4, r3
 800283a:	f084 0320 	eor.w	r3, r4, #32
 800283e:	b29c      	uxth	r4, r3
 8002840:	687a      	ldr	r2, [r7, #4]
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	781b      	ldrb	r3, [r3, #0]
 8002846:	009b      	lsls	r3, r3, #2
 8002848:	441a      	add	r2, r3
 800284a:	4b05      	ldr	r3, [pc, #20]	; (8002860 <USB_ActivateEndpoint+0x574>)
 800284c:	4323      	orrs	r3, r4
 800284e:	b29b      	uxth	r3, r3
 8002850:	8013      	strh	r3, [r2, #0]
 8002852:	e01c      	b.n	800288e <USB_ActivateEndpoint+0x5a2>
 8002854:	ffff8180 	.word	0xffff8180
 8002858:	ffffc080 	.word	0xffffc080
 800285c:	ffff80c0 	.word	0xffff80c0
 8002860:	ffff8080 	.word	0xffff8080
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002864:	687a      	ldr	r2, [r7, #4]
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	781b      	ldrb	r3, [r3, #0]
 800286a:	009b      	lsls	r3, r3, #2
 800286c:	4413      	add	r3, r2
 800286e:	881b      	ldrh	r3, [r3, #0]
 8002870:	b29b      	uxth	r3, r3
 8002872:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002876:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800287a:	b29c      	uxth	r4, r3
 800287c:	687a      	ldr	r2, [r7, #4]
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	781b      	ldrb	r3, [r3, #0]
 8002882:	009b      	lsls	r3, r3, #2
 8002884:	441a      	add	r2, r3
 8002886:	4b0f      	ldr	r3, [pc, #60]	; (80028c4 <USB_ActivateEndpoint+0x5d8>)
 8002888:	4323      	orrs	r3, r4
 800288a:	b29b      	uxth	r3, r3
 800288c:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800288e:	687a      	ldr	r2, [r7, #4]
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	781b      	ldrb	r3, [r3, #0]
 8002894:	009b      	lsls	r3, r3, #2
 8002896:	4413      	add	r3, r2
 8002898:	881b      	ldrh	r3, [r3, #0]
 800289a:	b29b      	uxth	r3, r3
 800289c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80028a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028a4:	b29c      	uxth	r4, r3
 80028a6:	687a      	ldr	r2, [r7, #4]
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	781b      	ldrb	r3, [r3, #0]
 80028ac:	009b      	lsls	r3, r3, #2
 80028ae:	441a      	add	r2, r3
 80028b0:	4b04      	ldr	r3, [pc, #16]	; (80028c4 <USB_ActivateEndpoint+0x5d8>)
 80028b2:	4323      	orrs	r3, r4
 80028b4:	b29b      	uxth	r3, r3
 80028b6:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 80028b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80028ba:	4618      	mov	r0, r3
 80028bc:	3710      	adds	r7, #16
 80028be:	46bd      	mov	sp, r7
 80028c0:	bc90      	pop	{r4, r7}
 80028c2:	4770      	bx	lr
 80028c4:	ffff8080 	.word	0xffff8080

080028c8 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80028c8:	b490      	push	{r4, r7}
 80028ca:	b082      	sub	sp, #8
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
 80028d0:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	7b1b      	ldrb	r3, [r3, #12]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d171      	bne.n	80029be <USB_DeactivateEndpoint+0xf6>
  {
    if (ep->is_in != 0U)
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	785b      	ldrb	r3, [r3, #1]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d036      	beq.n	8002950 <USB_DeactivateEndpoint+0x88>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80028e2:	687a      	ldr	r2, [r7, #4]
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	781b      	ldrb	r3, [r3, #0]
 80028e8:	009b      	lsls	r3, r3, #2
 80028ea:	4413      	add	r3, r2
 80028ec:	881b      	ldrh	r3, [r3, #0]
 80028ee:	b29c      	uxth	r4, r3
 80028f0:	4623      	mov	r3, r4
 80028f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d014      	beq.n	8002924 <USB_DeactivateEndpoint+0x5c>
 80028fa:	687a      	ldr	r2, [r7, #4]
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	781b      	ldrb	r3, [r3, #0]
 8002900:	009b      	lsls	r3, r3, #2
 8002902:	4413      	add	r3, r2
 8002904:	881b      	ldrh	r3, [r3, #0]
 8002906:	b29b      	uxth	r3, r3
 8002908:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800290c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002910:	b29c      	uxth	r4, r3
 8002912:	687a      	ldr	r2, [r7, #4]
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	781b      	ldrb	r3, [r3, #0]
 8002918:	009b      	lsls	r3, r3, #2
 800291a:	441a      	add	r2, r3
 800291c:	4b6b      	ldr	r3, [pc, #428]	; (8002acc <USB_DeactivateEndpoint+0x204>)
 800291e:	4323      	orrs	r3, r4
 8002920:	b29b      	uxth	r3, r3
 8002922:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002924:	687a      	ldr	r2, [r7, #4]
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	781b      	ldrb	r3, [r3, #0]
 800292a:	009b      	lsls	r3, r3, #2
 800292c:	4413      	add	r3, r2
 800292e:	881b      	ldrh	r3, [r3, #0]
 8002930:	b29b      	uxth	r3, r3
 8002932:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002936:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800293a:	b29c      	uxth	r4, r3
 800293c:	687a      	ldr	r2, [r7, #4]
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	781b      	ldrb	r3, [r3, #0]
 8002942:	009b      	lsls	r3, r3, #2
 8002944:	441a      	add	r2, r3
 8002946:	4b62      	ldr	r3, [pc, #392]	; (8002ad0 <USB_DeactivateEndpoint+0x208>)
 8002948:	4323      	orrs	r3, r4
 800294a:	b29b      	uxth	r3, r3
 800294c:	8013      	strh	r3, [r2, #0]
 800294e:	e144      	b.n	8002bda <USB_DeactivateEndpoint+0x312>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002950:	687a      	ldr	r2, [r7, #4]
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	781b      	ldrb	r3, [r3, #0]
 8002956:	009b      	lsls	r3, r3, #2
 8002958:	4413      	add	r3, r2
 800295a:	881b      	ldrh	r3, [r3, #0]
 800295c:	b29c      	uxth	r4, r3
 800295e:	4623      	mov	r3, r4
 8002960:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002964:	2b00      	cmp	r3, #0
 8002966:	d014      	beq.n	8002992 <USB_DeactivateEndpoint+0xca>
 8002968:	687a      	ldr	r2, [r7, #4]
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	781b      	ldrb	r3, [r3, #0]
 800296e:	009b      	lsls	r3, r3, #2
 8002970:	4413      	add	r3, r2
 8002972:	881b      	ldrh	r3, [r3, #0]
 8002974:	b29b      	uxth	r3, r3
 8002976:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800297a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800297e:	b29c      	uxth	r4, r3
 8002980:	687a      	ldr	r2, [r7, #4]
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	781b      	ldrb	r3, [r3, #0]
 8002986:	009b      	lsls	r3, r3, #2
 8002988:	441a      	add	r2, r3
 800298a:	4b52      	ldr	r3, [pc, #328]	; (8002ad4 <USB_DeactivateEndpoint+0x20c>)
 800298c:	4323      	orrs	r3, r4
 800298e:	b29b      	uxth	r3, r3
 8002990:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002992:	687a      	ldr	r2, [r7, #4]
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	781b      	ldrb	r3, [r3, #0]
 8002998:	009b      	lsls	r3, r3, #2
 800299a:	4413      	add	r3, r2
 800299c:	881b      	ldrh	r3, [r3, #0]
 800299e:	b29b      	uxth	r3, r3
 80029a0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80029a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029a8:	b29c      	uxth	r4, r3
 80029aa:	687a      	ldr	r2, [r7, #4]
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	781b      	ldrb	r3, [r3, #0]
 80029b0:	009b      	lsls	r3, r3, #2
 80029b2:	441a      	add	r2, r3
 80029b4:	4b46      	ldr	r3, [pc, #280]	; (8002ad0 <USB_DeactivateEndpoint+0x208>)
 80029b6:	4323      	orrs	r3, r4
 80029b8:	b29b      	uxth	r3, r3
 80029ba:	8013      	strh	r3, [r2, #0]
 80029bc:	e10d      	b.n	8002bda <USB_DeactivateEndpoint+0x312>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	785b      	ldrb	r3, [r3, #1]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	f040 8088 	bne.w	8002ad8 <USB_DeactivateEndpoint+0x210>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80029c8:	687a      	ldr	r2, [r7, #4]
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	781b      	ldrb	r3, [r3, #0]
 80029ce:	009b      	lsls	r3, r3, #2
 80029d0:	4413      	add	r3, r2
 80029d2:	881b      	ldrh	r3, [r3, #0]
 80029d4:	b29c      	uxth	r4, r3
 80029d6:	4623      	mov	r3, r4
 80029d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d014      	beq.n	8002a0a <USB_DeactivateEndpoint+0x142>
 80029e0:	687a      	ldr	r2, [r7, #4]
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	781b      	ldrb	r3, [r3, #0]
 80029e6:	009b      	lsls	r3, r3, #2
 80029e8:	4413      	add	r3, r2
 80029ea:	881b      	ldrh	r3, [r3, #0]
 80029ec:	b29b      	uxth	r3, r3
 80029ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80029f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029f6:	b29c      	uxth	r4, r3
 80029f8:	687a      	ldr	r2, [r7, #4]
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	781b      	ldrb	r3, [r3, #0]
 80029fe:	009b      	lsls	r3, r3, #2
 8002a00:	441a      	add	r2, r3
 8002a02:	4b34      	ldr	r3, [pc, #208]	; (8002ad4 <USB_DeactivateEndpoint+0x20c>)
 8002a04:	4323      	orrs	r3, r4
 8002a06:	b29b      	uxth	r3, r3
 8002a08:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002a0a:	687a      	ldr	r2, [r7, #4]
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	781b      	ldrb	r3, [r3, #0]
 8002a10:	009b      	lsls	r3, r3, #2
 8002a12:	4413      	add	r3, r2
 8002a14:	881b      	ldrh	r3, [r3, #0]
 8002a16:	b29c      	uxth	r4, r3
 8002a18:	4623      	mov	r3, r4
 8002a1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d014      	beq.n	8002a4c <USB_DeactivateEndpoint+0x184>
 8002a22:	687a      	ldr	r2, [r7, #4]
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	781b      	ldrb	r3, [r3, #0]
 8002a28:	009b      	lsls	r3, r3, #2
 8002a2a:	4413      	add	r3, r2
 8002a2c:	881b      	ldrh	r3, [r3, #0]
 8002a2e:	b29b      	uxth	r3, r3
 8002a30:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a38:	b29c      	uxth	r4, r3
 8002a3a:	687a      	ldr	r2, [r7, #4]
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	781b      	ldrb	r3, [r3, #0]
 8002a40:	009b      	lsls	r3, r3, #2
 8002a42:	441a      	add	r2, r3
 8002a44:	4b21      	ldr	r3, [pc, #132]	; (8002acc <USB_DeactivateEndpoint+0x204>)
 8002a46:	4323      	orrs	r3, r4
 8002a48:	b29b      	uxth	r3, r3
 8002a4a:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8002a4c:	687a      	ldr	r2, [r7, #4]
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	781b      	ldrb	r3, [r3, #0]
 8002a52:	009b      	lsls	r3, r3, #2
 8002a54:	4413      	add	r3, r2
 8002a56:	881b      	ldrh	r3, [r3, #0]
 8002a58:	b29b      	uxth	r3, r3
 8002a5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a62:	b29c      	uxth	r4, r3
 8002a64:	687a      	ldr	r2, [r7, #4]
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	781b      	ldrb	r3, [r3, #0]
 8002a6a:	009b      	lsls	r3, r3, #2
 8002a6c:	441a      	add	r2, r3
 8002a6e:	4b17      	ldr	r3, [pc, #92]	; (8002acc <USB_DeactivateEndpoint+0x204>)
 8002a70:	4323      	orrs	r3, r4
 8002a72:	b29b      	uxth	r3, r3
 8002a74:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002a76:	687a      	ldr	r2, [r7, #4]
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	781b      	ldrb	r3, [r3, #0]
 8002a7c:	009b      	lsls	r3, r3, #2
 8002a7e:	4413      	add	r3, r2
 8002a80:	881b      	ldrh	r3, [r3, #0]
 8002a82:	b29b      	uxth	r3, r3
 8002a84:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002a88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a8c:	b29c      	uxth	r4, r3
 8002a8e:	687a      	ldr	r2, [r7, #4]
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	781b      	ldrb	r3, [r3, #0]
 8002a94:	009b      	lsls	r3, r3, #2
 8002a96:	441a      	add	r2, r3
 8002a98:	4b0d      	ldr	r3, [pc, #52]	; (8002ad0 <USB_DeactivateEndpoint+0x208>)
 8002a9a:	4323      	orrs	r3, r4
 8002a9c:	b29b      	uxth	r3, r3
 8002a9e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002aa0:	687a      	ldr	r2, [r7, #4]
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	781b      	ldrb	r3, [r3, #0]
 8002aa6:	009b      	lsls	r3, r3, #2
 8002aa8:	4413      	add	r3, r2
 8002aaa:	881b      	ldrh	r3, [r3, #0]
 8002aac:	b29b      	uxth	r3, r3
 8002aae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ab2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002ab6:	b29c      	uxth	r4, r3
 8002ab8:	687a      	ldr	r2, [r7, #4]
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	781b      	ldrb	r3, [r3, #0]
 8002abe:	009b      	lsls	r3, r3, #2
 8002ac0:	441a      	add	r2, r3
 8002ac2:	4b03      	ldr	r3, [pc, #12]	; (8002ad0 <USB_DeactivateEndpoint+0x208>)
 8002ac4:	4323      	orrs	r3, r4
 8002ac6:	b29b      	uxth	r3, r3
 8002ac8:	8013      	strh	r3, [r2, #0]
 8002aca:	e086      	b.n	8002bda <USB_DeactivateEndpoint+0x312>
 8002acc:	ffff80c0 	.word	0xffff80c0
 8002ad0:	ffff8080 	.word	0xffff8080
 8002ad4:	ffffc080 	.word	0xffffc080
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002ad8:	687a      	ldr	r2, [r7, #4]
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	781b      	ldrb	r3, [r3, #0]
 8002ade:	009b      	lsls	r3, r3, #2
 8002ae0:	4413      	add	r3, r2
 8002ae2:	881b      	ldrh	r3, [r3, #0]
 8002ae4:	b29c      	uxth	r4, r3
 8002ae6:	4623      	mov	r3, r4
 8002ae8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d014      	beq.n	8002b1a <USB_DeactivateEndpoint+0x252>
 8002af0:	687a      	ldr	r2, [r7, #4]
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	781b      	ldrb	r3, [r3, #0]
 8002af6:	009b      	lsls	r3, r3, #2
 8002af8:	4413      	add	r3, r2
 8002afa:	881b      	ldrh	r3, [r3, #0]
 8002afc:	b29b      	uxth	r3, r3
 8002afe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b06:	b29c      	uxth	r4, r3
 8002b08:	687a      	ldr	r2, [r7, #4]
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	781b      	ldrb	r3, [r3, #0]
 8002b0e:	009b      	lsls	r3, r3, #2
 8002b10:	441a      	add	r2, r3
 8002b12:	4b35      	ldr	r3, [pc, #212]	; (8002be8 <USB_DeactivateEndpoint+0x320>)
 8002b14:	4323      	orrs	r3, r4
 8002b16:	b29b      	uxth	r3, r3
 8002b18:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002b1a:	687a      	ldr	r2, [r7, #4]
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	781b      	ldrb	r3, [r3, #0]
 8002b20:	009b      	lsls	r3, r3, #2
 8002b22:	4413      	add	r3, r2
 8002b24:	881b      	ldrh	r3, [r3, #0]
 8002b26:	b29c      	uxth	r4, r3
 8002b28:	4623      	mov	r3, r4
 8002b2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d014      	beq.n	8002b5c <USB_DeactivateEndpoint+0x294>
 8002b32:	687a      	ldr	r2, [r7, #4]
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	781b      	ldrb	r3, [r3, #0]
 8002b38:	009b      	lsls	r3, r3, #2
 8002b3a:	4413      	add	r3, r2
 8002b3c:	881b      	ldrh	r3, [r3, #0]
 8002b3e:	b29b      	uxth	r3, r3
 8002b40:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b48:	b29c      	uxth	r4, r3
 8002b4a:	687a      	ldr	r2, [r7, #4]
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	781b      	ldrb	r3, [r3, #0]
 8002b50:	009b      	lsls	r3, r3, #2
 8002b52:	441a      	add	r2, r3
 8002b54:	4b25      	ldr	r3, [pc, #148]	; (8002bec <USB_DeactivateEndpoint+0x324>)
 8002b56:	4323      	orrs	r3, r4
 8002b58:	b29b      	uxth	r3, r3
 8002b5a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8002b5c:	687a      	ldr	r2, [r7, #4]
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	781b      	ldrb	r3, [r3, #0]
 8002b62:	009b      	lsls	r3, r3, #2
 8002b64:	4413      	add	r3, r2
 8002b66:	881b      	ldrh	r3, [r3, #0]
 8002b68:	b29b      	uxth	r3, r3
 8002b6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b72:	b29c      	uxth	r4, r3
 8002b74:	687a      	ldr	r2, [r7, #4]
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	781b      	ldrb	r3, [r3, #0]
 8002b7a:	009b      	lsls	r3, r3, #2
 8002b7c:	441a      	add	r2, r3
 8002b7e:	4b1a      	ldr	r3, [pc, #104]	; (8002be8 <USB_DeactivateEndpoint+0x320>)
 8002b80:	4323      	orrs	r3, r4
 8002b82:	b29b      	uxth	r3, r3
 8002b84:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002b86:	687a      	ldr	r2, [r7, #4]
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	781b      	ldrb	r3, [r3, #0]
 8002b8c:	009b      	lsls	r3, r3, #2
 8002b8e:	4413      	add	r3, r2
 8002b90:	881b      	ldrh	r3, [r3, #0]
 8002b92:	b29b      	uxth	r3, r3
 8002b94:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b98:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002b9c:	b29c      	uxth	r4, r3
 8002b9e:	687a      	ldr	r2, [r7, #4]
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	781b      	ldrb	r3, [r3, #0]
 8002ba4:	009b      	lsls	r3, r3, #2
 8002ba6:	441a      	add	r2, r3
 8002ba8:	4b11      	ldr	r3, [pc, #68]	; (8002bf0 <USB_DeactivateEndpoint+0x328>)
 8002baa:	4323      	orrs	r3, r4
 8002bac:	b29b      	uxth	r3, r3
 8002bae:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002bb0:	687a      	ldr	r2, [r7, #4]
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	781b      	ldrb	r3, [r3, #0]
 8002bb6:	009b      	lsls	r3, r3, #2
 8002bb8:	4413      	add	r3, r2
 8002bba:	881b      	ldrh	r3, [r3, #0]
 8002bbc:	b29b      	uxth	r3, r3
 8002bbe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002bc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bc6:	b29c      	uxth	r4, r3
 8002bc8:	687a      	ldr	r2, [r7, #4]
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	781b      	ldrb	r3, [r3, #0]
 8002bce:	009b      	lsls	r3, r3, #2
 8002bd0:	441a      	add	r2, r3
 8002bd2:	4b07      	ldr	r3, [pc, #28]	; (8002bf0 <USB_DeactivateEndpoint+0x328>)
 8002bd4:	4323      	orrs	r3, r4
 8002bd6:	b29b      	uxth	r3, r3
 8002bd8:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8002bda:	2300      	movs	r3, #0
}
 8002bdc:	4618      	mov	r0, r3
 8002bde:	3708      	adds	r7, #8
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bc90      	pop	{r4, r7}
 8002be4:	4770      	bx	lr
 8002be6:	bf00      	nop
 8002be8:	ffffc080 	.word	0xffffc080
 8002bec:	ffff80c0 	.word	0xffff80c0
 8002bf0:	ffff8080 	.word	0xffff8080

08002bf4 <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8002bf4:	b590      	push	{r4, r7, lr}
 8002bf6:	b08d      	sub	sp, #52	; 0x34
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
 8002bfc:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint32_t len;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	785b      	ldrb	r3, [r3, #1]
 8002c02:	2b01      	cmp	r3, #1
 8002c04:	f040 8160 	bne.w	8002ec8 <USB_EPStartXfer+0x2d4>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	699a      	ldr	r2, [r3, #24]
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	691b      	ldr	r3, [r3, #16]
 8002c10:	429a      	cmp	r2, r3
 8002c12:	d909      	bls.n	8002c28 <USB_EPStartXfer+0x34>
    {
      len = ep->maxpacket;
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	691b      	ldr	r3, [r3, #16]
 8002c18:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	699a      	ldr	r2, [r3, #24]
 8002c1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c20:	1ad2      	subs	r2, r2, r3
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	619a      	str	r2, [r3, #24]
 8002c26:	e005      	b.n	8002c34 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	699b      	ldr	r3, [r3, #24]
 8002c2c:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	2200      	movs	r2, #0
 8002c32:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	7b1b      	ldrb	r3, [r3, #12]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d119      	bne.n	8002c70 <USB_EPStartXfer+0x7c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	6959      	ldr	r1, [r3, #20]
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	88da      	ldrh	r2, [r3, #6]
 8002c44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c46:	b29b      	uxth	r3, r3
 8002c48:	6878      	ldr	r0, [r7, #4]
 8002c4a:	f000 fba2 	bl	8003392 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8002c4e:	687c      	ldr	r4, [r7, #4]
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c56:	b29b      	uxth	r3, r3
 8002c58:	441c      	add	r4, r3
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	781b      	ldrb	r3, [r3, #0]
 8002c5e:	011b      	lsls	r3, r3, #4
 8002c60:	4423      	add	r3, r4
 8002c62:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002c66:	461c      	mov	r4, r3
 8002c68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c6a:	b29b      	uxth	r3, r3
 8002c6c:	8023      	strh	r3, [r4, #0]
 8002c6e:	e10f      	b.n	8002e90 <USB_EPStartXfer+0x29c>
    }
    else
    {
      /* Write the data to the USB endpoint */
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8002c70:	687a      	ldr	r2, [r7, #4]
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	781b      	ldrb	r3, [r3, #0]
 8002c76:	009b      	lsls	r3, r3, #2
 8002c78:	4413      	add	r3, r2
 8002c7a:	881b      	ldrh	r3, [r3, #0]
 8002c7c:	b29b      	uxth	r3, r3
 8002c7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d065      	beq.n	8002d52 <USB_EPStartXfer+0x15e>
      {
        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8002c86:	687c      	ldr	r4, [r7, #4]
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	785b      	ldrb	r3, [r3, #1]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d148      	bne.n	8002d22 <USB_EPStartXfer+0x12e>
 8002c90:	687c      	ldr	r4, [r7, #4]
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c98:	b29b      	uxth	r3, r3
 8002c9a:	441c      	add	r4, r3
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	781b      	ldrb	r3, [r3, #0]
 8002ca0:	011b      	lsls	r3, r3, #4
 8002ca2:	4423      	add	r3, r4
 8002ca4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002ca8:	461c      	mov	r4, r3
 8002caa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d10e      	bne.n	8002cce <USB_EPStartXfer+0xda>
 8002cb0:	8823      	ldrh	r3, [r4, #0]
 8002cb2:	b29b      	uxth	r3, r3
 8002cb4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002cb8:	b29b      	uxth	r3, r3
 8002cba:	8023      	strh	r3, [r4, #0]
 8002cbc:	8823      	ldrh	r3, [r4, #0]
 8002cbe:	b29b      	uxth	r3, r3
 8002cc0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002cc4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002cc8:	b29b      	uxth	r3, r3
 8002cca:	8023      	strh	r3, [r4, #0]
 8002ccc:	e03d      	b.n	8002d4a <USB_EPStartXfer+0x156>
 8002cce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cd0:	2b3e      	cmp	r3, #62	; 0x3e
 8002cd2:	d810      	bhi.n	8002cf6 <USB_EPStartXfer+0x102>
 8002cd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cd6:	085b      	lsrs	r3, r3, #1
 8002cd8:	627b      	str	r3, [r7, #36]	; 0x24
 8002cda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cdc:	f003 0301 	and.w	r3, r3, #1
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d002      	beq.n	8002cea <USB_EPStartXfer+0xf6>
 8002ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ce6:	3301      	adds	r3, #1
 8002ce8:	627b      	str	r3, [r7, #36]	; 0x24
 8002cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cec:	b29b      	uxth	r3, r3
 8002cee:	029b      	lsls	r3, r3, #10
 8002cf0:	b29b      	uxth	r3, r3
 8002cf2:	8023      	strh	r3, [r4, #0]
 8002cf4:	e029      	b.n	8002d4a <USB_EPStartXfer+0x156>
 8002cf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cf8:	095b      	lsrs	r3, r3, #5
 8002cfa:	627b      	str	r3, [r7, #36]	; 0x24
 8002cfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cfe:	f003 031f 	and.w	r3, r3, #31
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d102      	bne.n	8002d0c <USB_EPStartXfer+0x118>
 8002d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d08:	3b01      	subs	r3, #1
 8002d0a:	627b      	str	r3, [r7, #36]	; 0x24
 8002d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d0e:	b29b      	uxth	r3, r3
 8002d10:	029b      	lsls	r3, r3, #10
 8002d12:	b29b      	uxth	r3, r3
 8002d14:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002d18:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002d1c:	b29b      	uxth	r3, r3
 8002d1e:	8023      	strh	r3, [r4, #0]
 8002d20:	e013      	b.n	8002d4a <USB_EPStartXfer+0x156>
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	785b      	ldrb	r3, [r3, #1]
 8002d26:	2b01      	cmp	r3, #1
 8002d28:	d10f      	bne.n	8002d4a <USB_EPStartXfer+0x156>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d30:	b29b      	uxth	r3, r3
 8002d32:	441c      	add	r4, r3
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	781b      	ldrb	r3, [r3, #0]
 8002d38:	011b      	lsls	r3, r3, #4
 8002d3a:	4423      	add	r3, r4
 8002d3c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002d40:	60fb      	str	r3, [r7, #12]
 8002d42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d44:	b29a      	uxth	r2, r3
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr1;
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	895b      	ldrh	r3, [r3, #10]
 8002d4e:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8002d50:	e063      	b.n	8002e1a <USB_EPStartXfer+0x226>
      }
      else
      {
        /* Set the Double buffer counter for pmabuffer0 */
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	785b      	ldrb	r3, [r3, #1]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d148      	bne.n	8002dec <USB_EPStartXfer+0x1f8>
 8002d5a:	687c      	ldr	r4, [r7, #4]
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d62:	b29b      	uxth	r3, r3
 8002d64:	441c      	add	r4, r3
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	781b      	ldrb	r3, [r3, #0]
 8002d6a:	011b      	lsls	r3, r3, #4
 8002d6c:	4423      	add	r3, r4
 8002d6e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002d72:	461c      	mov	r4, r3
 8002d74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d10e      	bne.n	8002d98 <USB_EPStartXfer+0x1a4>
 8002d7a:	8823      	ldrh	r3, [r4, #0]
 8002d7c:	b29b      	uxth	r3, r3
 8002d7e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002d82:	b29b      	uxth	r3, r3
 8002d84:	8023      	strh	r3, [r4, #0]
 8002d86:	8823      	ldrh	r3, [r4, #0]
 8002d88:	b29b      	uxth	r3, r3
 8002d8a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002d8e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002d92:	b29b      	uxth	r3, r3
 8002d94:	8023      	strh	r3, [r4, #0]
 8002d96:	e03d      	b.n	8002e14 <USB_EPStartXfer+0x220>
 8002d98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d9a:	2b3e      	cmp	r3, #62	; 0x3e
 8002d9c:	d810      	bhi.n	8002dc0 <USB_EPStartXfer+0x1cc>
 8002d9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002da0:	085b      	lsrs	r3, r3, #1
 8002da2:	623b      	str	r3, [r7, #32]
 8002da4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002da6:	f003 0301 	and.w	r3, r3, #1
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d002      	beq.n	8002db4 <USB_EPStartXfer+0x1c0>
 8002dae:	6a3b      	ldr	r3, [r7, #32]
 8002db0:	3301      	adds	r3, #1
 8002db2:	623b      	str	r3, [r7, #32]
 8002db4:	6a3b      	ldr	r3, [r7, #32]
 8002db6:	b29b      	uxth	r3, r3
 8002db8:	029b      	lsls	r3, r3, #10
 8002dba:	b29b      	uxth	r3, r3
 8002dbc:	8023      	strh	r3, [r4, #0]
 8002dbe:	e029      	b.n	8002e14 <USB_EPStartXfer+0x220>
 8002dc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dc2:	095b      	lsrs	r3, r3, #5
 8002dc4:	623b      	str	r3, [r7, #32]
 8002dc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dc8:	f003 031f 	and.w	r3, r3, #31
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d102      	bne.n	8002dd6 <USB_EPStartXfer+0x1e2>
 8002dd0:	6a3b      	ldr	r3, [r7, #32]
 8002dd2:	3b01      	subs	r3, #1
 8002dd4:	623b      	str	r3, [r7, #32]
 8002dd6:	6a3b      	ldr	r3, [r7, #32]
 8002dd8:	b29b      	uxth	r3, r3
 8002dda:	029b      	lsls	r3, r3, #10
 8002ddc:	b29b      	uxth	r3, r3
 8002dde:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002de2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002de6:	b29b      	uxth	r3, r3
 8002de8:	8023      	strh	r3, [r4, #0]
 8002dea:	e013      	b.n	8002e14 <USB_EPStartXfer+0x220>
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	785b      	ldrb	r3, [r3, #1]
 8002df0:	2b01      	cmp	r3, #1
 8002df2:	d10f      	bne.n	8002e14 <USB_EPStartXfer+0x220>
 8002df4:	687c      	ldr	r4, [r7, #4]
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002dfc:	b29b      	uxth	r3, r3
 8002dfe:	441c      	add	r4, r3
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	781b      	ldrb	r3, [r3, #0]
 8002e04:	011b      	lsls	r3, r3, #4
 8002e06:	4423      	add	r3, r4
 8002e08:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002e0c:	461c      	mov	r4, r3
 8002e0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e10:	b29b      	uxth	r3, r3
 8002e12:	8023      	strh	r3, [r4, #0]
        pmabuffer = ep->pmaaddr0;
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	891b      	ldrh	r3, [r3, #8]
 8002e18:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	6959      	ldr	r1, [r3, #20]
 8002e1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e20:	b29b      	uxth	r3, r3
 8002e22:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8002e24:	6878      	ldr	r0, [r7, #4]
 8002e26:	f000 fab4 	bl	8003392 <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	785b      	ldrb	r3, [r3, #1]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d115      	bne.n	8002e5e <USB_EPStartXfer+0x26a>
 8002e32:	687a      	ldr	r2, [r7, #4]
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	781b      	ldrb	r3, [r3, #0]
 8002e38:	009b      	lsls	r3, r3, #2
 8002e3a:	4413      	add	r3, r2
 8002e3c:	881b      	ldrh	r3, [r3, #0]
 8002e3e:	b29b      	uxth	r3, r3
 8002e40:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e48:	b29c      	uxth	r4, r3
 8002e4a:	687a      	ldr	r2, [r7, #4]
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	781b      	ldrb	r3, [r3, #0]
 8002e50:	009b      	lsls	r3, r3, #2
 8002e52:	441a      	add	r2, r3
 8002e54:	4b9a      	ldr	r3, [pc, #616]	; (80030c0 <USB_EPStartXfer+0x4cc>)
 8002e56:	4323      	orrs	r3, r4
 8002e58:	b29b      	uxth	r3, r3
 8002e5a:	8013      	strh	r3, [r2, #0]
 8002e5c:	e018      	b.n	8002e90 <USB_EPStartXfer+0x29c>
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	785b      	ldrb	r3, [r3, #1]
 8002e62:	2b01      	cmp	r3, #1
 8002e64:	d114      	bne.n	8002e90 <USB_EPStartXfer+0x29c>
 8002e66:	687a      	ldr	r2, [r7, #4]
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	781b      	ldrb	r3, [r3, #0]
 8002e6c:	009b      	lsls	r3, r3, #2
 8002e6e:	4413      	add	r3, r2
 8002e70:	881b      	ldrh	r3, [r3, #0]
 8002e72:	b29b      	uxth	r3, r3
 8002e74:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e7c:	b29c      	uxth	r4, r3
 8002e7e:	687a      	ldr	r2, [r7, #4]
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	781b      	ldrb	r3, [r3, #0]
 8002e84:	009b      	lsls	r3, r3, #2
 8002e86:	441a      	add	r2, r3
 8002e88:	4b8e      	ldr	r3, [pc, #568]	; (80030c4 <USB_EPStartXfer+0x4d0>)
 8002e8a:	4323      	orrs	r3, r4
 8002e8c:	b29b      	uxth	r3, r3
 8002e8e:	8013      	strh	r3, [r2, #0]
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8002e90:	687a      	ldr	r2, [r7, #4]
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	781b      	ldrb	r3, [r3, #0]
 8002e96:	009b      	lsls	r3, r3, #2
 8002e98:	4413      	add	r3, r2
 8002e9a:	881b      	ldrh	r3, [r3, #0]
 8002e9c:	b29b      	uxth	r3, r3
 8002e9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ea2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002ea6:	b29c      	uxth	r4, r3
 8002ea8:	f084 0310 	eor.w	r3, r4, #16
 8002eac:	b29c      	uxth	r4, r3
 8002eae:	f084 0320 	eor.w	r3, r4, #32
 8002eb2:	b29c      	uxth	r4, r3
 8002eb4:	687a      	ldr	r2, [r7, #4]
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	781b      	ldrb	r3, [r3, #0]
 8002eba:	009b      	lsls	r3, r3, #2
 8002ebc:	441a      	add	r2, r3
 8002ebe:	4b82      	ldr	r3, [pc, #520]	; (80030c8 <USB_EPStartXfer+0x4d4>)
 8002ec0:	4323      	orrs	r3, r4
 8002ec2:	b29b      	uxth	r3, r3
 8002ec4:	8013      	strh	r3, [r2, #0]
 8002ec6:	e146      	b.n	8003156 <USB_EPStartXfer+0x562>
  }
  else /* OUT endpoint */
  {
    /* Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	699a      	ldr	r2, [r3, #24]
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	691b      	ldr	r3, [r3, #16]
 8002ed0:	429a      	cmp	r2, r3
 8002ed2:	d909      	bls.n	8002ee8 <USB_EPStartXfer+0x2f4>
    {
      len = ep->maxpacket;
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	691b      	ldr	r3, [r3, #16]
 8002ed8:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	699a      	ldr	r2, [r3, #24]
 8002ede:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ee0:	1ad2      	subs	r2, r2, r3
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	619a      	str	r2, [r3, #24]
 8002ee6:	e005      	b.n	8002ef4 <USB_EPStartXfer+0x300>
    }
    else
    {
      len = ep->xfer_len;
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	699b      	ldr	r3, [r3, #24]
 8002eec:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Rx endpoint */
    if (ep->doublebuffer == 0U)
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	7b1b      	ldrb	r3, [r3, #12]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d148      	bne.n	8002f8e <USB_EPStartXfer+0x39a>
    {
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8002efc:	687c      	ldr	r4, [r7, #4]
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f04:	b29b      	uxth	r3, r3
 8002f06:	441c      	add	r4, r3
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	781b      	ldrb	r3, [r3, #0]
 8002f0c:	011b      	lsls	r3, r3, #4
 8002f0e:	4423      	add	r3, r4
 8002f10:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002f14:	461c      	mov	r4, r3
 8002f16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d10e      	bne.n	8002f3a <USB_EPStartXfer+0x346>
 8002f1c:	8823      	ldrh	r3, [r4, #0]
 8002f1e:	b29b      	uxth	r3, r3
 8002f20:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002f24:	b29b      	uxth	r3, r3
 8002f26:	8023      	strh	r3, [r4, #0]
 8002f28:	8823      	ldrh	r3, [r4, #0]
 8002f2a:	b29b      	uxth	r3, r3
 8002f2c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002f30:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002f34:	b29b      	uxth	r3, r3
 8002f36:	8023      	strh	r3, [r4, #0]
 8002f38:	e0f2      	b.n	8003120 <USB_EPStartXfer+0x52c>
 8002f3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f3c:	2b3e      	cmp	r3, #62	; 0x3e
 8002f3e:	d810      	bhi.n	8002f62 <USB_EPStartXfer+0x36e>
 8002f40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f42:	085b      	lsrs	r3, r3, #1
 8002f44:	61fb      	str	r3, [r7, #28]
 8002f46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f48:	f003 0301 	and.w	r3, r3, #1
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d002      	beq.n	8002f56 <USB_EPStartXfer+0x362>
 8002f50:	69fb      	ldr	r3, [r7, #28]
 8002f52:	3301      	adds	r3, #1
 8002f54:	61fb      	str	r3, [r7, #28]
 8002f56:	69fb      	ldr	r3, [r7, #28]
 8002f58:	b29b      	uxth	r3, r3
 8002f5a:	029b      	lsls	r3, r3, #10
 8002f5c:	b29b      	uxth	r3, r3
 8002f5e:	8023      	strh	r3, [r4, #0]
 8002f60:	e0de      	b.n	8003120 <USB_EPStartXfer+0x52c>
 8002f62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f64:	095b      	lsrs	r3, r3, #5
 8002f66:	61fb      	str	r3, [r7, #28]
 8002f68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f6a:	f003 031f 	and.w	r3, r3, #31
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d102      	bne.n	8002f78 <USB_EPStartXfer+0x384>
 8002f72:	69fb      	ldr	r3, [r7, #28]
 8002f74:	3b01      	subs	r3, #1
 8002f76:	61fb      	str	r3, [r7, #28]
 8002f78:	69fb      	ldr	r3, [r7, #28]
 8002f7a:	b29b      	uxth	r3, r3
 8002f7c:	029b      	lsls	r3, r3, #10
 8002f7e:	b29b      	uxth	r3, r3
 8002f80:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002f84:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002f88:	b29b      	uxth	r3, r3
 8002f8a:	8023      	strh	r3, [r4, #0]
 8002f8c:	e0c8      	b.n	8003120 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /*Set the Double buffer counter*/
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	785b      	ldrb	r3, [r3, #1]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d148      	bne.n	8003028 <USB_EPStartXfer+0x434>
 8002f96:	687c      	ldr	r4, [r7, #4]
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f9e:	b29b      	uxth	r3, r3
 8002fa0:	441c      	add	r4, r3
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	781b      	ldrb	r3, [r3, #0]
 8002fa6:	011b      	lsls	r3, r3, #4
 8002fa8:	4423      	add	r3, r4
 8002faa:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002fae:	461c      	mov	r4, r3
 8002fb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d10e      	bne.n	8002fd4 <USB_EPStartXfer+0x3e0>
 8002fb6:	8823      	ldrh	r3, [r4, #0]
 8002fb8:	b29b      	uxth	r3, r3
 8002fba:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002fbe:	b29b      	uxth	r3, r3
 8002fc0:	8023      	strh	r3, [r4, #0]
 8002fc2:	8823      	ldrh	r3, [r4, #0]
 8002fc4:	b29b      	uxth	r3, r3
 8002fc6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002fca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002fce:	b29b      	uxth	r3, r3
 8002fd0:	8023      	strh	r3, [r4, #0]
 8002fd2:	e03d      	b.n	8003050 <USB_EPStartXfer+0x45c>
 8002fd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fd6:	2b3e      	cmp	r3, #62	; 0x3e
 8002fd8:	d810      	bhi.n	8002ffc <USB_EPStartXfer+0x408>
 8002fda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fdc:	085b      	lsrs	r3, r3, #1
 8002fde:	61bb      	str	r3, [r7, #24]
 8002fe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fe2:	f003 0301 	and.w	r3, r3, #1
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d002      	beq.n	8002ff0 <USB_EPStartXfer+0x3fc>
 8002fea:	69bb      	ldr	r3, [r7, #24]
 8002fec:	3301      	adds	r3, #1
 8002fee:	61bb      	str	r3, [r7, #24]
 8002ff0:	69bb      	ldr	r3, [r7, #24]
 8002ff2:	b29b      	uxth	r3, r3
 8002ff4:	029b      	lsls	r3, r3, #10
 8002ff6:	b29b      	uxth	r3, r3
 8002ff8:	8023      	strh	r3, [r4, #0]
 8002ffa:	e029      	b.n	8003050 <USB_EPStartXfer+0x45c>
 8002ffc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ffe:	095b      	lsrs	r3, r3, #5
 8003000:	61bb      	str	r3, [r7, #24]
 8003002:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003004:	f003 031f 	and.w	r3, r3, #31
 8003008:	2b00      	cmp	r3, #0
 800300a:	d102      	bne.n	8003012 <USB_EPStartXfer+0x41e>
 800300c:	69bb      	ldr	r3, [r7, #24]
 800300e:	3b01      	subs	r3, #1
 8003010:	61bb      	str	r3, [r7, #24]
 8003012:	69bb      	ldr	r3, [r7, #24]
 8003014:	b29b      	uxth	r3, r3
 8003016:	029b      	lsls	r3, r3, #10
 8003018:	b29b      	uxth	r3, r3
 800301a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800301e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003022:	b29b      	uxth	r3, r3
 8003024:	8023      	strh	r3, [r4, #0]
 8003026:	e013      	b.n	8003050 <USB_EPStartXfer+0x45c>
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	785b      	ldrb	r3, [r3, #1]
 800302c:	2b01      	cmp	r3, #1
 800302e:	d10f      	bne.n	8003050 <USB_EPStartXfer+0x45c>
 8003030:	687c      	ldr	r4, [r7, #4]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003038:	b29b      	uxth	r3, r3
 800303a:	441c      	add	r4, r3
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	781b      	ldrb	r3, [r3, #0]
 8003040:	011b      	lsls	r3, r3, #4
 8003042:	4423      	add	r3, r4
 8003044:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003048:	461c      	mov	r4, r3
 800304a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800304c:	b29b      	uxth	r3, r3
 800304e:	8023      	strh	r3, [r4, #0]
 8003050:	687c      	ldr	r4, [r7, #4]
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	785b      	ldrb	r3, [r3, #1]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d14e      	bne.n	80030f8 <USB_EPStartXfer+0x504>
 800305a:	687c      	ldr	r4, [r7, #4]
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003062:	b29b      	uxth	r3, r3
 8003064:	441c      	add	r4, r3
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	781b      	ldrb	r3, [r3, #0]
 800306a:	011b      	lsls	r3, r3, #4
 800306c:	4423      	add	r3, r4
 800306e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003072:	461c      	mov	r4, r3
 8003074:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003076:	2b00      	cmp	r3, #0
 8003078:	d10e      	bne.n	8003098 <USB_EPStartXfer+0x4a4>
 800307a:	8823      	ldrh	r3, [r4, #0]
 800307c:	b29b      	uxth	r3, r3
 800307e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003082:	b29b      	uxth	r3, r3
 8003084:	8023      	strh	r3, [r4, #0]
 8003086:	8823      	ldrh	r3, [r4, #0]
 8003088:	b29b      	uxth	r3, r3
 800308a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800308e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003092:	b29b      	uxth	r3, r3
 8003094:	8023      	strh	r3, [r4, #0]
 8003096:	e043      	b.n	8003120 <USB_EPStartXfer+0x52c>
 8003098:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800309a:	2b3e      	cmp	r3, #62	; 0x3e
 800309c:	d816      	bhi.n	80030cc <USB_EPStartXfer+0x4d8>
 800309e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030a0:	085b      	lsrs	r3, r3, #1
 80030a2:	617b      	str	r3, [r7, #20]
 80030a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030a6:	f003 0301 	and.w	r3, r3, #1
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d002      	beq.n	80030b4 <USB_EPStartXfer+0x4c0>
 80030ae:	697b      	ldr	r3, [r7, #20]
 80030b0:	3301      	adds	r3, #1
 80030b2:	617b      	str	r3, [r7, #20]
 80030b4:	697b      	ldr	r3, [r7, #20]
 80030b6:	b29b      	uxth	r3, r3
 80030b8:	029b      	lsls	r3, r3, #10
 80030ba:	b29b      	uxth	r3, r3
 80030bc:	8023      	strh	r3, [r4, #0]
 80030be:	e02f      	b.n	8003120 <USB_EPStartXfer+0x52c>
 80030c0:	ffff80c0 	.word	0xffff80c0
 80030c4:	ffffc080 	.word	0xffffc080
 80030c8:	ffff8080 	.word	0xffff8080
 80030cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030ce:	095b      	lsrs	r3, r3, #5
 80030d0:	617b      	str	r3, [r7, #20]
 80030d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030d4:	f003 031f 	and.w	r3, r3, #31
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d102      	bne.n	80030e2 <USB_EPStartXfer+0x4ee>
 80030dc:	697b      	ldr	r3, [r7, #20]
 80030de:	3b01      	subs	r3, #1
 80030e0:	617b      	str	r3, [r7, #20]
 80030e2:	697b      	ldr	r3, [r7, #20]
 80030e4:	b29b      	uxth	r3, r3
 80030e6:	029b      	lsls	r3, r3, #10
 80030e8:	b29b      	uxth	r3, r3
 80030ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80030ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80030f2:	b29b      	uxth	r3, r3
 80030f4:	8023      	strh	r3, [r4, #0]
 80030f6:	e013      	b.n	8003120 <USB_EPStartXfer+0x52c>
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	785b      	ldrb	r3, [r3, #1]
 80030fc:	2b01      	cmp	r3, #1
 80030fe:	d10f      	bne.n	8003120 <USB_EPStartXfer+0x52c>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003106:	b29b      	uxth	r3, r3
 8003108:	441c      	add	r4, r3
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	781b      	ldrb	r3, [r3, #0]
 800310e:	011b      	lsls	r3, r3, #4
 8003110:	4423      	add	r3, r4
 8003112:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003116:	613b      	str	r3, [r7, #16]
 8003118:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800311a:	b29a      	uxth	r2, r3
 800311c:	693b      	ldr	r3, [r7, #16]
 800311e:	801a      	strh	r2, [r3, #0]
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003120:	687a      	ldr	r2, [r7, #4]
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	781b      	ldrb	r3, [r3, #0]
 8003126:	009b      	lsls	r3, r3, #2
 8003128:	4413      	add	r3, r2
 800312a:	881b      	ldrh	r3, [r3, #0]
 800312c:	b29b      	uxth	r3, r3
 800312e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003132:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003136:	b29c      	uxth	r4, r3
 8003138:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 800313c:	b29c      	uxth	r4, r3
 800313e:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8003142:	b29c      	uxth	r4, r3
 8003144:	687a      	ldr	r2, [r7, #4]
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	781b      	ldrb	r3, [r3, #0]
 800314a:	009b      	lsls	r3, r3, #2
 800314c:	441a      	add	r2, r3
 800314e:	4b04      	ldr	r3, [pc, #16]	; (8003160 <USB_EPStartXfer+0x56c>)
 8003150:	4323      	orrs	r3, r4
 8003152:	b29b      	uxth	r3, r3
 8003154:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8003156:	2300      	movs	r3, #0
}
 8003158:	4618      	mov	r0, r3
 800315a:	3734      	adds	r7, #52	; 0x34
 800315c:	46bd      	mov	sp, r7
 800315e:	bd90      	pop	{r4, r7, pc}
 8003160:	ffff8080 	.word	0xffff8080

08003164 <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003164:	b490      	push	{r4, r7}
 8003166:	b082      	sub	sp, #8
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
 800316c:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	785b      	ldrb	r3, [r3, #1]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d018      	beq.n	80031a8 <USB_EPSetStall+0x44>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8003176:	687a      	ldr	r2, [r7, #4]
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	781b      	ldrb	r3, [r3, #0]
 800317c:	009b      	lsls	r3, r3, #2
 800317e:	4413      	add	r3, r2
 8003180:	881b      	ldrh	r3, [r3, #0]
 8003182:	b29b      	uxth	r3, r3
 8003184:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003188:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800318c:	b29c      	uxth	r4, r3
 800318e:	f084 0310 	eor.w	r3, r4, #16
 8003192:	b29c      	uxth	r4, r3
 8003194:	687a      	ldr	r2, [r7, #4]
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	781b      	ldrb	r3, [r3, #0]
 800319a:	009b      	lsls	r3, r3, #2
 800319c:	441a      	add	r2, r3
 800319e:	4b11      	ldr	r3, [pc, #68]	; (80031e4 <USB_EPSetStall+0x80>)
 80031a0:	4323      	orrs	r3, r4
 80031a2:	b29b      	uxth	r3, r3
 80031a4:	8013      	strh	r3, [r2, #0]
 80031a6:	e017      	b.n	80031d8 <USB_EPSetStall+0x74>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80031a8:	687a      	ldr	r2, [r7, #4]
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	781b      	ldrb	r3, [r3, #0]
 80031ae:	009b      	lsls	r3, r3, #2
 80031b0:	4413      	add	r3, r2
 80031b2:	881b      	ldrh	r3, [r3, #0]
 80031b4:	b29b      	uxth	r3, r3
 80031b6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80031ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031be:	b29c      	uxth	r4, r3
 80031c0:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 80031c4:	b29c      	uxth	r4, r3
 80031c6:	687a      	ldr	r2, [r7, #4]
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	781b      	ldrb	r3, [r3, #0]
 80031cc:	009b      	lsls	r3, r3, #2
 80031ce:	441a      	add	r2, r3
 80031d0:	4b04      	ldr	r3, [pc, #16]	; (80031e4 <USB_EPSetStall+0x80>)
 80031d2:	4323      	orrs	r3, r4
 80031d4:	b29b      	uxth	r3, r3
 80031d6:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80031d8:	2300      	movs	r3, #0
}
 80031da:	4618      	mov	r0, r3
 80031dc:	3708      	adds	r7, #8
 80031de:	46bd      	mov	sp, r7
 80031e0:	bc90      	pop	{r4, r7}
 80031e2:	4770      	bx	lr
 80031e4:	ffff8080 	.word	0xffff8080

080031e8 <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80031e8:	b490      	push	{r4, r7}
 80031ea:	b082      	sub	sp, #8
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
 80031f0:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	7b1b      	ldrb	r3, [r3, #12]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d17d      	bne.n	80032f6 <USB_EPClearStall+0x10e>
  {
    if (ep->is_in != 0U)
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	785b      	ldrb	r3, [r3, #1]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d03d      	beq.n	800327e <USB_EPClearStall+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003202:	687a      	ldr	r2, [r7, #4]
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	781b      	ldrb	r3, [r3, #0]
 8003208:	009b      	lsls	r3, r3, #2
 800320a:	4413      	add	r3, r2
 800320c:	881b      	ldrh	r3, [r3, #0]
 800320e:	b29c      	uxth	r4, r3
 8003210:	4623      	mov	r3, r4
 8003212:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003216:	2b00      	cmp	r3, #0
 8003218:	d014      	beq.n	8003244 <USB_EPClearStall+0x5c>
 800321a:	687a      	ldr	r2, [r7, #4]
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	781b      	ldrb	r3, [r3, #0]
 8003220:	009b      	lsls	r3, r3, #2
 8003222:	4413      	add	r3, r2
 8003224:	881b      	ldrh	r3, [r3, #0]
 8003226:	b29b      	uxth	r3, r3
 8003228:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800322c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003230:	b29c      	uxth	r4, r3
 8003232:	687a      	ldr	r2, [r7, #4]
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	781b      	ldrb	r3, [r3, #0]
 8003238:	009b      	lsls	r3, r3, #2
 800323a:	441a      	add	r2, r3
 800323c:	4b31      	ldr	r3, [pc, #196]	; (8003304 <USB_EPClearStall+0x11c>)
 800323e:	4323      	orrs	r3, r4
 8003240:	b29b      	uxth	r3, r3
 8003242:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	78db      	ldrb	r3, [r3, #3]
 8003248:	2b01      	cmp	r3, #1
 800324a:	d054      	beq.n	80032f6 <USB_EPClearStall+0x10e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800324c:	687a      	ldr	r2, [r7, #4]
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	781b      	ldrb	r3, [r3, #0]
 8003252:	009b      	lsls	r3, r3, #2
 8003254:	4413      	add	r3, r2
 8003256:	881b      	ldrh	r3, [r3, #0]
 8003258:	b29b      	uxth	r3, r3
 800325a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800325e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003262:	b29c      	uxth	r4, r3
 8003264:	f084 0320 	eor.w	r3, r4, #32
 8003268:	b29c      	uxth	r4, r3
 800326a:	687a      	ldr	r2, [r7, #4]
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	781b      	ldrb	r3, [r3, #0]
 8003270:	009b      	lsls	r3, r3, #2
 8003272:	441a      	add	r2, r3
 8003274:	4b24      	ldr	r3, [pc, #144]	; (8003308 <USB_EPClearStall+0x120>)
 8003276:	4323      	orrs	r3, r4
 8003278:	b29b      	uxth	r3, r3
 800327a:	8013      	strh	r3, [r2, #0]
 800327c:	e03b      	b.n	80032f6 <USB_EPClearStall+0x10e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800327e:	687a      	ldr	r2, [r7, #4]
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	781b      	ldrb	r3, [r3, #0]
 8003284:	009b      	lsls	r3, r3, #2
 8003286:	4413      	add	r3, r2
 8003288:	881b      	ldrh	r3, [r3, #0]
 800328a:	b29c      	uxth	r4, r3
 800328c:	4623      	mov	r3, r4
 800328e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003292:	2b00      	cmp	r3, #0
 8003294:	d014      	beq.n	80032c0 <USB_EPClearStall+0xd8>
 8003296:	687a      	ldr	r2, [r7, #4]
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	781b      	ldrb	r3, [r3, #0]
 800329c:	009b      	lsls	r3, r3, #2
 800329e:	4413      	add	r3, r2
 80032a0:	881b      	ldrh	r3, [r3, #0]
 80032a2:	b29b      	uxth	r3, r3
 80032a4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80032a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032ac:	b29c      	uxth	r4, r3
 80032ae:	687a      	ldr	r2, [r7, #4]
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	781b      	ldrb	r3, [r3, #0]
 80032b4:	009b      	lsls	r3, r3, #2
 80032b6:	441a      	add	r2, r3
 80032b8:	4b14      	ldr	r3, [pc, #80]	; (800330c <USB_EPClearStall+0x124>)
 80032ba:	4323      	orrs	r3, r4
 80032bc:	b29b      	uxth	r3, r3
 80032be:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80032c0:	687a      	ldr	r2, [r7, #4]
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	781b      	ldrb	r3, [r3, #0]
 80032c6:	009b      	lsls	r3, r3, #2
 80032c8:	4413      	add	r3, r2
 80032ca:	881b      	ldrh	r3, [r3, #0]
 80032cc:	b29b      	uxth	r3, r3
 80032ce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80032d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032d6:	b29c      	uxth	r4, r3
 80032d8:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 80032dc:	b29c      	uxth	r4, r3
 80032de:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 80032e2:	b29c      	uxth	r4, r3
 80032e4:	687a      	ldr	r2, [r7, #4]
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	781b      	ldrb	r3, [r3, #0]
 80032ea:	009b      	lsls	r3, r3, #2
 80032ec:	441a      	add	r2, r3
 80032ee:	4b06      	ldr	r3, [pc, #24]	; (8003308 <USB_EPClearStall+0x120>)
 80032f0:	4323      	orrs	r3, r4
 80032f2:	b29b      	uxth	r3, r3
 80032f4:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80032f6:	2300      	movs	r3, #0
}
 80032f8:	4618      	mov	r0, r3
 80032fa:	3708      	adds	r7, #8
 80032fc:	46bd      	mov	sp, r7
 80032fe:	bc90      	pop	{r4, r7}
 8003300:	4770      	bx	lr
 8003302:	bf00      	nop
 8003304:	ffff80c0 	.word	0xffff80c0
 8003308:	ffff8080 	.word	0xffff8080
 800330c:	ffffc080 	.word	0xffffc080

08003310 <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8003310:	b480      	push	{r7}
 8003312:	b083      	sub	sp, #12
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
 8003318:	460b      	mov	r3, r1
 800331a:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800331c:	78fb      	ldrb	r3, [r7, #3]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d103      	bne.n	800332a <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2280      	movs	r2, #128	; 0x80
 8003326:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800332a:	2300      	movs	r3, #0
}
 800332c:	4618      	mov	r0, r3
 800332e:	370c      	adds	r7, #12
 8003330:	46bd      	mov	sp, r7
 8003332:	bc80      	pop	{r7}
 8003334:	4770      	bx	lr

08003336 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8003336:	b480      	push	{r7}
 8003338:	b083      	sub	sp, #12
 800333a:	af00      	add	r7, sp, #0
 800333c:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800333e:	2300      	movs	r3, #0
}
 8003340:	4618      	mov	r0, r3
 8003342:	370c      	adds	r7, #12
 8003344:	46bd      	mov	sp, r7
 8003346:	bc80      	pop	{r7}
 8003348:	4770      	bx	lr

0800334a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800334a:	b480      	push	{r7}
 800334c:	b083      	sub	sp, #12
 800334e:	af00      	add	r7, sp, #0
 8003350:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8003352:	2300      	movs	r3, #0
}
 8003354:	4618      	mov	r0, r3
 8003356:	370c      	adds	r7, #12
 8003358:	46bd      	mov	sp, r7
 800335a:	bc80      	pop	{r7}
 800335c:	4770      	bx	lr

0800335e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800335e:	b480      	push	{r7}
 8003360:	b085      	sub	sp, #20
 8003362:	af00      	add	r7, sp, #0
 8003364:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800336c:	b29b      	uxth	r3, r3
 800336e:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8003370:	68fb      	ldr	r3, [r7, #12]
}
 8003372:	4618      	mov	r0, r3
 8003374:	3714      	adds	r7, #20
 8003376:	46bd      	mov	sp, r7
 8003378:	bc80      	pop	{r7}
 800337a:	4770      	bx	lr

0800337c <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800337c:	b480      	push	{r7}
 800337e:	b083      	sub	sp, #12
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
 8003384:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8003386:	2300      	movs	r3, #0
}
 8003388:	4618      	mov	r0, r3
 800338a:	370c      	adds	r7, #12
 800338c:	46bd      	mov	sp, r7
 800338e:	bc80      	pop	{r7}
 8003390:	4770      	bx	lr

08003392 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8003392:	b480      	push	{r7}
 8003394:	b08d      	sub	sp, #52	; 0x34
 8003396:	af00      	add	r7, sp, #0
 8003398:	60f8      	str	r0, [r7, #12]
 800339a:	60b9      	str	r1, [r7, #8]
 800339c:	4611      	mov	r1, r2
 800339e:	461a      	mov	r2, r3
 80033a0:	460b      	mov	r3, r1
 80033a2:	80fb      	strh	r3, [r7, #6]
 80033a4:	4613      	mov	r3, r2
 80033a6:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80033a8:	88bb      	ldrh	r3, [r7, #4]
 80033aa:	3301      	adds	r3, #1
 80033ac:	085b      	lsrs	r3, r3, #1
 80033ae:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80033b4:	68bb      	ldr	r3, [r7, #8]
 80033b6:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80033b8:	88fb      	ldrh	r3, [r7, #6]
 80033ba:	005a      	lsls	r2, r3, #1
 80033bc:	69fb      	ldr	r3, [r7, #28]
 80033be:	4413      	add	r3, r2
 80033c0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80033c4:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 80033c6:	6a3b      	ldr	r3, [r7, #32]
 80033c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80033ca:	e01e      	b.n	800340a <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 80033cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ce:	781b      	ldrb	r3, [r3, #0]
 80033d0:	61bb      	str	r3, [r7, #24]
    pBuf++;
 80033d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033d4:	3301      	adds	r3, #1
 80033d6:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 80033d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033da:	781b      	ldrb	r3, [r3, #0]
 80033dc:	b29b      	uxth	r3, r3
 80033de:	021b      	lsls	r3, r3, #8
 80033e0:	b29b      	uxth	r3, r3
 80033e2:	461a      	mov	r2, r3
 80033e4:	69bb      	ldr	r3, [r7, #24]
 80033e6:	4313      	orrs	r3, r2
 80033e8:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 80033ea:	697b      	ldr	r3, [r7, #20]
 80033ec:	b29a      	uxth	r2, r3
 80033ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033f0:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80033f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033f4:	3302      	adds	r3, #2
 80033f6:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 80033f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033fa:	3302      	adds	r3, #2
 80033fc:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 80033fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003400:	3301      	adds	r3, #1
 8003402:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8003404:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003406:	3b01      	subs	r3, #1
 8003408:	62fb      	str	r3, [r7, #44]	; 0x2c
 800340a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800340c:	2b00      	cmp	r3, #0
 800340e:	d1dd      	bne.n	80033cc <USB_WritePMA+0x3a>
  }
}
 8003410:	bf00      	nop
 8003412:	3734      	adds	r7, #52	; 0x34
 8003414:	46bd      	mov	sp, r7
 8003416:	bc80      	pop	{r7}
 8003418:	4770      	bx	lr

0800341a <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800341a:	b480      	push	{r7}
 800341c:	b08b      	sub	sp, #44	; 0x2c
 800341e:	af00      	add	r7, sp, #0
 8003420:	60f8      	str	r0, [r7, #12]
 8003422:	60b9      	str	r1, [r7, #8]
 8003424:	4611      	mov	r1, r2
 8003426:	461a      	mov	r2, r3
 8003428:	460b      	mov	r3, r1
 800342a:	80fb      	strh	r3, [r7, #6]
 800342c:	4613      	mov	r3, r2
 800342e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8003430:	88bb      	ldrh	r3, [r7, #4]
 8003432:	085b      	lsrs	r3, r3, #1
 8003434:	b29b      	uxth	r3, r3
 8003436:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800343c:	68bb      	ldr	r3, [r7, #8]
 800343e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8003440:	88fb      	ldrh	r3, [r7, #6]
 8003442:	005a      	lsls	r2, r3, #1
 8003444:	697b      	ldr	r3, [r7, #20]
 8003446:	4413      	add	r3, r2
 8003448:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800344c:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800344e:	69bb      	ldr	r3, [r7, #24]
 8003450:	627b      	str	r3, [r7, #36]	; 0x24
 8003452:	e01b      	b.n	800348c <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8003454:	6a3b      	ldr	r3, [r7, #32]
 8003456:	881b      	ldrh	r3, [r3, #0]
 8003458:	b29b      	uxth	r3, r3
 800345a:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800345c:	6a3b      	ldr	r3, [r7, #32]
 800345e:	3302      	adds	r3, #2
 8003460:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8003462:	693b      	ldr	r3, [r7, #16]
 8003464:	b2da      	uxtb	r2, r3
 8003466:	69fb      	ldr	r3, [r7, #28]
 8003468:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800346a:	69fb      	ldr	r3, [r7, #28]
 800346c:	3301      	adds	r3, #1
 800346e:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8003470:	693b      	ldr	r3, [r7, #16]
 8003472:	0a1b      	lsrs	r3, r3, #8
 8003474:	b2da      	uxtb	r2, r3
 8003476:	69fb      	ldr	r3, [r7, #28]
 8003478:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800347a:	69fb      	ldr	r3, [r7, #28]
 800347c:	3301      	adds	r3, #1
 800347e:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8003480:	6a3b      	ldr	r3, [r7, #32]
 8003482:	3302      	adds	r3, #2
 8003484:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8003486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003488:	3b01      	subs	r3, #1
 800348a:	627b      	str	r3, [r7, #36]	; 0x24
 800348c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800348e:	2b00      	cmp	r3, #0
 8003490:	d1e0      	bne.n	8003454 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8003492:	88bb      	ldrh	r3, [r7, #4]
 8003494:	f003 0301 	and.w	r3, r3, #1
 8003498:	b29b      	uxth	r3, r3
 800349a:	2b00      	cmp	r3, #0
 800349c:	d007      	beq.n	80034ae <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 800349e:	6a3b      	ldr	r3, [r7, #32]
 80034a0:	881b      	ldrh	r3, [r3, #0]
 80034a2:	b29b      	uxth	r3, r3
 80034a4:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80034a6:	693b      	ldr	r3, [r7, #16]
 80034a8:	b2da      	uxtb	r2, r3
 80034aa:	69fb      	ldr	r3, [r7, #28]
 80034ac:	701a      	strb	r2, [r3, #0]
  }
}
 80034ae:	bf00      	nop
 80034b0:	372c      	adds	r7, #44	; 0x2c
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bc80      	pop	{r7}
 80034b6:	4770      	bx	lr

080034b8 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b082      	sub	sp, #8
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
 80034c0:	460b      	mov	r3, r1
 80034c2:	70fb      	strb	r3, [r7, #3]
  /* Open EP IN */
  USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 80034c4:	2304      	movs	r3, #4
 80034c6:	2203      	movs	r2, #3
 80034c8:	2181      	movs	r1, #129	; 0x81
 80034ca:	6878      	ldr	r0, [r7, #4]
 80034cc:	f001 fc4d 	bl	8004d6a <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2201      	movs	r2, #1
 80034d4:	62da      	str	r2, [r3, #44]	; 0x2c

  pdev->pClassData = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 80034d6:	2010      	movs	r0, #16
 80034d8:	f001 fd54 	bl	8004f84 <USBD_static_malloc>
 80034dc:	4602      	mov	r2, r0
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d101      	bne.n	80034f2 <USBD_HID_Init+0x3a>
  {
    return USBD_FAIL;
 80034ee:	2302      	movs	r3, #2
 80034f0:	e005      	b.n	80034fe <USBD_HID_Init+0x46>
  }

  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80034f8:	2200      	movs	r2, #0
 80034fa:	731a      	strb	r2, [r3, #12]

  return USBD_OK;
 80034fc:	2300      	movs	r3, #0
}
 80034fe:	4618      	mov	r0, r3
 8003500:	3708      	adds	r7, #8
 8003502:	46bd      	mov	sp, r7
 8003504:	bd80      	pop	{r7, pc}

08003506 <USBD_HID_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_DeInit(USBD_HandleTypeDef *pdev,
                                uint8_t cfgidx)
{
 8003506:	b580      	push	{r7, lr}
 8003508:	b082      	sub	sp, #8
 800350a:	af00      	add	r7, sp, #0
 800350c:	6078      	str	r0, [r7, #4]
 800350e:	460b      	mov	r3, r1
 8003510:	70fb      	strb	r3, [r7, #3]
  /* Close HID EPs */
  USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 8003512:	2181      	movs	r1, #129	; 0x81
 8003514:	6878      	ldr	r0, [r7, #4]
 8003516:	f001 fc4e 	bl	8004db6 <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2200      	movs	r2, #0
 800351e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* FRee allocated memory */
  if (pdev->pClassData != NULL)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8003526:	2b00      	cmp	r3, #0
 8003528:	d009      	beq.n	800353e <USBD_HID_DeInit+0x38>
  {
    USBD_free(pdev->pClassData);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8003530:	4618      	mov	r0, r3
 8003532:	f001 fd33 	bl	8004f9c <USBD_static_free>
    pdev->pClassData = NULL;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2200      	movs	r2, #0
 800353a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return USBD_OK;
 800353e:	2300      	movs	r3, #0
}
 8003540:	4618      	mov	r0, r3
 8003542:	3708      	adds	r7, #8
 8003544:	46bd      	mov	sp, r7
 8003546:	bd80      	pop	{r7, pc}

08003548 <USBD_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_HID_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b088      	sub	sp, #32
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
 8003550:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *) pdev->pClassData;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8003558:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 800355a:	2300      	movs	r3, #0
 800355c:	83fb      	strh	r3, [r7, #30]
  uint8_t *pbuf = NULL;
 800355e:	2300      	movs	r3, #0
 8003560:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 8003562:	2300      	movs	r3, #0
 8003564:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 8003566:	2300      	movs	r3, #0
 8003568:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	781b      	ldrb	r3, [r3, #0]
 800356e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8003572:	2b00      	cmp	r3, #0
 8003574:	d045      	beq.n	8003602 <USBD_HID_Setup+0xba>
 8003576:	2b20      	cmp	r3, #32
 8003578:	f040 80d3 	bne.w	8003722 <USBD_HID_Setup+0x1da>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	785b      	ldrb	r3, [r3, #1]
 8003580:	3b02      	subs	r3, #2
 8003582:	2b09      	cmp	r3, #9
 8003584:	d835      	bhi.n	80035f2 <USBD_HID_Setup+0xaa>
 8003586:	a201      	add	r2, pc, #4	; (adr r2, 800358c <USBD_HID_Setup+0x44>)
 8003588:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800358c:	080035e3 	.word	0x080035e3
 8003590:	080035c3 	.word	0x080035c3
 8003594:	080035f3 	.word	0x080035f3
 8003598:	080035f3 	.word	0x080035f3
 800359c:	080035f3 	.word	0x080035f3
 80035a0:	080035f3 	.word	0x080035f3
 80035a4:	080035f3 	.word	0x080035f3
 80035a8:	080035f3 	.word	0x080035f3
 80035ac:	080035d1 	.word	0x080035d1
 80035b0:	080035b5 	.word	0x080035b5
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	885b      	ldrh	r3, [r3, #2]
 80035b8:	b2db      	uxtb	r3, r3
 80035ba:	461a      	mov	r2, r3
 80035bc:	693b      	ldr	r3, [r7, #16]
 80035be:	601a      	str	r2, [r3, #0]
          break;
 80035c0:	e01e      	b.n	8003600 <USBD_HID_Setup+0xb8>

        case HID_REQ_GET_PROTOCOL:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 80035c2:	693b      	ldr	r3, [r7, #16]
 80035c4:	2201      	movs	r2, #1
 80035c6:	4619      	mov	r1, r3
 80035c8:	6878      	ldr	r0, [r7, #4]
 80035ca:	f001 f915 	bl	80047f8 <USBD_CtlSendData>
          break;
 80035ce:	e017      	b.n	8003600 <USBD_HID_Setup+0xb8>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	885b      	ldrh	r3, [r3, #2]
 80035d4:	0a1b      	lsrs	r3, r3, #8
 80035d6:	b29b      	uxth	r3, r3
 80035d8:	b2db      	uxtb	r3, r3
 80035da:	461a      	mov	r2, r3
 80035dc:	693b      	ldr	r3, [r7, #16]
 80035de:	605a      	str	r2, [r3, #4]
          break;
 80035e0:	e00e      	b.n	8003600 <USBD_HID_Setup+0xb8>

        case HID_REQ_GET_IDLE:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 80035e2:	693b      	ldr	r3, [r7, #16]
 80035e4:	3304      	adds	r3, #4
 80035e6:	2201      	movs	r2, #1
 80035e8:	4619      	mov	r1, r3
 80035ea:	6878      	ldr	r0, [r7, #4]
 80035ec:	f001 f904 	bl	80047f8 <USBD_CtlSendData>
          break;
 80035f0:	e006      	b.n	8003600 <USBD_HID_Setup+0xb8>

        default:
          USBD_CtlError(pdev, req);
 80035f2:	6839      	ldr	r1, [r7, #0]
 80035f4:	6878      	ldr	r0, [r7, #4]
 80035f6:	f001 f895 	bl	8004724 <USBD_CtlError>
          ret = USBD_FAIL;
 80035fa:	2302      	movs	r3, #2
 80035fc:	75fb      	strb	r3, [r7, #23]
          break;
 80035fe:	bf00      	nop
      }
      break;
 8003600:	e096      	b.n	8003730 <USBD_HID_Setup+0x1e8>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	785b      	ldrb	r3, [r3, #1]
 8003606:	2b0b      	cmp	r3, #11
 8003608:	f200 8083 	bhi.w	8003712 <USBD_HID_Setup+0x1ca>
 800360c:	a201      	add	r2, pc, #4	; (adr r2, 8003614 <USBD_HID_Setup+0xcc>)
 800360e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003612:	bf00      	nop
 8003614:	08003645 	.word	0x08003645
 8003618:	08003713 	.word	0x08003713
 800361c:	08003713 	.word	0x08003713
 8003620:	08003713 	.word	0x08003713
 8003624:	08003713 	.word	0x08003713
 8003628:	08003713 	.word	0x08003713
 800362c:	0800366d 	.word	0x0800366d
 8003630:	08003713 	.word	0x08003713
 8003634:	08003713 	.word	0x08003713
 8003638:	08003713 	.word	0x08003713
 800363c:	080036c5 	.word	0x080036c5
 8003640:	080036ed 	.word	0x080036ed
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800364a:	2b03      	cmp	r3, #3
 800364c:	d107      	bne.n	800365e <USBD_HID_Setup+0x116>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800364e:	f107 030e 	add.w	r3, r7, #14
 8003652:	2202      	movs	r2, #2
 8003654:	4619      	mov	r1, r3
 8003656:	6878      	ldr	r0, [r7, #4]
 8003658:	f001 f8ce 	bl	80047f8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800365c:	e060      	b.n	8003720 <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 800365e:	6839      	ldr	r1, [r7, #0]
 8003660:	6878      	ldr	r0, [r7, #4]
 8003662:	f001 f85f 	bl	8004724 <USBD_CtlError>
            ret = USBD_FAIL;
 8003666:	2302      	movs	r3, #2
 8003668:	75fb      	strb	r3, [r7, #23]
          break;
 800366a:	e059      	b.n	8003720 <USBD_HID_Setup+0x1d8>

        case USB_REQ_GET_DESCRIPTOR:
          if (req->wValue >> 8 == HID_REPORT_DESC)
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	885b      	ldrh	r3, [r3, #2]
 8003670:	0a1b      	lsrs	r3, r3, #8
 8003672:	b29b      	uxth	r3, r3
 8003674:	2b22      	cmp	r3, #34	; 0x22
 8003676:	d108      	bne.n	800368a <USBD_HID_Setup+0x142>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	88db      	ldrh	r3, [r3, #6]
 800367c:	2b4a      	cmp	r3, #74	; 0x4a
 800367e:	bf28      	it	cs
 8003680:	234a      	movcs	r3, #74	; 0x4a
 8003682:	83fb      	strh	r3, [r7, #30]
            pbuf = HID_MOUSE_ReportDesc;
 8003684:	4b2d      	ldr	r3, [pc, #180]	; (800373c <USBD_HID_Setup+0x1f4>)
 8003686:	61bb      	str	r3, [r7, #24]
 8003688:	e015      	b.n	80036b6 <USBD_HID_Setup+0x16e>
          }
          else if (req->wValue >> 8 == HID_DESCRIPTOR_TYPE)
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	885b      	ldrh	r3, [r3, #2]
 800368e:	0a1b      	lsrs	r3, r3, #8
 8003690:	b29b      	uxth	r3, r3
 8003692:	2b21      	cmp	r3, #33	; 0x21
 8003694:	d108      	bne.n	80036a8 <USBD_HID_Setup+0x160>
          {
            pbuf = USBD_HID_Desc;
 8003696:	4b2a      	ldr	r3, [pc, #168]	; (8003740 <USBD_HID_Setup+0x1f8>)
 8003698:	61bb      	str	r3, [r7, #24]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	88db      	ldrh	r3, [r3, #6]
 800369e:	2b09      	cmp	r3, #9
 80036a0:	bf28      	it	cs
 80036a2:	2309      	movcs	r3, #9
 80036a4:	83fb      	strh	r3, [r7, #30]
 80036a6:	e006      	b.n	80036b6 <USBD_HID_Setup+0x16e>
          }
          else
          {
            USBD_CtlError(pdev, req);
 80036a8:	6839      	ldr	r1, [r7, #0]
 80036aa:	6878      	ldr	r0, [r7, #4]
 80036ac:	f001 f83a 	bl	8004724 <USBD_CtlError>
            ret = USBD_FAIL;
 80036b0:	2302      	movs	r3, #2
 80036b2:	75fb      	strb	r3, [r7, #23]
            break;
 80036b4:	e034      	b.n	8003720 <USBD_HID_Setup+0x1d8>
          }
          USBD_CtlSendData(pdev, pbuf, len);
 80036b6:	8bfb      	ldrh	r3, [r7, #30]
 80036b8:	461a      	mov	r2, r3
 80036ba:	69b9      	ldr	r1, [r7, #24]
 80036bc:	6878      	ldr	r0, [r7, #4]
 80036be:	f001 f89b 	bl	80047f8 <USBD_CtlSendData>
          break;
 80036c2:	e02d      	b.n	8003720 <USBD_HID_Setup+0x1d8>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80036ca:	2b03      	cmp	r3, #3
 80036cc:	d107      	bne.n	80036de <USBD_HID_Setup+0x196>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 80036ce:	693b      	ldr	r3, [r7, #16]
 80036d0:	3308      	adds	r3, #8
 80036d2:	2201      	movs	r2, #1
 80036d4:	4619      	mov	r1, r3
 80036d6:	6878      	ldr	r0, [r7, #4]
 80036d8:	f001 f88e 	bl	80047f8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80036dc:	e020      	b.n	8003720 <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 80036de:	6839      	ldr	r1, [r7, #0]
 80036e0:	6878      	ldr	r0, [r7, #4]
 80036e2:	f001 f81f 	bl	8004724 <USBD_CtlError>
            ret = USBD_FAIL;
 80036e6:	2302      	movs	r3, #2
 80036e8:	75fb      	strb	r3, [r7, #23]
          break;
 80036ea:	e019      	b.n	8003720 <USBD_HID_Setup+0x1d8>

        case USB_REQ_SET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80036f2:	2b03      	cmp	r3, #3
 80036f4:	d106      	bne.n	8003704 <USBD_HID_Setup+0x1bc>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	885b      	ldrh	r3, [r3, #2]
 80036fa:	b2db      	uxtb	r3, r3
 80036fc:	461a      	mov	r2, r3
 80036fe:	693b      	ldr	r3, [r7, #16]
 8003700:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8003702:	e00d      	b.n	8003720 <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 8003704:	6839      	ldr	r1, [r7, #0]
 8003706:	6878      	ldr	r0, [r7, #4]
 8003708:	f001 f80c 	bl	8004724 <USBD_CtlError>
            ret = USBD_FAIL;
 800370c:	2302      	movs	r3, #2
 800370e:	75fb      	strb	r3, [r7, #23]
          break;
 8003710:	e006      	b.n	8003720 <USBD_HID_Setup+0x1d8>

        default:
          USBD_CtlError(pdev, req);
 8003712:	6839      	ldr	r1, [r7, #0]
 8003714:	6878      	ldr	r0, [r7, #4]
 8003716:	f001 f805 	bl	8004724 <USBD_CtlError>
          ret = USBD_FAIL;
 800371a:	2302      	movs	r3, #2
 800371c:	75fb      	strb	r3, [r7, #23]
          break;
 800371e:	bf00      	nop
      }
      break;
 8003720:	e006      	b.n	8003730 <USBD_HID_Setup+0x1e8>

    default:
      USBD_CtlError(pdev, req);
 8003722:	6839      	ldr	r1, [r7, #0]
 8003724:	6878      	ldr	r0, [r7, #4]
 8003726:	f000 fffd 	bl	8004724 <USBD_CtlError>
      ret = USBD_FAIL;
 800372a:	2302      	movs	r3, #2
 800372c:	75fb      	strb	r3, [r7, #23]
      break;
 800372e:	bf00      	nop
  }

  return ret;
 8003730:	7dfb      	ldrb	r3, [r7, #23]
}
 8003732:	4618      	mov	r0, r3
 8003734:	3720      	adds	r7, #32
 8003736:	46bd      	mov	sp, r7
 8003738:	bd80      	pop	{r7, pc}
 800373a:	bf00      	nop
 800373c:	200000c8 	.word	0x200000c8
 8003740:	200000b0 	.word	0x200000b0

08003744 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8003744:	b480      	push	{r7}
 8003746:	b083      	sub	sp, #12
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgFSDesc);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2222      	movs	r2, #34	; 0x22
 8003750:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgFSDesc;
 8003752:	4b03      	ldr	r3, [pc, #12]	; (8003760 <USBD_HID_GetFSCfgDesc+0x1c>)
}
 8003754:	4618      	mov	r0, r3
 8003756:	370c      	adds	r7, #12
 8003758:	46bd      	mov	sp, r7
 800375a:	bc80      	pop	{r7}
 800375c:	4770      	bx	lr
 800375e:	bf00      	nop
 8003760:	20000044 	.word	0x20000044

08003764 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8003764:	b480      	push	{r7}
 8003766:	b083      	sub	sp, #12
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgHSDesc);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2222      	movs	r2, #34	; 0x22
 8003770:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgHSDesc;
 8003772:	4b03      	ldr	r3, [pc, #12]	; (8003780 <USBD_HID_GetHSCfgDesc+0x1c>)
}
 8003774:	4618      	mov	r0, r3
 8003776:	370c      	adds	r7, #12
 8003778:	46bd      	mov	sp, r7
 800377a:	bc80      	pop	{r7}
 800377c:	4770      	bx	lr
 800377e:	bf00      	nop
 8003780:	20000068 	.word	0x20000068

08003784 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8003784:	b480      	push	{r7}
 8003786:	b083      	sub	sp, #12
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_OtherSpeedCfgDesc);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2222      	movs	r2, #34	; 0x22
 8003790:	801a      	strh	r2, [r3, #0]
  return USBD_HID_OtherSpeedCfgDesc;
 8003792:	4b03      	ldr	r3, [pc, #12]	; (80037a0 <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 8003794:	4618      	mov	r0, r3
 8003796:	370c      	adds	r7, #12
 8003798:	46bd      	mov	sp, r7
 800379a:	bc80      	pop	{r7}
 800379c:	4770      	bx	lr
 800379e:	bf00      	nop
 80037a0:	2000008c 	.word	0x2000008c

080037a4 <USBD_HID_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_HID_DataIn(USBD_HandleTypeDef *pdev,
                                uint8_t epnum)
{
 80037a4:	b480      	push	{r7}
 80037a6:	b083      	sub	sp, #12
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
 80037ac:	460b      	mov	r3, r1
 80037ae:	70fb      	strb	r3, [r7, #3]

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80037b6:	2200      	movs	r2, #0
 80037b8:	731a      	strb	r2, [r3, #12]
  return USBD_OK;
 80037ba:	2300      	movs	r3, #0
}
 80037bc:	4618      	mov	r0, r3
 80037be:	370c      	adds	r7, #12
 80037c0:	46bd      	mov	sp, r7
 80037c2:	bc80      	pop	{r7}
 80037c4:	4770      	bx	lr
	...

080037c8 <USBD_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 80037c8:	b480      	push	{r7}
 80037ca:	b083      	sub	sp, #12
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_DeviceQualifierDesc);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	220a      	movs	r2, #10
 80037d4:	801a      	strh	r2, [r3, #0]
  return USBD_HID_DeviceQualifierDesc;
 80037d6:	4b03      	ldr	r3, [pc, #12]	; (80037e4 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 80037d8:	4618      	mov	r0, r3
 80037da:	370c      	adds	r7, #12
 80037dc:	46bd      	mov	sp, r7
 80037de:	bc80      	pop	{r7}
 80037e0:	4770      	bx	lr
 80037e2:	bf00      	nop
 80037e4:	200000bc 	.word	0x200000bc

080037e8 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b084      	sub	sp, #16
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	60f8      	str	r0, [r7, #12]
 80037f0:	60b9      	str	r1, [r7, #8]
 80037f2:	4613      	mov	r3, r2
 80037f4:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d101      	bne.n	8003800 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80037fc:	2302      	movs	r3, #2
 80037fe:	e01a      	b.n	8003836 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8003806:	2b00      	cmp	r3, #0
 8003808:	d003      	beq.n	8003812 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	2200      	movs	r2, #0
 800380e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8003812:	68bb      	ldr	r3, [r7, #8]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d003      	beq.n	8003820 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	68ba      	ldr	r2, [r7, #8]
 800381c:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	2201      	movs	r2, #1
 8003824:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	79fa      	ldrb	r2, [r7, #7]
 800382c:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800382e:	68f8      	ldr	r0, [r7, #12]
 8003830:	f001 fa38 	bl	8004ca4 <USBD_LL_Init>

  return USBD_OK;
 8003834:	2300      	movs	r3, #0
}
 8003836:	4618      	mov	r0, r3
 8003838:	3710      	adds	r7, #16
 800383a:	46bd      	mov	sp, r7
 800383c:	bd80      	pop	{r7, pc}

0800383e <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800383e:	b480      	push	{r7}
 8003840:	b085      	sub	sp, #20
 8003842:	af00      	add	r7, sp, #0
 8003844:	6078      	str	r0, [r7, #4]
 8003846:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8003848:	2300      	movs	r3, #0
 800384a:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d006      	beq.n	8003860 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	683a      	ldr	r2, [r7, #0]
 8003856:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 800385a:	2300      	movs	r3, #0
 800385c:	73fb      	strb	r3, [r7, #15]
 800385e:	e001      	b.n	8003864 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8003860:	2302      	movs	r3, #2
 8003862:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8003864:	7bfb      	ldrb	r3, [r7, #15]
}
 8003866:	4618      	mov	r0, r3
 8003868:	3714      	adds	r7, #20
 800386a:	46bd      	mov	sp, r7
 800386c:	bc80      	pop	{r7}
 800386e:	4770      	bx	lr

08003870 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b082      	sub	sp, #8
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8003878:	6878      	ldr	r0, [r7, #4]
 800387a:	f001 fa5b 	bl	8004d34 <USBD_LL_Start>

  return USBD_OK;
 800387e:	2300      	movs	r3, #0
}
 8003880:	4618      	mov	r0, r3
 8003882:	3708      	adds	r7, #8
 8003884:	46bd      	mov	sp, r7
 8003886:	bd80      	pop	{r7, pc}

08003888 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8003888:	b480      	push	{r7}
 800388a:	b083      	sub	sp, #12
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8003890:	2300      	movs	r3, #0
}
 8003892:	4618      	mov	r0, r3
 8003894:	370c      	adds	r7, #12
 8003896:	46bd      	mov	sp, r7
 8003898:	bc80      	pop	{r7}
 800389a:	4770      	bx	lr

0800389c <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b084      	sub	sp, #16
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
 80038a4:	460b      	mov	r3, r1
 80038a6:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80038a8:	2302      	movs	r3, #2
 80038aa:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d00c      	beq.n	80038d0 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	78fa      	ldrb	r2, [r7, #3]
 80038c0:	4611      	mov	r1, r2
 80038c2:	6878      	ldr	r0, [r7, #4]
 80038c4:	4798      	blx	r3
 80038c6:	4603      	mov	r3, r0
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d101      	bne.n	80038d0 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 80038cc:	2300      	movs	r3, #0
 80038ce:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80038d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80038d2:	4618      	mov	r0, r3
 80038d4:	3710      	adds	r7, #16
 80038d6:	46bd      	mov	sp, r7
 80038d8:	bd80      	pop	{r7, pc}

080038da <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80038da:	b580      	push	{r7, lr}
 80038dc:	b082      	sub	sp, #8
 80038de:	af00      	add	r7, sp, #0
 80038e0:	6078      	str	r0, [r7, #4]
 80038e2:	460b      	mov	r3, r1
 80038e4:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	78fa      	ldrb	r2, [r7, #3]
 80038f0:	4611      	mov	r1, r2
 80038f2:	6878      	ldr	r0, [r7, #4]
 80038f4:	4798      	blx	r3

  return USBD_OK;
 80038f6:	2300      	movs	r3, #0
}
 80038f8:	4618      	mov	r0, r3
 80038fa:	3708      	adds	r7, #8
 80038fc:	46bd      	mov	sp, r7
 80038fe:	bd80      	pop	{r7, pc}

08003900 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b082      	sub	sp, #8
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
 8003908:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8003910:	6839      	ldr	r1, [r7, #0]
 8003912:	4618      	mov	r0, r3
 8003914:	f000 feca 	bl	80046ac <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2201      	movs	r2, #1
 800391c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8003926:	461a      	mov	r2, r3
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003934:	f003 031f 	and.w	r3, r3, #31
 8003938:	2b01      	cmp	r3, #1
 800393a:	d00c      	beq.n	8003956 <USBD_LL_SetupStage+0x56>
 800393c:	2b01      	cmp	r3, #1
 800393e:	d302      	bcc.n	8003946 <USBD_LL_SetupStage+0x46>
 8003940:	2b02      	cmp	r3, #2
 8003942:	d010      	beq.n	8003966 <USBD_LL_SetupStage+0x66>
 8003944:	e017      	b.n	8003976 <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800394c:	4619      	mov	r1, r3
 800394e:	6878      	ldr	r0, [r7, #4]
 8003950:	f000 f9ca 	bl	8003ce8 <USBD_StdDevReq>
      break;
 8003954:	e01a      	b.n	800398c <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800395c:	4619      	mov	r1, r3
 800395e:	6878      	ldr	r0, [r7, #4]
 8003960:	f000 fa2c 	bl	8003dbc <USBD_StdItfReq>
      break;
 8003964:	e012      	b.n	800398c <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800396c:	4619      	mov	r1, r3
 800396e:	6878      	ldr	r0, [r7, #4]
 8003970:	f000 fa6a 	bl	8003e48 <USBD_StdEPReq>
      break;
 8003974:	e00a      	b.n	800398c <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800397c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003980:	b2db      	uxtb	r3, r3
 8003982:	4619      	mov	r1, r3
 8003984:	6878      	ldr	r0, [r7, #4]
 8003986:	f001 fa35 	bl	8004df4 <USBD_LL_StallEP>
      break;
 800398a:	bf00      	nop
  }

  return USBD_OK;
 800398c:	2300      	movs	r3, #0
}
 800398e:	4618      	mov	r0, r3
 8003990:	3708      	adds	r7, #8
 8003992:	46bd      	mov	sp, r7
 8003994:	bd80      	pop	{r7, pc}

08003996 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8003996:	b580      	push	{r7, lr}
 8003998:	b086      	sub	sp, #24
 800399a:	af00      	add	r7, sp, #0
 800399c:	60f8      	str	r0, [r7, #12]
 800399e:	460b      	mov	r3, r1
 80039a0:	607a      	str	r2, [r7, #4]
 80039a2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80039a4:	7afb      	ldrb	r3, [r7, #11]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d14b      	bne.n	8003a42 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80039b0:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80039b8:	2b03      	cmp	r3, #3
 80039ba:	d134      	bne.n	8003a26 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 80039bc:	697b      	ldr	r3, [r7, #20]
 80039be:	68da      	ldr	r2, [r3, #12]
 80039c0:	697b      	ldr	r3, [r7, #20]
 80039c2:	691b      	ldr	r3, [r3, #16]
 80039c4:	429a      	cmp	r2, r3
 80039c6:	d919      	bls.n	80039fc <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 80039c8:	697b      	ldr	r3, [r7, #20]
 80039ca:	68da      	ldr	r2, [r3, #12]
 80039cc:	697b      	ldr	r3, [r7, #20]
 80039ce:	691b      	ldr	r3, [r3, #16]
 80039d0:	1ad2      	subs	r2, r2, r3
 80039d2:	697b      	ldr	r3, [r7, #20]
 80039d4:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80039d6:	697b      	ldr	r3, [r7, #20]
 80039d8:	68da      	ldr	r2, [r3, #12]
 80039da:	697b      	ldr	r3, [r7, #20]
 80039dc:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80039de:	429a      	cmp	r2, r3
 80039e0:	d203      	bcs.n	80039ea <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80039e2:	697b      	ldr	r3, [r7, #20]
 80039e4:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 80039e6:	b29b      	uxth	r3, r3
 80039e8:	e002      	b.n	80039f0 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80039ea:	697b      	ldr	r3, [r7, #20]
 80039ec:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80039ee:	b29b      	uxth	r3, r3
 80039f0:	461a      	mov	r2, r3
 80039f2:	6879      	ldr	r1, [r7, #4]
 80039f4:	68f8      	ldr	r0, [r7, #12]
 80039f6:	f000 ff2d 	bl	8004854 <USBD_CtlContinueRx>
 80039fa:	e038      	b.n	8003a6e <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8003a02:	691b      	ldr	r3, [r3, #16]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d00a      	beq.n	8003a1e <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8003a0e:	2b03      	cmp	r3, #3
 8003a10:	d105      	bne.n	8003a1e <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8003a18:	691b      	ldr	r3, [r3, #16]
 8003a1a:	68f8      	ldr	r0, [r7, #12]
 8003a1c:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8003a1e:	68f8      	ldr	r0, [r7, #12]
 8003a20:	f000 ff2a 	bl	8004878 <USBD_CtlSendStatus>
 8003a24:	e023      	b.n	8003a6e <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8003a2c:	2b05      	cmp	r3, #5
 8003a2e:	d11e      	bne.n	8003a6e <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	2200      	movs	r2, #0
 8003a34:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8003a38:	2100      	movs	r1, #0
 8003a3a:	68f8      	ldr	r0, [r7, #12]
 8003a3c:	f001 f9da 	bl	8004df4 <USBD_LL_StallEP>
 8003a40:	e015      	b.n	8003a6e <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8003a48:	699b      	ldr	r3, [r3, #24]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d00d      	beq.n	8003a6a <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8003a54:	2b03      	cmp	r3, #3
 8003a56:	d108      	bne.n	8003a6a <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8003a5e:	699b      	ldr	r3, [r3, #24]
 8003a60:	7afa      	ldrb	r2, [r7, #11]
 8003a62:	4611      	mov	r1, r2
 8003a64:	68f8      	ldr	r0, [r7, #12]
 8003a66:	4798      	blx	r3
 8003a68:	e001      	b.n	8003a6e <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8003a6a:	2302      	movs	r3, #2
 8003a6c:	e000      	b.n	8003a70 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8003a6e:	2300      	movs	r3, #0
}
 8003a70:	4618      	mov	r0, r3
 8003a72:	3718      	adds	r7, #24
 8003a74:	46bd      	mov	sp, r7
 8003a76:	bd80      	pop	{r7, pc}

08003a78 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b086      	sub	sp, #24
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	60f8      	str	r0, [r7, #12]
 8003a80:	460b      	mov	r3, r1
 8003a82:	607a      	str	r2, [r7, #4]
 8003a84:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8003a86:	7afb      	ldrb	r3, [r7, #11]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d17f      	bne.n	8003b8c <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	3314      	adds	r3, #20
 8003a90:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8003a98:	2b02      	cmp	r3, #2
 8003a9a:	d15c      	bne.n	8003b56 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8003a9c:	697b      	ldr	r3, [r7, #20]
 8003a9e:	68da      	ldr	r2, [r3, #12]
 8003aa0:	697b      	ldr	r3, [r7, #20]
 8003aa2:	691b      	ldr	r3, [r3, #16]
 8003aa4:	429a      	cmp	r2, r3
 8003aa6:	d915      	bls.n	8003ad4 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8003aa8:	697b      	ldr	r3, [r7, #20]
 8003aaa:	68da      	ldr	r2, [r3, #12]
 8003aac:	697b      	ldr	r3, [r7, #20]
 8003aae:	691b      	ldr	r3, [r3, #16]
 8003ab0:	1ad2      	subs	r2, r2, r3
 8003ab2:	697b      	ldr	r3, [r7, #20]
 8003ab4:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8003ab6:	697b      	ldr	r3, [r7, #20]
 8003ab8:	68db      	ldr	r3, [r3, #12]
 8003aba:	b29b      	uxth	r3, r3
 8003abc:	461a      	mov	r2, r3
 8003abe:	6879      	ldr	r1, [r7, #4]
 8003ac0:	68f8      	ldr	r0, [r7, #12]
 8003ac2:	f000 feb5 	bl	8004830 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	2200      	movs	r2, #0
 8003aca:	2100      	movs	r1, #0
 8003acc:	68f8      	ldr	r0, [r7, #12]
 8003ace:	f001 fa36 	bl	8004f3e <USBD_LL_PrepareReceive>
 8003ad2:	e04e      	b.n	8003b72 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8003ad4:	697b      	ldr	r3, [r7, #20]
 8003ad6:	689b      	ldr	r3, [r3, #8]
 8003ad8:	697a      	ldr	r2, [r7, #20]
 8003ada:	6912      	ldr	r2, [r2, #16]
 8003adc:	fbb3 f1f2 	udiv	r1, r3, r2
 8003ae0:	fb02 f201 	mul.w	r2, r2, r1
 8003ae4:	1a9b      	subs	r3, r3, r2
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d11c      	bne.n	8003b24 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8003aea:	697b      	ldr	r3, [r7, #20]
 8003aec:	689a      	ldr	r2, [r3, #8]
 8003aee:	697b      	ldr	r3, [r7, #20]
 8003af0:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8003af2:	429a      	cmp	r2, r3
 8003af4:	d316      	bcc.n	8003b24 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8003af6:	697b      	ldr	r3, [r7, #20]
 8003af8:	689a      	ldr	r2, [r3, #8]
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8003b00:	429a      	cmp	r2, r3
 8003b02:	d20f      	bcs.n	8003b24 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8003b04:	2200      	movs	r2, #0
 8003b06:	2100      	movs	r1, #0
 8003b08:	68f8      	ldr	r0, [r7, #12]
 8003b0a:	f000 fe91 	bl	8004830 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	2200      	movs	r2, #0
 8003b12:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8003b16:	2300      	movs	r3, #0
 8003b18:	2200      	movs	r2, #0
 8003b1a:	2100      	movs	r1, #0
 8003b1c:	68f8      	ldr	r0, [r7, #12]
 8003b1e:	f001 fa0e 	bl	8004f3e <USBD_LL_PrepareReceive>
 8003b22:	e026      	b.n	8003b72 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8003b2a:	68db      	ldr	r3, [r3, #12]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d00a      	beq.n	8003b46 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8003b36:	2b03      	cmp	r3, #3
 8003b38:	d105      	bne.n	8003b46 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8003b40:	68db      	ldr	r3, [r3, #12]
 8003b42:	68f8      	ldr	r0, [r7, #12]
 8003b44:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8003b46:	2180      	movs	r1, #128	; 0x80
 8003b48:	68f8      	ldr	r0, [r7, #12]
 8003b4a:	f001 f953 	bl	8004df4 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8003b4e:	68f8      	ldr	r0, [r7, #12]
 8003b50:	f000 fea5 	bl	800489e <USBD_CtlReceiveStatus>
 8003b54:	e00d      	b.n	8003b72 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8003b5c:	2b04      	cmp	r3, #4
 8003b5e:	d004      	beq.n	8003b6a <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d103      	bne.n	8003b72 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8003b6a:	2180      	movs	r1, #128	; 0x80
 8003b6c:	68f8      	ldr	r0, [r7, #12]
 8003b6e:	f001 f941 	bl	8004df4 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8003b78:	2b01      	cmp	r3, #1
 8003b7a:	d11d      	bne.n	8003bb8 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8003b7c:	68f8      	ldr	r0, [r7, #12]
 8003b7e:	f7ff fe83 	bl	8003888 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	2200      	movs	r2, #0
 8003b86:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8003b8a:	e015      	b.n	8003bb8 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8003b92:	695b      	ldr	r3, [r3, #20]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d00d      	beq.n	8003bb4 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8003b9e:	2b03      	cmp	r3, #3
 8003ba0:	d108      	bne.n	8003bb4 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8003ba8:	695b      	ldr	r3, [r3, #20]
 8003baa:	7afa      	ldrb	r2, [r7, #11]
 8003bac:	4611      	mov	r1, r2
 8003bae:	68f8      	ldr	r0, [r7, #12]
 8003bb0:	4798      	blx	r3
 8003bb2:	e001      	b.n	8003bb8 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8003bb4:	2302      	movs	r3, #2
 8003bb6:	e000      	b.n	8003bba <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8003bb8:	2300      	movs	r3, #0
}
 8003bba:	4618      	mov	r0, r3
 8003bbc:	3718      	adds	r7, #24
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	bd80      	pop	{r7, pc}

08003bc2 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8003bc2:	b580      	push	{r7, lr}
 8003bc4:	b082      	sub	sp, #8
 8003bc6:	af00      	add	r7, sp, #0
 8003bc8:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8003bca:	2340      	movs	r3, #64	; 0x40
 8003bcc:	2200      	movs	r2, #0
 8003bce:	2100      	movs	r1, #0
 8003bd0:	6878      	ldr	r0, [r7, #4]
 8003bd2:	f001 f8ca 	bl	8004d6a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2201      	movs	r2, #1
 8003bda:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2240      	movs	r2, #64	; 0x40
 8003be2:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8003be6:	2340      	movs	r3, #64	; 0x40
 8003be8:	2200      	movs	r2, #0
 8003bea:	2180      	movs	r1, #128	; 0x80
 8003bec:	6878      	ldr	r0, [r7, #4]
 8003bee:	f001 f8bc 	bl	8004d6a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2201      	movs	r2, #1
 8003bf6:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2240      	movs	r2, #64	; 0x40
 8003bfc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2201      	movs	r2, #1
 8003c02:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2200      	movs	r2, #0
 8003c0a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2200      	movs	r2, #0
 8003c12:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2200      	movs	r2, #0
 8003c18:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d009      	beq.n	8003c3a <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8003c2c:	685b      	ldr	r3, [r3, #4]
 8003c2e:	687a      	ldr	r2, [r7, #4]
 8003c30:	6852      	ldr	r2, [r2, #4]
 8003c32:	b2d2      	uxtb	r2, r2
 8003c34:	4611      	mov	r1, r2
 8003c36:	6878      	ldr	r0, [r7, #4]
 8003c38:	4798      	blx	r3
  }

  return USBD_OK;
 8003c3a:	2300      	movs	r3, #0
}
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	3708      	adds	r7, #8
 8003c40:	46bd      	mov	sp, r7
 8003c42:	bd80      	pop	{r7, pc}

08003c44 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8003c44:	b480      	push	{r7}
 8003c46:	b083      	sub	sp, #12
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
 8003c4c:	460b      	mov	r3, r1
 8003c4e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	78fa      	ldrb	r2, [r7, #3]
 8003c54:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8003c56:	2300      	movs	r3, #0
}
 8003c58:	4618      	mov	r0, r3
 8003c5a:	370c      	adds	r7, #12
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	bc80      	pop	{r7}
 8003c60:	4770      	bx	lr

08003c62 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8003c62:	b480      	push	{r7}
 8003c64:	b083      	sub	sp, #12
 8003c66:	af00      	add	r7, sp, #0
 8003c68:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2204      	movs	r2, #4
 8003c7a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8003c7e:	2300      	movs	r3, #0
}
 8003c80:	4618      	mov	r0, r3
 8003c82:	370c      	adds	r7, #12
 8003c84:	46bd      	mov	sp, r7
 8003c86:	bc80      	pop	{r7}
 8003c88:	4770      	bx	lr

08003c8a <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8003c8a:	b480      	push	{r7}
 8003c8c:	b083      	sub	sp, #12
 8003c8e:	af00      	add	r7, sp, #0
 8003c90:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8003c98:	2b04      	cmp	r3, #4
 8003c9a:	d105      	bne.n	8003ca8 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8003ca8:	2300      	movs	r3, #0
}
 8003caa:	4618      	mov	r0, r3
 8003cac:	370c      	adds	r7, #12
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	bc80      	pop	{r7}
 8003cb2:	4770      	bx	lr

08003cb4 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b082      	sub	sp, #8
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8003cc2:	2b03      	cmp	r3, #3
 8003cc4:	d10b      	bne.n	8003cde <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8003ccc:	69db      	ldr	r3, [r3, #28]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d005      	beq.n	8003cde <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8003cd8:	69db      	ldr	r3, [r3, #28]
 8003cda:	6878      	ldr	r0, [r7, #4]
 8003cdc:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8003cde:	2300      	movs	r3, #0
}
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	3708      	adds	r7, #8
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	bd80      	pop	{r7, pc}

08003ce8 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b084      	sub	sp, #16
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
 8003cf0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	781b      	ldrb	r3, [r3, #0]
 8003cfa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8003cfe:	2b20      	cmp	r3, #32
 8003d00:	d004      	beq.n	8003d0c <USBD_StdDevReq+0x24>
 8003d02:	2b40      	cmp	r3, #64	; 0x40
 8003d04:	d002      	beq.n	8003d0c <USBD_StdDevReq+0x24>
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d008      	beq.n	8003d1c <USBD_StdDevReq+0x34>
 8003d0a:	e04c      	b.n	8003da6 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8003d12:	689b      	ldr	r3, [r3, #8]
 8003d14:	6839      	ldr	r1, [r7, #0]
 8003d16:	6878      	ldr	r0, [r7, #4]
 8003d18:	4798      	blx	r3
      break;
 8003d1a:	e049      	b.n	8003db0 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	785b      	ldrb	r3, [r3, #1]
 8003d20:	2b09      	cmp	r3, #9
 8003d22:	d83a      	bhi.n	8003d9a <USBD_StdDevReq+0xb2>
 8003d24:	a201      	add	r2, pc, #4	; (adr r2, 8003d2c <USBD_StdDevReq+0x44>)
 8003d26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d2a:	bf00      	nop
 8003d2c:	08003d7d 	.word	0x08003d7d
 8003d30:	08003d91 	.word	0x08003d91
 8003d34:	08003d9b 	.word	0x08003d9b
 8003d38:	08003d87 	.word	0x08003d87
 8003d3c:	08003d9b 	.word	0x08003d9b
 8003d40:	08003d5f 	.word	0x08003d5f
 8003d44:	08003d55 	.word	0x08003d55
 8003d48:	08003d9b 	.word	0x08003d9b
 8003d4c:	08003d73 	.word	0x08003d73
 8003d50:	08003d69 	.word	0x08003d69
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8003d54:	6839      	ldr	r1, [r7, #0]
 8003d56:	6878      	ldr	r0, [r7, #4]
 8003d58:	f000 f9d4 	bl	8004104 <USBD_GetDescriptor>
          break;
 8003d5c:	e022      	b.n	8003da4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8003d5e:	6839      	ldr	r1, [r7, #0]
 8003d60:	6878      	ldr	r0, [r7, #4]
 8003d62:	f000 fb37 	bl	80043d4 <USBD_SetAddress>
          break;
 8003d66:	e01d      	b.n	8003da4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8003d68:	6839      	ldr	r1, [r7, #0]
 8003d6a:	6878      	ldr	r0, [r7, #4]
 8003d6c:	f000 fb74 	bl	8004458 <USBD_SetConfig>
          break;
 8003d70:	e018      	b.n	8003da4 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8003d72:	6839      	ldr	r1, [r7, #0]
 8003d74:	6878      	ldr	r0, [r7, #4]
 8003d76:	f000 fbfd 	bl	8004574 <USBD_GetConfig>
          break;
 8003d7a:	e013      	b.n	8003da4 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8003d7c:	6839      	ldr	r1, [r7, #0]
 8003d7e:	6878      	ldr	r0, [r7, #4]
 8003d80:	f000 fc2c 	bl	80045dc <USBD_GetStatus>
          break;
 8003d84:	e00e      	b.n	8003da4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8003d86:	6839      	ldr	r1, [r7, #0]
 8003d88:	6878      	ldr	r0, [r7, #4]
 8003d8a:	f000 fc5a 	bl	8004642 <USBD_SetFeature>
          break;
 8003d8e:	e009      	b.n	8003da4 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8003d90:	6839      	ldr	r1, [r7, #0]
 8003d92:	6878      	ldr	r0, [r7, #4]
 8003d94:	f000 fc69 	bl	800466a <USBD_ClrFeature>
          break;
 8003d98:	e004      	b.n	8003da4 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8003d9a:	6839      	ldr	r1, [r7, #0]
 8003d9c:	6878      	ldr	r0, [r7, #4]
 8003d9e:	f000 fcc1 	bl	8004724 <USBD_CtlError>
          break;
 8003da2:	bf00      	nop
      }
      break;
 8003da4:	e004      	b.n	8003db0 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8003da6:	6839      	ldr	r1, [r7, #0]
 8003da8:	6878      	ldr	r0, [r7, #4]
 8003daa:	f000 fcbb 	bl	8004724 <USBD_CtlError>
      break;
 8003dae:	bf00      	nop
  }

  return ret;
 8003db0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003db2:	4618      	mov	r0, r3
 8003db4:	3710      	adds	r7, #16
 8003db6:	46bd      	mov	sp, r7
 8003db8:	bd80      	pop	{r7, pc}
 8003dba:	bf00      	nop

08003dbc <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b084      	sub	sp, #16
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
 8003dc4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	781b      	ldrb	r3, [r3, #0]
 8003dce:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8003dd2:	2b20      	cmp	r3, #32
 8003dd4:	d003      	beq.n	8003dde <USBD_StdItfReq+0x22>
 8003dd6:	2b40      	cmp	r3, #64	; 0x40
 8003dd8:	d001      	beq.n	8003dde <USBD_StdItfReq+0x22>
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d12a      	bne.n	8003e34 <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8003de4:	3b01      	subs	r3, #1
 8003de6:	2b02      	cmp	r3, #2
 8003de8:	d81d      	bhi.n	8003e26 <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	889b      	ldrh	r3, [r3, #4]
 8003dee:	b2db      	uxtb	r3, r3
 8003df0:	2b01      	cmp	r3, #1
 8003df2:	d813      	bhi.n	8003e1c <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8003dfa:	689b      	ldr	r3, [r3, #8]
 8003dfc:	6839      	ldr	r1, [r7, #0]
 8003dfe:	6878      	ldr	r0, [r7, #4]
 8003e00:	4798      	blx	r3
 8003e02:	4603      	mov	r3, r0
 8003e04:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	88db      	ldrh	r3, [r3, #6]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d110      	bne.n	8003e30 <USBD_StdItfReq+0x74>
 8003e0e:	7bfb      	ldrb	r3, [r7, #15]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d10d      	bne.n	8003e30 <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 8003e14:	6878      	ldr	r0, [r7, #4]
 8003e16:	f000 fd2f 	bl	8004878 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8003e1a:	e009      	b.n	8003e30 <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 8003e1c:	6839      	ldr	r1, [r7, #0]
 8003e1e:	6878      	ldr	r0, [r7, #4]
 8003e20:	f000 fc80 	bl	8004724 <USBD_CtlError>
          break;
 8003e24:	e004      	b.n	8003e30 <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 8003e26:	6839      	ldr	r1, [r7, #0]
 8003e28:	6878      	ldr	r0, [r7, #4]
 8003e2a:	f000 fc7b 	bl	8004724 <USBD_CtlError>
          break;
 8003e2e:	e000      	b.n	8003e32 <USBD_StdItfReq+0x76>
          break;
 8003e30:	bf00      	nop
      }
      break;
 8003e32:	e004      	b.n	8003e3e <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 8003e34:	6839      	ldr	r1, [r7, #0]
 8003e36:	6878      	ldr	r0, [r7, #4]
 8003e38:	f000 fc74 	bl	8004724 <USBD_CtlError>
      break;
 8003e3c:	bf00      	nop
  }

  return USBD_OK;
 8003e3e:	2300      	movs	r3, #0
}
 8003e40:	4618      	mov	r0, r3
 8003e42:	3710      	adds	r7, #16
 8003e44:	46bd      	mov	sp, r7
 8003e46:	bd80      	pop	{r7, pc}

08003e48 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b084      	sub	sp, #16
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
 8003e50:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8003e52:	2300      	movs	r3, #0
 8003e54:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	889b      	ldrh	r3, [r3, #4]
 8003e5a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	781b      	ldrb	r3, [r3, #0]
 8003e60:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8003e64:	2b20      	cmp	r3, #32
 8003e66:	d004      	beq.n	8003e72 <USBD_StdEPReq+0x2a>
 8003e68:	2b40      	cmp	r3, #64	; 0x40
 8003e6a:	d002      	beq.n	8003e72 <USBD_StdEPReq+0x2a>
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d008      	beq.n	8003e82 <USBD_StdEPReq+0x3a>
 8003e70:	e13d      	b.n	80040ee <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8003e78:	689b      	ldr	r3, [r3, #8]
 8003e7a:	6839      	ldr	r1, [r7, #0]
 8003e7c:	6878      	ldr	r0, [r7, #4]
 8003e7e:	4798      	blx	r3
      break;
 8003e80:	e13a      	b.n	80040f8 <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	781b      	ldrb	r3, [r3, #0]
 8003e86:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8003e8a:	2b20      	cmp	r3, #32
 8003e8c:	d10a      	bne.n	8003ea4 <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8003e94:	689b      	ldr	r3, [r3, #8]
 8003e96:	6839      	ldr	r1, [r7, #0]
 8003e98:	6878      	ldr	r0, [r7, #4]
 8003e9a:	4798      	blx	r3
 8003e9c:	4603      	mov	r3, r0
 8003e9e:	73fb      	strb	r3, [r7, #15]

        return ret;
 8003ea0:	7bfb      	ldrb	r3, [r7, #15]
 8003ea2:	e12a      	b.n	80040fa <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	785b      	ldrb	r3, [r3, #1]
 8003ea8:	2b01      	cmp	r3, #1
 8003eaa:	d03e      	beq.n	8003f2a <USBD_StdEPReq+0xe2>
 8003eac:	2b03      	cmp	r3, #3
 8003eae:	d002      	beq.n	8003eb6 <USBD_StdEPReq+0x6e>
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d070      	beq.n	8003f96 <USBD_StdEPReq+0x14e>
 8003eb4:	e115      	b.n	80040e2 <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8003ebc:	2b02      	cmp	r3, #2
 8003ebe:	d002      	beq.n	8003ec6 <USBD_StdEPReq+0x7e>
 8003ec0:	2b03      	cmp	r3, #3
 8003ec2:	d015      	beq.n	8003ef0 <USBD_StdEPReq+0xa8>
 8003ec4:	e02b      	b.n	8003f1e <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8003ec6:	7bbb      	ldrb	r3, [r7, #14]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d00c      	beq.n	8003ee6 <USBD_StdEPReq+0x9e>
 8003ecc:	7bbb      	ldrb	r3, [r7, #14]
 8003ece:	2b80      	cmp	r3, #128	; 0x80
 8003ed0:	d009      	beq.n	8003ee6 <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8003ed2:	7bbb      	ldrb	r3, [r7, #14]
 8003ed4:	4619      	mov	r1, r3
 8003ed6:	6878      	ldr	r0, [r7, #4]
 8003ed8:	f000 ff8c 	bl	8004df4 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8003edc:	2180      	movs	r1, #128	; 0x80
 8003ede:	6878      	ldr	r0, [r7, #4]
 8003ee0:	f000 ff88 	bl	8004df4 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8003ee4:	e020      	b.n	8003f28 <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 8003ee6:	6839      	ldr	r1, [r7, #0]
 8003ee8:	6878      	ldr	r0, [r7, #4]
 8003eea:	f000 fc1b 	bl	8004724 <USBD_CtlError>
              break;
 8003eee:	e01b      	b.n	8003f28 <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	885b      	ldrh	r3, [r3, #2]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d10e      	bne.n	8003f16 <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 8003ef8:	7bbb      	ldrb	r3, [r7, #14]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d00b      	beq.n	8003f16 <USBD_StdEPReq+0xce>
 8003efe:	7bbb      	ldrb	r3, [r7, #14]
 8003f00:	2b80      	cmp	r3, #128	; 0x80
 8003f02:	d008      	beq.n	8003f16 <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	88db      	ldrh	r3, [r3, #6]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d104      	bne.n	8003f16 <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8003f0c:	7bbb      	ldrb	r3, [r7, #14]
 8003f0e:	4619      	mov	r1, r3
 8003f10:	6878      	ldr	r0, [r7, #4]
 8003f12:	f000 ff6f 	bl	8004df4 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8003f16:	6878      	ldr	r0, [r7, #4]
 8003f18:	f000 fcae 	bl	8004878 <USBD_CtlSendStatus>

              break;
 8003f1c:	e004      	b.n	8003f28 <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 8003f1e:	6839      	ldr	r1, [r7, #0]
 8003f20:	6878      	ldr	r0, [r7, #4]
 8003f22:	f000 fbff 	bl	8004724 <USBD_CtlError>
              break;
 8003f26:	bf00      	nop
          }
          break;
 8003f28:	e0e0      	b.n	80040ec <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8003f30:	2b02      	cmp	r3, #2
 8003f32:	d002      	beq.n	8003f3a <USBD_StdEPReq+0xf2>
 8003f34:	2b03      	cmp	r3, #3
 8003f36:	d015      	beq.n	8003f64 <USBD_StdEPReq+0x11c>
 8003f38:	e026      	b.n	8003f88 <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8003f3a:	7bbb      	ldrb	r3, [r7, #14]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d00c      	beq.n	8003f5a <USBD_StdEPReq+0x112>
 8003f40:	7bbb      	ldrb	r3, [r7, #14]
 8003f42:	2b80      	cmp	r3, #128	; 0x80
 8003f44:	d009      	beq.n	8003f5a <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8003f46:	7bbb      	ldrb	r3, [r7, #14]
 8003f48:	4619      	mov	r1, r3
 8003f4a:	6878      	ldr	r0, [r7, #4]
 8003f4c:	f000 ff52 	bl	8004df4 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8003f50:	2180      	movs	r1, #128	; 0x80
 8003f52:	6878      	ldr	r0, [r7, #4]
 8003f54:	f000 ff4e 	bl	8004df4 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8003f58:	e01c      	b.n	8003f94 <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 8003f5a:	6839      	ldr	r1, [r7, #0]
 8003f5c:	6878      	ldr	r0, [r7, #4]
 8003f5e:	f000 fbe1 	bl	8004724 <USBD_CtlError>
              break;
 8003f62:	e017      	b.n	8003f94 <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	885b      	ldrh	r3, [r3, #2]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d112      	bne.n	8003f92 <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8003f6c:	7bbb      	ldrb	r3, [r7, #14]
 8003f6e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d004      	beq.n	8003f80 <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8003f76:	7bbb      	ldrb	r3, [r7, #14]
 8003f78:	4619      	mov	r1, r3
 8003f7a:	6878      	ldr	r0, [r7, #4]
 8003f7c:	f000 ff59 	bl	8004e32 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8003f80:	6878      	ldr	r0, [r7, #4]
 8003f82:	f000 fc79 	bl	8004878 <USBD_CtlSendStatus>
              }
              break;
 8003f86:	e004      	b.n	8003f92 <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 8003f88:	6839      	ldr	r1, [r7, #0]
 8003f8a:	6878      	ldr	r0, [r7, #4]
 8003f8c:	f000 fbca 	bl	8004724 <USBD_CtlError>
              break;
 8003f90:	e000      	b.n	8003f94 <USBD_StdEPReq+0x14c>
              break;
 8003f92:	bf00      	nop
          }
          break;
 8003f94:	e0aa      	b.n	80040ec <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8003f9c:	2b02      	cmp	r3, #2
 8003f9e:	d002      	beq.n	8003fa6 <USBD_StdEPReq+0x15e>
 8003fa0:	2b03      	cmp	r3, #3
 8003fa2:	d032      	beq.n	800400a <USBD_StdEPReq+0x1c2>
 8003fa4:	e097      	b.n	80040d6 <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8003fa6:	7bbb      	ldrb	r3, [r7, #14]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d007      	beq.n	8003fbc <USBD_StdEPReq+0x174>
 8003fac:	7bbb      	ldrb	r3, [r7, #14]
 8003fae:	2b80      	cmp	r3, #128	; 0x80
 8003fb0:	d004      	beq.n	8003fbc <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 8003fb2:	6839      	ldr	r1, [r7, #0]
 8003fb4:	6878      	ldr	r0, [r7, #4]
 8003fb6:	f000 fbb5 	bl	8004724 <USBD_CtlError>
                break;
 8003fba:	e091      	b.n	80040e0 <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8003fbc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	da0b      	bge.n	8003fdc <USBD_StdEPReq+0x194>
 8003fc4:	7bbb      	ldrb	r3, [r7, #14]
 8003fc6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003fca:	4613      	mov	r3, r2
 8003fcc:	009b      	lsls	r3, r3, #2
 8003fce:	4413      	add	r3, r2
 8003fd0:	009b      	lsls	r3, r3, #2
 8003fd2:	3310      	adds	r3, #16
 8003fd4:	687a      	ldr	r2, [r7, #4]
 8003fd6:	4413      	add	r3, r2
 8003fd8:	3304      	adds	r3, #4
 8003fda:	e00b      	b.n	8003ff4 <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8003fdc:	7bbb      	ldrb	r3, [r7, #14]
 8003fde:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8003fe2:	4613      	mov	r3, r2
 8003fe4:	009b      	lsls	r3, r3, #2
 8003fe6:	4413      	add	r3, r2
 8003fe8:	009b      	lsls	r3, r3, #2
 8003fea:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8003fee:	687a      	ldr	r2, [r7, #4]
 8003ff0:	4413      	add	r3, r2
 8003ff2:	3304      	adds	r3, #4
 8003ff4:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8003ff6:	68bb      	ldr	r3, [r7, #8]
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8003ffc:	68bb      	ldr	r3, [r7, #8]
 8003ffe:	2202      	movs	r2, #2
 8004000:	4619      	mov	r1, r3
 8004002:	6878      	ldr	r0, [r7, #4]
 8004004:	f000 fbf8 	bl	80047f8 <USBD_CtlSendData>
              break;
 8004008:	e06a      	b.n	80040e0 <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800400a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800400e:	2b00      	cmp	r3, #0
 8004010:	da11      	bge.n	8004036 <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8004012:	7bbb      	ldrb	r3, [r7, #14]
 8004014:	f003 020f 	and.w	r2, r3, #15
 8004018:	6879      	ldr	r1, [r7, #4]
 800401a:	4613      	mov	r3, r2
 800401c:	009b      	lsls	r3, r3, #2
 800401e:	4413      	add	r3, r2
 8004020:	009b      	lsls	r3, r3, #2
 8004022:	440b      	add	r3, r1
 8004024:	3318      	adds	r3, #24
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	2b00      	cmp	r3, #0
 800402a:	d117      	bne.n	800405c <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 800402c:	6839      	ldr	r1, [r7, #0]
 800402e:	6878      	ldr	r0, [r7, #4]
 8004030:	f000 fb78 	bl	8004724 <USBD_CtlError>
                  break;
 8004034:	e054      	b.n	80040e0 <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8004036:	7bbb      	ldrb	r3, [r7, #14]
 8004038:	f003 020f 	and.w	r2, r3, #15
 800403c:	6879      	ldr	r1, [r7, #4]
 800403e:	4613      	mov	r3, r2
 8004040:	009b      	lsls	r3, r3, #2
 8004042:	4413      	add	r3, r2
 8004044:	009b      	lsls	r3, r3, #2
 8004046:	440b      	add	r3, r1
 8004048:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d104      	bne.n	800405c <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8004052:	6839      	ldr	r1, [r7, #0]
 8004054:	6878      	ldr	r0, [r7, #4]
 8004056:	f000 fb65 	bl	8004724 <USBD_CtlError>
                  break;
 800405a:	e041      	b.n	80040e0 <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800405c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004060:	2b00      	cmp	r3, #0
 8004062:	da0b      	bge.n	800407c <USBD_StdEPReq+0x234>
 8004064:	7bbb      	ldrb	r3, [r7, #14]
 8004066:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800406a:	4613      	mov	r3, r2
 800406c:	009b      	lsls	r3, r3, #2
 800406e:	4413      	add	r3, r2
 8004070:	009b      	lsls	r3, r3, #2
 8004072:	3310      	adds	r3, #16
 8004074:	687a      	ldr	r2, [r7, #4]
 8004076:	4413      	add	r3, r2
 8004078:	3304      	adds	r3, #4
 800407a:	e00b      	b.n	8004094 <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800407c:	7bbb      	ldrb	r3, [r7, #14]
 800407e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004082:	4613      	mov	r3, r2
 8004084:	009b      	lsls	r3, r3, #2
 8004086:	4413      	add	r3, r2
 8004088:	009b      	lsls	r3, r3, #2
 800408a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800408e:	687a      	ldr	r2, [r7, #4]
 8004090:	4413      	add	r3, r2
 8004092:	3304      	adds	r3, #4
 8004094:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8004096:	7bbb      	ldrb	r3, [r7, #14]
 8004098:	2b00      	cmp	r3, #0
 800409a:	d002      	beq.n	80040a2 <USBD_StdEPReq+0x25a>
 800409c:	7bbb      	ldrb	r3, [r7, #14]
 800409e:	2b80      	cmp	r3, #128	; 0x80
 80040a0:	d103      	bne.n	80040aa <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 80040a2:	68bb      	ldr	r3, [r7, #8]
 80040a4:	2200      	movs	r2, #0
 80040a6:	601a      	str	r2, [r3, #0]
 80040a8:	e00e      	b.n	80040c8 <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80040aa:	7bbb      	ldrb	r3, [r7, #14]
 80040ac:	4619      	mov	r1, r3
 80040ae:	6878      	ldr	r0, [r7, #4]
 80040b0:	f000 fede 	bl	8004e70 <USBD_LL_IsStallEP>
 80040b4:	4603      	mov	r3, r0
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d003      	beq.n	80040c2 <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 80040ba:	68bb      	ldr	r3, [r7, #8]
 80040bc:	2201      	movs	r2, #1
 80040be:	601a      	str	r2, [r3, #0]
 80040c0:	e002      	b.n	80040c8 <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 80040c2:	68bb      	ldr	r3, [r7, #8]
 80040c4:	2200      	movs	r2, #0
 80040c6:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80040c8:	68bb      	ldr	r3, [r7, #8]
 80040ca:	2202      	movs	r2, #2
 80040cc:	4619      	mov	r1, r3
 80040ce:	6878      	ldr	r0, [r7, #4]
 80040d0:	f000 fb92 	bl	80047f8 <USBD_CtlSendData>
              break;
 80040d4:	e004      	b.n	80040e0 <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 80040d6:	6839      	ldr	r1, [r7, #0]
 80040d8:	6878      	ldr	r0, [r7, #4]
 80040da:	f000 fb23 	bl	8004724 <USBD_CtlError>
              break;
 80040de:	bf00      	nop
          }
          break;
 80040e0:	e004      	b.n	80040ec <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 80040e2:	6839      	ldr	r1, [r7, #0]
 80040e4:	6878      	ldr	r0, [r7, #4]
 80040e6:	f000 fb1d 	bl	8004724 <USBD_CtlError>
          break;
 80040ea:	bf00      	nop
      }
      break;
 80040ec:	e004      	b.n	80040f8 <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 80040ee:	6839      	ldr	r1, [r7, #0]
 80040f0:	6878      	ldr	r0, [r7, #4]
 80040f2:	f000 fb17 	bl	8004724 <USBD_CtlError>
      break;
 80040f6:	bf00      	nop
  }

  return ret;
 80040f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80040fa:	4618      	mov	r0, r3
 80040fc:	3710      	adds	r7, #16
 80040fe:	46bd      	mov	sp, r7
 8004100:	bd80      	pop	{r7, pc}
	...

08004104 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	b084      	sub	sp, #16
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
 800410c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800410e:	2300      	movs	r3, #0
 8004110:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8004112:	2300      	movs	r3, #0
 8004114:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8004116:	2300      	movs	r3, #0
 8004118:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	885b      	ldrh	r3, [r3, #2]
 800411e:	0a1b      	lsrs	r3, r3, #8
 8004120:	b29b      	uxth	r3, r3
 8004122:	3b01      	subs	r3, #1
 8004124:	2b06      	cmp	r3, #6
 8004126:	f200 8128 	bhi.w	800437a <USBD_GetDescriptor+0x276>
 800412a:	a201      	add	r2, pc, #4	; (adr r2, 8004130 <USBD_GetDescriptor+0x2c>)
 800412c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004130:	0800414d 	.word	0x0800414d
 8004134:	08004165 	.word	0x08004165
 8004138:	080041a5 	.word	0x080041a5
 800413c:	0800437b 	.word	0x0800437b
 8004140:	0800437b 	.word	0x0800437b
 8004144:	0800431b 	.word	0x0800431b
 8004148:	08004347 	.word	0x08004347
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	687a      	ldr	r2, [r7, #4]
 8004156:	7c12      	ldrb	r2, [r2, #16]
 8004158:	f107 0108 	add.w	r1, r7, #8
 800415c:	4610      	mov	r0, r2
 800415e:	4798      	blx	r3
 8004160:	60f8      	str	r0, [r7, #12]
      break;
 8004162:	e112      	b.n	800438a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	7c1b      	ldrb	r3, [r3, #16]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d10d      	bne.n	8004188 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004172:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004174:	f107 0208 	add.w	r2, r7, #8
 8004178:	4610      	mov	r0, r2
 800417a:	4798      	blx	r3
 800417c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	3301      	adds	r3, #1
 8004182:	2202      	movs	r2, #2
 8004184:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8004186:	e100      	b.n	800438a <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800418e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004190:	f107 0208 	add.w	r2, r7, #8
 8004194:	4610      	mov	r0, r2
 8004196:	4798      	blx	r3
 8004198:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	3301      	adds	r3, #1
 800419e:	2202      	movs	r2, #2
 80041a0:	701a      	strb	r2, [r3, #0]
      break;
 80041a2:	e0f2      	b.n	800438a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	885b      	ldrh	r3, [r3, #2]
 80041a8:	b2db      	uxtb	r3, r3
 80041aa:	2b05      	cmp	r3, #5
 80041ac:	f200 80ac 	bhi.w	8004308 <USBD_GetDescriptor+0x204>
 80041b0:	a201      	add	r2, pc, #4	; (adr r2, 80041b8 <USBD_GetDescriptor+0xb4>)
 80041b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041b6:	bf00      	nop
 80041b8:	080041d1 	.word	0x080041d1
 80041bc:	08004205 	.word	0x08004205
 80041c0:	08004239 	.word	0x08004239
 80041c4:	0800426d 	.word	0x0800426d
 80041c8:	080042a1 	.word	0x080042a1
 80041cc:	080042d5 	.word	0x080042d5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80041d6:	685b      	ldr	r3, [r3, #4]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d00b      	beq.n	80041f4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80041e2:	685b      	ldr	r3, [r3, #4]
 80041e4:	687a      	ldr	r2, [r7, #4]
 80041e6:	7c12      	ldrb	r2, [r2, #16]
 80041e8:	f107 0108 	add.w	r1, r7, #8
 80041ec:	4610      	mov	r0, r2
 80041ee:	4798      	blx	r3
 80041f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80041f2:	e091      	b.n	8004318 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80041f4:	6839      	ldr	r1, [r7, #0]
 80041f6:	6878      	ldr	r0, [r7, #4]
 80041f8:	f000 fa94 	bl	8004724 <USBD_CtlError>
            err++;
 80041fc:	7afb      	ldrb	r3, [r7, #11]
 80041fe:	3301      	adds	r3, #1
 8004200:	72fb      	strb	r3, [r7, #11]
          break;
 8004202:	e089      	b.n	8004318 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800420a:	689b      	ldr	r3, [r3, #8]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d00b      	beq.n	8004228 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004216:	689b      	ldr	r3, [r3, #8]
 8004218:	687a      	ldr	r2, [r7, #4]
 800421a:	7c12      	ldrb	r2, [r2, #16]
 800421c:	f107 0108 	add.w	r1, r7, #8
 8004220:	4610      	mov	r0, r2
 8004222:	4798      	blx	r3
 8004224:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8004226:	e077      	b.n	8004318 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8004228:	6839      	ldr	r1, [r7, #0]
 800422a:	6878      	ldr	r0, [r7, #4]
 800422c:	f000 fa7a 	bl	8004724 <USBD_CtlError>
            err++;
 8004230:	7afb      	ldrb	r3, [r7, #11]
 8004232:	3301      	adds	r3, #1
 8004234:	72fb      	strb	r3, [r7, #11]
          break;
 8004236:	e06f      	b.n	8004318 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800423e:	68db      	ldr	r3, [r3, #12]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d00b      	beq.n	800425c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800424a:	68db      	ldr	r3, [r3, #12]
 800424c:	687a      	ldr	r2, [r7, #4]
 800424e:	7c12      	ldrb	r2, [r2, #16]
 8004250:	f107 0108 	add.w	r1, r7, #8
 8004254:	4610      	mov	r0, r2
 8004256:	4798      	blx	r3
 8004258:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800425a:	e05d      	b.n	8004318 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800425c:	6839      	ldr	r1, [r7, #0]
 800425e:	6878      	ldr	r0, [r7, #4]
 8004260:	f000 fa60 	bl	8004724 <USBD_CtlError>
            err++;
 8004264:	7afb      	ldrb	r3, [r7, #11]
 8004266:	3301      	adds	r3, #1
 8004268:	72fb      	strb	r3, [r7, #11]
          break;
 800426a:	e055      	b.n	8004318 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004272:	691b      	ldr	r3, [r3, #16]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d00b      	beq.n	8004290 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800427e:	691b      	ldr	r3, [r3, #16]
 8004280:	687a      	ldr	r2, [r7, #4]
 8004282:	7c12      	ldrb	r2, [r2, #16]
 8004284:	f107 0108 	add.w	r1, r7, #8
 8004288:	4610      	mov	r0, r2
 800428a:	4798      	blx	r3
 800428c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800428e:	e043      	b.n	8004318 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8004290:	6839      	ldr	r1, [r7, #0]
 8004292:	6878      	ldr	r0, [r7, #4]
 8004294:	f000 fa46 	bl	8004724 <USBD_CtlError>
            err++;
 8004298:	7afb      	ldrb	r3, [r7, #11]
 800429a:	3301      	adds	r3, #1
 800429c:	72fb      	strb	r3, [r7, #11]
          break;
 800429e:	e03b      	b.n	8004318 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80042a6:	695b      	ldr	r3, [r3, #20]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d00b      	beq.n	80042c4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80042b2:	695b      	ldr	r3, [r3, #20]
 80042b4:	687a      	ldr	r2, [r7, #4]
 80042b6:	7c12      	ldrb	r2, [r2, #16]
 80042b8:	f107 0108 	add.w	r1, r7, #8
 80042bc:	4610      	mov	r0, r2
 80042be:	4798      	blx	r3
 80042c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80042c2:	e029      	b.n	8004318 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80042c4:	6839      	ldr	r1, [r7, #0]
 80042c6:	6878      	ldr	r0, [r7, #4]
 80042c8:	f000 fa2c 	bl	8004724 <USBD_CtlError>
            err++;
 80042cc:	7afb      	ldrb	r3, [r7, #11]
 80042ce:	3301      	adds	r3, #1
 80042d0:	72fb      	strb	r3, [r7, #11]
          break;
 80042d2:	e021      	b.n	8004318 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80042da:	699b      	ldr	r3, [r3, #24]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d00b      	beq.n	80042f8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80042e6:	699b      	ldr	r3, [r3, #24]
 80042e8:	687a      	ldr	r2, [r7, #4]
 80042ea:	7c12      	ldrb	r2, [r2, #16]
 80042ec:	f107 0108 	add.w	r1, r7, #8
 80042f0:	4610      	mov	r0, r2
 80042f2:	4798      	blx	r3
 80042f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80042f6:	e00f      	b.n	8004318 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80042f8:	6839      	ldr	r1, [r7, #0]
 80042fa:	6878      	ldr	r0, [r7, #4]
 80042fc:	f000 fa12 	bl	8004724 <USBD_CtlError>
            err++;
 8004300:	7afb      	ldrb	r3, [r7, #11]
 8004302:	3301      	adds	r3, #1
 8004304:	72fb      	strb	r3, [r7, #11]
          break;
 8004306:	e007      	b.n	8004318 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8004308:	6839      	ldr	r1, [r7, #0]
 800430a:	6878      	ldr	r0, [r7, #4]
 800430c:	f000 fa0a 	bl	8004724 <USBD_CtlError>
          err++;
 8004310:	7afb      	ldrb	r3, [r7, #11]
 8004312:	3301      	adds	r3, #1
 8004314:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8004316:	e038      	b.n	800438a <USBD_GetDescriptor+0x286>
 8004318:	e037      	b.n	800438a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	7c1b      	ldrb	r3, [r3, #16]
 800431e:	2b00      	cmp	r3, #0
 8004320:	d109      	bne.n	8004336 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004328:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800432a:	f107 0208 	add.w	r2, r7, #8
 800432e:	4610      	mov	r0, r2
 8004330:	4798      	blx	r3
 8004332:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8004334:	e029      	b.n	800438a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8004336:	6839      	ldr	r1, [r7, #0]
 8004338:	6878      	ldr	r0, [r7, #4]
 800433a:	f000 f9f3 	bl	8004724 <USBD_CtlError>
        err++;
 800433e:	7afb      	ldrb	r3, [r7, #11]
 8004340:	3301      	adds	r3, #1
 8004342:	72fb      	strb	r3, [r7, #11]
      break;
 8004344:	e021      	b.n	800438a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	7c1b      	ldrb	r3, [r3, #16]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d10d      	bne.n	800436a <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004356:	f107 0208 	add.w	r2, r7, #8
 800435a:	4610      	mov	r0, r2
 800435c:	4798      	blx	r3
 800435e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	3301      	adds	r3, #1
 8004364:	2207      	movs	r2, #7
 8004366:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8004368:	e00f      	b.n	800438a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800436a:	6839      	ldr	r1, [r7, #0]
 800436c:	6878      	ldr	r0, [r7, #4]
 800436e:	f000 f9d9 	bl	8004724 <USBD_CtlError>
        err++;
 8004372:	7afb      	ldrb	r3, [r7, #11]
 8004374:	3301      	adds	r3, #1
 8004376:	72fb      	strb	r3, [r7, #11]
      break;
 8004378:	e007      	b.n	800438a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800437a:	6839      	ldr	r1, [r7, #0]
 800437c:	6878      	ldr	r0, [r7, #4]
 800437e:	f000 f9d1 	bl	8004724 <USBD_CtlError>
      err++;
 8004382:	7afb      	ldrb	r3, [r7, #11]
 8004384:	3301      	adds	r3, #1
 8004386:	72fb      	strb	r3, [r7, #11]
      break;
 8004388:	bf00      	nop
  }

  if (err != 0U)
 800438a:	7afb      	ldrb	r3, [r7, #11]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d11c      	bne.n	80043ca <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8004390:	893b      	ldrh	r3, [r7, #8]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d011      	beq.n	80043ba <USBD_GetDescriptor+0x2b6>
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	88db      	ldrh	r3, [r3, #6]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d00d      	beq.n	80043ba <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	88da      	ldrh	r2, [r3, #6]
 80043a2:	893b      	ldrh	r3, [r7, #8]
 80043a4:	4293      	cmp	r3, r2
 80043a6:	bf28      	it	cs
 80043a8:	4613      	movcs	r3, r2
 80043aa:	b29b      	uxth	r3, r3
 80043ac:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80043ae:	893b      	ldrh	r3, [r7, #8]
 80043b0:	461a      	mov	r2, r3
 80043b2:	68f9      	ldr	r1, [r7, #12]
 80043b4:	6878      	ldr	r0, [r7, #4]
 80043b6:	f000 fa1f 	bl	80047f8 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	88db      	ldrh	r3, [r3, #6]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d104      	bne.n	80043cc <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 80043c2:	6878      	ldr	r0, [r7, #4]
 80043c4:	f000 fa58 	bl	8004878 <USBD_CtlSendStatus>
 80043c8:	e000      	b.n	80043cc <USBD_GetDescriptor+0x2c8>
    return;
 80043ca:	bf00      	nop
    }
  }
}
 80043cc:	3710      	adds	r7, #16
 80043ce:	46bd      	mov	sp, r7
 80043d0:	bd80      	pop	{r7, pc}
 80043d2:	bf00      	nop

080043d4 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b084      	sub	sp, #16
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
 80043dc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	889b      	ldrh	r3, [r3, #4]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d130      	bne.n	8004448 <USBD_SetAddress+0x74>
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	88db      	ldrh	r3, [r3, #6]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d12c      	bne.n	8004448 <USBD_SetAddress+0x74>
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	885b      	ldrh	r3, [r3, #2]
 80043f2:	2b7f      	cmp	r3, #127	; 0x7f
 80043f4:	d828      	bhi.n	8004448 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	885b      	ldrh	r3, [r3, #2]
 80043fa:	b2db      	uxtb	r3, r3
 80043fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004400:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004408:	2b03      	cmp	r3, #3
 800440a:	d104      	bne.n	8004416 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800440c:	6839      	ldr	r1, [r7, #0]
 800440e:	6878      	ldr	r0, [r7, #4]
 8004410:	f000 f988 	bl	8004724 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004414:	e01c      	b.n	8004450 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	7bfa      	ldrb	r2, [r7, #15]
 800441a:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800441e:	7bfb      	ldrb	r3, [r7, #15]
 8004420:	4619      	mov	r1, r3
 8004422:	6878      	ldr	r0, [r7, #4]
 8004424:	f000 fd49 	bl	8004eba <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8004428:	6878      	ldr	r0, [r7, #4]
 800442a:	f000 fa25 	bl	8004878 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800442e:	7bfb      	ldrb	r3, [r7, #15]
 8004430:	2b00      	cmp	r3, #0
 8004432:	d004      	beq.n	800443e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2202      	movs	r2, #2
 8004438:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800443c:	e008      	b.n	8004450 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2201      	movs	r2, #1
 8004442:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004446:	e003      	b.n	8004450 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8004448:	6839      	ldr	r1, [r7, #0]
 800444a:	6878      	ldr	r0, [r7, #4]
 800444c:	f000 f96a 	bl	8004724 <USBD_CtlError>
  }
}
 8004450:	bf00      	nop
 8004452:	3710      	adds	r7, #16
 8004454:	46bd      	mov	sp, r7
 8004456:	bd80      	pop	{r7, pc}

08004458 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b082      	sub	sp, #8
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
 8004460:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	885b      	ldrh	r3, [r3, #2]
 8004466:	b2da      	uxtb	r2, r3
 8004468:	4b41      	ldr	r3, [pc, #260]	; (8004570 <USBD_SetConfig+0x118>)
 800446a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800446c:	4b40      	ldr	r3, [pc, #256]	; (8004570 <USBD_SetConfig+0x118>)
 800446e:	781b      	ldrb	r3, [r3, #0]
 8004470:	2b01      	cmp	r3, #1
 8004472:	d904      	bls.n	800447e <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8004474:	6839      	ldr	r1, [r7, #0]
 8004476:	6878      	ldr	r0, [r7, #4]
 8004478:	f000 f954 	bl	8004724 <USBD_CtlError>
 800447c:	e075      	b.n	800456a <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004484:	2b02      	cmp	r3, #2
 8004486:	d002      	beq.n	800448e <USBD_SetConfig+0x36>
 8004488:	2b03      	cmp	r3, #3
 800448a:	d023      	beq.n	80044d4 <USBD_SetConfig+0x7c>
 800448c:	e062      	b.n	8004554 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800448e:	4b38      	ldr	r3, [pc, #224]	; (8004570 <USBD_SetConfig+0x118>)
 8004490:	781b      	ldrb	r3, [r3, #0]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d01a      	beq.n	80044cc <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8004496:	4b36      	ldr	r3, [pc, #216]	; (8004570 <USBD_SetConfig+0x118>)
 8004498:	781b      	ldrb	r3, [r3, #0]
 800449a:	461a      	mov	r2, r3
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2203      	movs	r2, #3
 80044a4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80044a8:	4b31      	ldr	r3, [pc, #196]	; (8004570 <USBD_SetConfig+0x118>)
 80044aa:	781b      	ldrb	r3, [r3, #0]
 80044ac:	4619      	mov	r1, r3
 80044ae:	6878      	ldr	r0, [r7, #4]
 80044b0:	f7ff f9f4 	bl	800389c <USBD_SetClassConfig>
 80044b4:	4603      	mov	r3, r0
 80044b6:	2b02      	cmp	r3, #2
 80044b8:	d104      	bne.n	80044c4 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 80044ba:	6839      	ldr	r1, [r7, #0]
 80044bc:	6878      	ldr	r0, [r7, #4]
 80044be:	f000 f931 	bl	8004724 <USBD_CtlError>
            return;
 80044c2:	e052      	b.n	800456a <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 80044c4:	6878      	ldr	r0, [r7, #4]
 80044c6:	f000 f9d7 	bl	8004878 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80044ca:	e04e      	b.n	800456a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80044cc:	6878      	ldr	r0, [r7, #4]
 80044ce:	f000 f9d3 	bl	8004878 <USBD_CtlSendStatus>
        break;
 80044d2:	e04a      	b.n	800456a <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 80044d4:	4b26      	ldr	r3, [pc, #152]	; (8004570 <USBD_SetConfig+0x118>)
 80044d6:	781b      	ldrb	r3, [r3, #0]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d112      	bne.n	8004502 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2202      	movs	r2, #2
 80044e0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 80044e4:	4b22      	ldr	r3, [pc, #136]	; (8004570 <USBD_SetConfig+0x118>)
 80044e6:	781b      	ldrb	r3, [r3, #0]
 80044e8:	461a      	mov	r2, r3
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 80044ee:	4b20      	ldr	r3, [pc, #128]	; (8004570 <USBD_SetConfig+0x118>)
 80044f0:	781b      	ldrb	r3, [r3, #0]
 80044f2:	4619      	mov	r1, r3
 80044f4:	6878      	ldr	r0, [r7, #4]
 80044f6:	f7ff f9f0 	bl	80038da <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 80044fa:	6878      	ldr	r0, [r7, #4]
 80044fc:	f000 f9bc 	bl	8004878 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8004500:	e033      	b.n	800456a <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8004502:	4b1b      	ldr	r3, [pc, #108]	; (8004570 <USBD_SetConfig+0x118>)
 8004504:	781b      	ldrb	r3, [r3, #0]
 8004506:	461a      	mov	r2, r3
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	685b      	ldr	r3, [r3, #4]
 800450c:	429a      	cmp	r2, r3
 800450e:	d01d      	beq.n	800454c <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	685b      	ldr	r3, [r3, #4]
 8004514:	b2db      	uxtb	r3, r3
 8004516:	4619      	mov	r1, r3
 8004518:	6878      	ldr	r0, [r7, #4]
 800451a:	f7ff f9de 	bl	80038da <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800451e:	4b14      	ldr	r3, [pc, #80]	; (8004570 <USBD_SetConfig+0x118>)
 8004520:	781b      	ldrb	r3, [r3, #0]
 8004522:	461a      	mov	r2, r3
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8004528:	4b11      	ldr	r3, [pc, #68]	; (8004570 <USBD_SetConfig+0x118>)
 800452a:	781b      	ldrb	r3, [r3, #0]
 800452c:	4619      	mov	r1, r3
 800452e:	6878      	ldr	r0, [r7, #4]
 8004530:	f7ff f9b4 	bl	800389c <USBD_SetClassConfig>
 8004534:	4603      	mov	r3, r0
 8004536:	2b02      	cmp	r3, #2
 8004538:	d104      	bne.n	8004544 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800453a:	6839      	ldr	r1, [r7, #0]
 800453c:	6878      	ldr	r0, [r7, #4]
 800453e:	f000 f8f1 	bl	8004724 <USBD_CtlError>
            return;
 8004542:	e012      	b.n	800456a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8004544:	6878      	ldr	r0, [r7, #4]
 8004546:	f000 f997 	bl	8004878 <USBD_CtlSendStatus>
        break;
 800454a:	e00e      	b.n	800456a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800454c:	6878      	ldr	r0, [r7, #4]
 800454e:	f000 f993 	bl	8004878 <USBD_CtlSendStatus>
        break;
 8004552:	e00a      	b.n	800456a <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8004554:	6839      	ldr	r1, [r7, #0]
 8004556:	6878      	ldr	r0, [r7, #4]
 8004558:	f000 f8e4 	bl	8004724 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800455c:	4b04      	ldr	r3, [pc, #16]	; (8004570 <USBD_SetConfig+0x118>)
 800455e:	781b      	ldrb	r3, [r3, #0]
 8004560:	4619      	mov	r1, r3
 8004562:	6878      	ldr	r0, [r7, #4]
 8004564:	f7ff f9b9 	bl	80038da <USBD_ClrClassConfig>
        break;
 8004568:	bf00      	nop
    }
  }
}
 800456a:	3708      	adds	r7, #8
 800456c:	46bd      	mov	sp, r7
 800456e:	bd80      	pop	{r7, pc}
 8004570:	20000180 	.word	0x20000180

08004574 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b082      	sub	sp, #8
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
 800457c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	88db      	ldrh	r3, [r3, #6]
 8004582:	2b01      	cmp	r3, #1
 8004584:	d004      	beq.n	8004590 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8004586:	6839      	ldr	r1, [r7, #0]
 8004588:	6878      	ldr	r0, [r7, #4]
 800458a:	f000 f8cb 	bl	8004724 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800458e:	e021      	b.n	80045d4 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004596:	2b01      	cmp	r3, #1
 8004598:	db17      	blt.n	80045ca <USBD_GetConfig+0x56>
 800459a:	2b02      	cmp	r3, #2
 800459c:	dd02      	ble.n	80045a4 <USBD_GetConfig+0x30>
 800459e:	2b03      	cmp	r3, #3
 80045a0:	d00b      	beq.n	80045ba <USBD_GetConfig+0x46>
 80045a2:	e012      	b.n	80045ca <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2200      	movs	r2, #0
 80045a8:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	3308      	adds	r3, #8
 80045ae:	2201      	movs	r2, #1
 80045b0:	4619      	mov	r1, r3
 80045b2:	6878      	ldr	r0, [r7, #4]
 80045b4:	f000 f920 	bl	80047f8 <USBD_CtlSendData>
        break;
 80045b8:	e00c      	b.n	80045d4 <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	3304      	adds	r3, #4
 80045be:	2201      	movs	r2, #1
 80045c0:	4619      	mov	r1, r3
 80045c2:	6878      	ldr	r0, [r7, #4]
 80045c4:	f000 f918 	bl	80047f8 <USBD_CtlSendData>
        break;
 80045c8:	e004      	b.n	80045d4 <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 80045ca:	6839      	ldr	r1, [r7, #0]
 80045cc:	6878      	ldr	r0, [r7, #4]
 80045ce:	f000 f8a9 	bl	8004724 <USBD_CtlError>
        break;
 80045d2:	bf00      	nop
}
 80045d4:	bf00      	nop
 80045d6:	3708      	adds	r7, #8
 80045d8:	46bd      	mov	sp, r7
 80045da:	bd80      	pop	{r7, pc}

080045dc <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b082      	sub	sp, #8
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
 80045e4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80045ec:	3b01      	subs	r3, #1
 80045ee:	2b02      	cmp	r3, #2
 80045f0:	d81e      	bhi.n	8004630 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	88db      	ldrh	r3, [r3, #6]
 80045f6:	2b02      	cmp	r3, #2
 80045f8:	d004      	beq.n	8004604 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 80045fa:	6839      	ldr	r1, [r7, #0]
 80045fc:	6878      	ldr	r0, [r7, #4]
 80045fe:	f000 f891 	bl	8004724 <USBD_CtlError>
        break;
 8004602:	e01a      	b.n	800463a <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2201      	movs	r2, #1
 8004608:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8004610:	2b00      	cmp	r3, #0
 8004612:	d005      	beq.n	8004620 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	68db      	ldr	r3, [r3, #12]
 8004618:	f043 0202 	orr.w	r2, r3, #2
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	330c      	adds	r3, #12
 8004624:	2202      	movs	r2, #2
 8004626:	4619      	mov	r1, r3
 8004628:	6878      	ldr	r0, [r7, #4]
 800462a:	f000 f8e5 	bl	80047f8 <USBD_CtlSendData>
      break;
 800462e:	e004      	b.n	800463a <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8004630:	6839      	ldr	r1, [r7, #0]
 8004632:	6878      	ldr	r0, [r7, #4]
 8004634:	f000 f876 	bl	8004724 <USBD_CtlError>
      break;
 8004638:	bf00      	nop
  }
}
 800463a:	bf00      	nop
 800463c:	3708      	adds	r7, #8
 800463e:	46bd      	mov	sp, r7
 8004640:	bd80      	pop	{r7, pc}

08004642 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8004642:	b580      	push	{r7, lr}
 8004644:	b082      	sub	sp, #8
 8004646:	af00      	add	r7, sp, #0
 8004648:	6078      	str	r0, [r7, #4]
 800464a:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	885b      	ldrh	r3, [r3, #2]
 8004650:	2b01      	cmp	r3, #1
 8004652:	d106      	bne.n	8004662 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2201      	movs	r2, #1
 8004658:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800465c:	6878      	ldr	r0, [r7, #4]
 800465e:	f000 f90b 	bl	8004878 <USBD_CtlSendStatus>
  }
}
 8004662:	bf00      	nop
 8004664:	3708      	adds	r7, #8
 8004666:	46bd      	mov	sp, r7
 8004668:	bd80      	pop	{r7, pc}

0800466a <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800466a:	b580      	push	{r7, lr}
 800466c:	b082      	sub	sp, #8
 800466e:	af00      	add	r7, sp, #0
 8004670:	6078      	str	r0, [r7, #4]
 8004672:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800467a:	3b01      	subs	r3, #1
 800467c:	2b02      	cmp	r3, #2
 800467e:	d80b      	bhi.n	8004698 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	885b      	ldrh	r3, [r3, #2]
 8004684:	2b01      	cmp	r3, #1
 8004686:	d10c      	bne.n	80046a2 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2200      	movs	r2, #0
 800468c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8004690:	6878      	ldr	r0, [r7, #4]
 8004692:	f000 f8f1 	bl	8004878 <USBD_CtlSendStatus>
      }
      break;
 8004696:	e004      	b.n	80046a2 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8004698:	6839      	ldr	r1, [r7, #0]
 800469a:	6878      	ldr	r0, [r7, #4]
 800469c:	f000 f842 	bl	8004724 <USBD_CtlError>
      break;
 80046a0:	e000      	b.n	80046a4 <USBD_ClrFeature+0x3a>
      break;
 80046a2:	bf00      	nop
  }
}
 80046a4:	bf00      	nop
 80046a6:	3708      	adds	r7, #8
 80046a8:	46bd      	mov	sp, r7
 80046aa:	bd80      	pop	{r7, pc}

080046ac <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80046ac:	b480      	push	{r7}
 80046ae:	b083      	sub	sp, #12
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
 80046b4:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	781a      	ldrb	r2, [r3, #0]
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	785a      	ldrb	r2, [r3, #1]
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	3302      	adds	r3, #2
 80046ca:	781b      	ldrb	r3, [r3, #0]
 80046cc:	b29a      	uxth	r2, r3
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	3303      	adds	r3, #3
 80046d2:	781b      	ldrb	r3, [r3, #0]
 80046d4:	b29b      	uxth	r3, r3
 80046d6:	021b      	lsls	r3, r3, #8
 80046d8:	b29b      	uxth	r3, r3
 80046da:	4413      	add	r3, r2
 80046dc:	b29a      	uxth	r2, r3
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	3304      	adds	r3, #4
 80046e6:	781b      	ldrb	r3, [r3, #0]
 80046e8:	b29a      	uxth	r2, r3
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	3305      	adds	r3, #5
 80046ee:	781b      	ldrb	r3, [r3, #0]
 80046f0:	b29b      	uxth	r3, r3
 80046f2:	021b      	lsls	r3, r3, #8
 80046f4:	b29b      	uxth	r3, r3
 80046f6:	4413      	add	r3, r2
 80046f8:	b29a      	uxth	r2, r3
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	3306      	adds	r3, #6
 8004702:	781b      	ldrb	r3, [r3, #0]
 8004704:	b29a      	uxth	r2, r3
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	3307      	adds	r3, #7
 800470a:	781b      	ldrb	r3, [r3, #0]
 800470c:	b29b      	uxth	r3, r3
 800470e:	021b      	lsls	r3, r3, #8
 8004710:	b29b      	uxth	r3, r3
 8004712:	4413      	add	r3, r2
 8004714:	b29a      	uxth	r2, r3
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	80da      	strh	r2, [r3, #6]

}
 800471a:	bf00      	nop
 800471c:	370c      	adds	r7, #12
 800471e:	46bd      	mov	sp, r7
 8004720:	bc80      	pop	{r7}
 8004722:	4770      	bx	lr

08004724 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b082      	sub	sp, #8
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
 800472c:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800472e:	2180      	movs	r1, #128	; 0x80
 8004730:	6878      	ldr	r0, [r7, #4]
 8004732:	f000 fb5f 	bl	8004df4 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8004736:	2100      	movs	r1, #0
 8004738:	6878      	ldr	r0, [r7, #4]
 800473a:	f000 fb5b 	bl	8004df4 <USBD_LL_StallEP>
}
 800473e:	bf00      	nop
 8004740:	3708      	adds	r7, #8
 8004742:	46bd      	mov	sp, r7
 8004744:	bd80      	pop	{r7, pc}

08004746 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8004746:	b580      	push	{r7, lr}
 8004748:	b086      	sub	sp, #24
 800474a:	af00      	add	r7, sp, #0
 800474c:	60f8      	str	r0, [r7, #12]
 800474e:	60b9      	str	r1, [r7, #8]
 8004750:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8004752:	2300      	movs	r3, #0
 8004754:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d032      	beq.n	80047c2 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800475c:	68f8      	ldr	r0, [r7, #12]
 800475e:	f000 f834 	bl	80047ca <USBD_GetLen>
 8004762:	4603      	mov	r3, r0
 8004764:	3301      	adds	r3, #1
 8004766:	b29b      	uxth	r3, r3
 8004768:	005b      	lsls	r3, r3, #1
 800476a:	b29a      	uxth	r2, r3
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8004770:	7dfb      	ldrb	r3, [r7, #23]
 8004772:	1c5a      	adds	r2, r3, #1
 8004774:	75fa      	strb	r2, [r7, #23]
 8004776:	461a      	mov	r2, r3
 8004778:	68bb      	ldr	r3, [r7, #8]
 800477a:	4413      	add	r3, r2
 800477c:	687a      	ldr	r2, [r7, #4]
 800477e:	7812      	ldrb	r2, [r2, #0]
 8004780:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8004782:	7dfb      	ldrb	r3, [r7, #23]
 8004784:	1c5a      	adds	r2, r3, #1
 8004786:	75fa      	strb	r2, [r7, #23]
 8004788:	461a      	mov	r2, r3
 800478a:	68bb      	ldr	r3, [r7, #8]
 800478c:	4413      	add	r3, r2
 800478e:	2203      	movs	r2, #3
 8004790:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8004792:	e012      	b.n	80047ba <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	1c5a      	adds	r2, r3, #1
 8004798:	60fa      	str	r2, [r7, #12]
 800479a:	7dfa      	ldrb	r2, [r7, #23]
 800479c:	1c51      	adds	r1, r2, #1
 800479e:	75f9      	strb	r1, [r7, #23]
 80047a0:	4611      	mov	r1, r2
 80047a2:	68ba      	ldr	r2, [r7, #8]
 80047a4:	440a      	add	r2, r1
 80047a6:	781b      	ldrb	r3, [r3, #0]
 80047a8:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 80047aa:	7dfb      	ldrb	r3, [r7, #23]
 80047ac:	1c5a      	adds	r2, r3, #1
 80047ae:	75fa      	strb	r2, [r7, #23]
 80047b0:	461a      	mov	r2, r3
 80047b2:	68bb      	ldr	r3, [r7, #8]
 80047b4:	4413      	add	r3, r2
 80047b6:	2200      	movs	r2, #0
 80047b8:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	781b      	ldrb	r3, [r3, #0]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d1e8      	bne.n	8004794 <USBD_GetString+0x4e>
    }
  }
}
 80047c2:	bf00      	nop
 80047c4:	3718      	adds	r7, #24
 80047c6:	46bd      	mov	sp, r7
 80047c8:	bd80      	pop	{r7, pc}

080047ca <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80047ca:	b480      	push	{r7}
 80047cc:	b085      	sub	sp, #20
 80047ce:	af00      	add	r7, sp, #0
 80047d0:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80047d2:	2300      	movs	r3, #0
 80047d4:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 80047d6:	e005      	b.n	80047e4 <USBD_GetLen+0x1a>
  {
    len++;
 80047d8:	7bfb      	ldrb	r3, [r7, #15]
 80047da:	3301      	adds	r3, #1
 80047dc:	73fb      	strb	r3, [r7, #15]
    buf++;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	3301      	adds	r3, #1
 80047e2:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	781b      	ldrb	r3, [r3, #0]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d1f5      	bne.n	80047d8 <USBD_GetLen+0xe>
  }

  return len;
 80047ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80047ee:	4618      	mov	r0, r3
 80047f0:	3714      	adds	r7, #20
 80047f2:	46bd      	mov	sp, r7
 80047f4:	bc80      	pop	{r7}
 80047f6:	4770      	bx	lr

080047f8 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b084      	sub	sp, #16
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	60f8      	str	r0, [r7, #12]
 8004800:	60b9      	str	r1, [r7, #8]
 8004802:	4613      	mov	r3, r2
 8004804:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	2202      	movs	r2, #2
 800480a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800480e:	88fa      	ldrh	r2, [r7, #6]
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8004814:	88fa      	ldrh	r2, [r7, #6]
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800481a:	88fb      	ldrh	r3, [r7, #6]
 800481c:	68ba      	ldr	r2, [r7, #8]
 800481e:	2100      	movs	r1, #0
 8004820:	68f8      	ldr	r0, [r7, #12]
 8004822:	f000 fb69 	bl	8004ef8 <USBD_LL_Transmit>

  return USBD_OK;
 8004826:	2300      	movs	r3, #0
}
 8004828:	4618      	mov	r0, r3
 800482a:	3710      	adds	r7, #16
 800482c:	46bd      	mov	sp, r7
 800482e:	bd80      	pop	{r7, pc}

08004830 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8004830:	b580      	push	{r7, lr}
 8004832:	b084      	sub	sp, #16
 8004834:	af00      	add	r7, sp, #0
 8004836:	60f8      	str	r0, [r7, #12]
 8004838:	60b9      	str	r1, [r7, #8]
 800483a:	4613      	mov	r3, r2
 800483c:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800483e:	88fb      	ldrh	r3, [r7, #6]
 8004840:	68ba      	ldr	r2, [r7, #8]
 8004842:	2100      	movs	r1, #0
 8004844:	68f8      	ldr	r0, [r7, #12]
 8004846:	f000 fb57 	bl	8004ef8 <USBD_LL_Transmit>

  return USBD_OK;
 800484a:	2300      	movs	r3, #0
}
 800484c:	4618      	mov	r0, r3
 800484e:	3710      	adds	r7, #16
 8004850:	46bd      	mov	sp, r7
 8004852:	bd80      	pop	{r7, pc}

08004854 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8004854:	b580      	push	{r7, lr}
 8004856:	b084      	sub	sp, #16
 8004858:	af00      	add	r7, sp, #0
 800485a:	60f8      	str	r0, [r7, #12]
 800485c:	60b9      	str	r1, [r7, #8]
 800485e:	4613      	mov	r3, r2
 8004860:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8004862:	88fb      	ldrh	r3, [r7, #6]
 8004864:	68ba      	ldr	r2, [r7, #8]
 8004866:	2100      	movs	r1, #0
 8004868:	68f8      	ldr	r0, [r7, #12]
 800486a:	f000 fb68 	bl	8004f3e <USBD_LL_PrepareReceive>

  return USBD_OK;
 800486e:	2300      	movs	r3, #0
}
 8004870:	4618      	mov	r0, r3
 8004872:	3710      	adds	r7, #16
 8004874:	46bd      	mov	sp, r7
 8004876:	bd80      	pop	{r7, pc}

08004878 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b082      	sub	sp, #8
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2204      	movs	r2, #4
 8004884:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8004888:	2300      	movs	r3, #0
 800488a:	2200      	movs	r2, #0
 800488c:	2100      	movs	r1, #0
 800488e:	6878      	ldr	r0, [r7, #4]
 8004890:	f000 fb32 	bl	8004ef8 <USBD_LL_Transmit>

  return USBD_OK;
 8004894:	2300      	movs	r3, #0
}
 8004896:	4618      	mov	r0, r3
 8004898:	3708      	adds	r7, #8
 800489a:	46bd      	mov	sp, r7
 800489c:	bd80      	pop	{r7, pc}

0800489e <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800489e:	b580      	push	{r7, lr}
 80048a0:	b082      	sub	sp, #8
 80048a2:	af00      	add	r7, sp, #0
 80048a4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2205      	movs	r2, #5
 80048aa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80048ae:	2300      	movs	r3, #0
 80048b0:	2200      	movs	r2, #0
 80048b2:	2100      	movs	r1, #0
 80048b4:	6878      	ldr	r0, [r7, #4]
 80048b6:	f000 fb42 	bl	8004f3e <USBD_LL_PrepareReceive>

  return USBD_OK;
 80048ba:	2300      	movs	r3, #0
}
 80048bc:	4618      	mov	r0, r3
 80048be:	3708      	adds	r7, #8
 80048c0:	46bd      	mov	sp, r7
 80048c2:	bd80      	pop	{r7, pc}

080048c4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80048c8:	2200      	movs	r2, #0
 80048ca:	490e      	ldr	r1, [pc, #56]	; (8004904 <MX_USB_DEVICE_Init+0x40>)
 80048cc:	480e      	ldr	r0, [pc, #56]	; (8004908 <MX_USB_DEVICE_Init+0x44>)
 80048ce:	f7fe ff8b 	bl	80037e8 <USBD_Init>
 80048d2:	4603      	mov	r3, r0
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d001      	beq.n	80048dc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80048d8:	f7fb fd72 	bl	80003c0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 80048dc:	490b      	ldr	r1, [pc, #44]	; (800490c <MX_USB_DEVICE_Init+0x48>)
 80048de:	480a      	ldr	r0, [pc, #40]	; (8004908 <MX_USB_DEVICE_Init+0x44>)
 80048e0:	f7fe ffad 	bl	800383e <USBD_RegisterClass>
 80048e4:	4603      	mov	r3, r0
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d001      	beq.n	80048ee <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80048ea:	f7fb fd69 	bl	80003c0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80048ee:	4806      	ldr	r0, [pc, #24]	; (8004908 <MX_USB_DEVICE_Init+0x44>)
 80048f0:	f7fe ffbe 	bl	8003870 <USBD_Start>
 80048f4:	4603      	mov	r3, r0
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d001      	beq.n	80048fe <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 80048fa:	f7fb fd61 	bl	80003c0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80048fe:	bf00      	nop
 8004900:	bd80      	pop	{r7, pc}
 8004902:	bf00      	nop
 8004904:	20000114 	.word	0x20000114
 8004908:	2000019c 	.word	0x2000019c
 800490c:	2000000c 	.word	0x2000000c

08004910 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8004910:	b480      	push	{r7}
 8004912:	b083      	sub	sp, #12
 8004914:	af00      	add	r7, sp, #0
 8004916:	4603      	mov	r3, r0
 8004918:	6039      	str	r1, [r7, #0]
 800491a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	2212      	movs	r2, #18
 8004920:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8004922:	4b03      	ldr	r3, [pc, #12]	; (8004930 <USBD_FS_DeviceDescriptor+0x20>)
}
 8004924:	4618      	mov	r0, r3
 8004926:	370c      	adds	r7, #12
 8004928:	46bd      	mov	sp, r7
 800492a:	bc80      	pop	{r7}
 800492c:	4770      	bx	lr
 800492e:	bf00      	nop
 8004930:	20000130 	.word	0x20000130

08004934 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8004934:	b480      	push	{r7}
 8004936:	b083      	sub	sp, #12
 8004938:	af00      	add	r7, sp, #0
 800493a:	4603      	mov	r3, r0
 800493c:	6039      	str	r1, [r7, #0]
 800493e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	2204      	movs	r2, #4
 8004944:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8004946:	4b03      	ldr	r3, [pc, #12]	; (8004954 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8004948:	4618      	mov	r0, r3
 800494a:	370c      	adds	r7, #12
 800494c:	46bd      	mov	sp, r7
 800494e:	bc80      	pop	{r7}
 8004950:	4770      	bx	lr
 8004952:	bf00      	nop
 8004954:	20000144 	.word	0x20000144

08004958 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8004958:	b580      	push	{r7, lr}
 800495a:	b082      	sub	sp, #8
 800495c:	af00      	add	r7, sp, #0
 800495e:	4603      	mov	r3, r0
 8004960:	6039      	str	r1, [r7, #0]
 8004962:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8004964:	79fb      	ldrb	r3, [r7, #7]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d105      	bne.n	8004976 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800496a:	683a      	ldr	r2, [r7, #0]
 800496c:	4907      	ldr	r1, [pc, #28]	; (800498c <USBD_FS_ProductStrDescriptor+0x34>)
 800496e:	4808      	ldr	r0, [pc, #32]	; (8004990 <USBD_FS_ProductStrDescriptor+0x38>)
 8004970:	f7ff fee9 	bl	8004746 <USBD_GetString>
 8004974:	e004      	b.n	8004980 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8004976:	683a      	ldr	r2, [r7, #0]
 8004978:	4904      	ldr	r1, [pc, #16]	; (800498c <USBD_FS_ProductStrDescriptor+0x34>)
 800497a:	4805      	ldr	r0, [pc, #20]	; (8004990 <USBD_FS_ProductStrDescriptor+0x38>)
 800497c:	f7ff fee3 	bl	8004746 <USBD_GetString>
  }
  return USBD_StrDesc;
 8004980:	4b02      	ldr	r3, [pc, #8]	; (800498c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8004982:	4618      	mov	r0, r3
 8004984:	3708      	adds	r7, #8
 8004986:	46bd      	mov	sp, r7
 8004988:	bd80      	pop	{r7, pc}
 800498a:	bf00      	nop
 800498c:	20000460 	.word	0x20000460
 8004990:	080050a0 	.word	0x080050a0

08004994 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8004994:	b580      	push	{r7, lr}
 8004996:	b082      	sub	sp, #8
 8004998:	af00      	add	r7, sp, #0
 800499a:	4603      	mov	r3, r0
 800499c:	6039      	str	r1, [r7, #0]
 800499e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80049a0:	683a      	ldr	r2, [r7, #0]
 80049a2:	4904      	ldr	r1, [pc, #16]	; (80049b4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80049a4:	4804      	ldr	r0, [pc, #16]	; (80049b8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80049a6:	f7ff fece 	bl	8004746 <USBD_GetString>
  return USBD_StrDesc;
 80049aa:	4b02      	ldr	r3, [pc, #8]	; (80049b4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80049ac:	4618      	mov	r0, r3
 80049ae:	3708      	adds	r7, #8
 80049b0:	46bd      	mov	sp, r7
 80049b2:	bd80      	pop	{r7, pc}
 80049b4:	20000460 	.word	0x20000460
 80049b8:	080050ac 	.word	0x080050ac

080049bc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	b082      	sub	sp, #8
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	4603      	mov	r3, r0
 80049c4:	6039      	str	r1, [r7, #0]
 80049c6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	221a      	movs	r2, #26
 80049cc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80049ce:	f000 f843 	bl	8004a58 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80049d2:	4b02      	ldr	r3, [pc, #8]	; (80049dc <USBD_FS_SerialStrDescriptor+0x20>)
}
 80049d4:	4618      	mov	r0, r3
 80049d6:	3708      	adds	r7, #8
 80049d8:	46bd      	mov	sp, r7
 80049da:	bd80      	pop	{r7, pc}
 80049dc:	20000148 	.word	0x20000148

080049e0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b082      	sub	sp, #8
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	4603      	mov	r3, r0
 80049e8:	6039      	str	r1, [r7, #0]
 80049ea:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80049ec:	79fb      	ldrb	r3, [r7, #7]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d105      	bne.n	80049fe <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80049f2:	683a      	ldr	r2, [r7, #0]
 80049f4:	4907      	ldr	r1, [pc, #28]	; (8004a14 <USBD_FS_ConfigStrDescriptor+0x34>)
 80049f6:	4808      	ldr	r0, [pc, #32]	; (8004a18 <USBD_FS_ConfigStrDescriptor+0x38>)
 80049f8:	f7ff fea5 	bl	8004746 <USBD_GetString>
 80049fc:	e004      	b.n	8004a08 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80049fe:	683a      	ldr	r2, [r7, #0]
 8004a00:	4904      	ldr	r1, [pc, #16]	; (8004a14 <USBD_FS_ConfigStrDescriptor+0x34>)
 8004a02:	4805      	ldr	r0, [pc, #20]	; (8004a18 <USBD_FS_ConfigStrDescriptor+0x38>)
 8004a04:	f7ff fe9f 	bl	8004746 <USBD_GetString>
  }
  return USBD_StrDesc;
 8004a08:	4b02      	ldr	r3, [pc, #8]	; (8004a14 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	3708      	adds	r7, #8
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	bd80      	pop	{r7, pc}
 8004a12:	bf00      	nop
 8004a14:	20000460 	.word	0x20000460
 8004a18:	080050bc 	.word	0x080050bc

08004a1c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b082      	sub	sp, #8
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	4603      	mov	r3, r0
 8004a24:	6039      	str	r1, [r7, #0]
 8004a26:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8004a28:	79fb      	ldrb	r3, [r7, #7]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d105      	bne.n	8004a3a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8004a2e:	683a      	ldr	r2, [r7, #0]
 8004a30:	4907      	ldr	r1, [pc, #28]	; (8004a50 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8004a32:	4808      	ldr	r0, [pc, #32]	; (8004a54 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8004a34:	f7ff fe87 	bl	8004746 <USBD_GetString>
 8004a38:	e004      	b.n	8004a44 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8004a3a:	683a      	ldr	r2, [r7, #0]
 8004a3c:	4904      	ldr	r1, [pc, #16]	; (8004a50 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8004a3e:	4805      	ldr	r0, [pc, #20]	; (8004a54 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8004a40:	f7ff fe81 	bl	8004746 <USBD_GetString>
  }
  return USBD_StrDesc;
 8004a44:	4b02      	ldr	r3, [pc, #8]	; (8004a50 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8004a46:	4618      	mov	r0, r3
 8004a48:	3708      	adds	r7, #8
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	bd80      	pop	{r7, pc}
 8004a4e:	bf00      	nop
 8004a50:	20000460 	.word	0x20000460
 8004a54:	080050c8 	.word	0x080050c8

08004a58 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b084      	sub	sp, #16
 8004a5c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8004a5e:	4b0f      	ldr	r3, [pc, #60]	; (8004a9c <Get_SerialNum+0x44>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8004a64:	4b0e      	ldr	r3, [pc, #56]	; (8004aa0 <Get_SerialNum+0x48>)
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8004a6a:	4b0e      	ldr	r3, [pc, #56]	; (8004aa4 <Get_SerialNum+0x4c>)
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8004a70:	68fa      	ldr	r2, [r7, #12]
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	4413      	add	r3, r2
 8004a76:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d009      	beq.n	8004a92 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8004a7e:	2208      	movs	r2, #8
 8004a80:	4909      	ldr	r1, [pc, #36]	; (8004aa8 <Get_SerialNum+0x50>)
 8004a82:	68f8      	ldr	r0, [r7, #12]
 8004a84:	f000 f814 	bl	8004ab0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8004a88:	2204      	movs	r2, #4
 8004a8a:	4908      	ldr	r1, [pc, #32]	; (8004aac <Get_SerialNum+0x54>)
 8004a8c:	68b8      	ldr	r0, [r7, #8]
 8004a8e:	f000 f80f 	bl	8004ab0 <IntToUnicode>
  }
}
 8004a92:	bf00      	nop
 8004a94:	3710      	adds	r7, #16
 8004a96:	46bd      	mov	sp, r7
 8004a98:	bd80      	pop	{r7, pc}
 8004a9a:	bf00      	nop
 8004a9c:	1ffff7e8 	.word	0x1ffff7e8
 8004aa0:	1ffff7ec 	.word	0x1ffff7ec
 8004aa4:	1ffff7f0 	.word	0x1ffff7f0
 8004aa8:	2000014a 	.word	0x2000014a
 8004aac:	2000015a 	.word	0x2000015a

08004ab0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8004ab0:	b480      	push	{r7}
 8004ab2:	b087      	sub	sp, #28
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	60f8      	str	r0, [r7, #12]
 8004ab8:	60b9      	str	r1, [r7, #8]
 8004aba:	4613      	mov	r3, r2
 8004abc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8004abe:	2300      	movs	r3, #0
 8004ac0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	75fb      	strb	r3, [r7, #23]
 8004ac6:	e027      	b.n	8004b18 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	0f1b      	lsrs	r3, r3, #28
 8004acc:	2b09      	cmp	r3, #9
 8004ace:	d80b      	bhi.n	8004ae8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	0f1b      	lsrs	r3, r3, #28
 8004ad4:	b2da      	uxtb	r2, r3
 8004ad6:	7dfb      	ldrb	r3, [r7, #23]
 8004ad8:	005b      	lsls	r3, r3, #1
 8004ada:	4619      	mov	r1, r3
 8004adc:	68bb      	ldr	r3, [r7, #8]
 8004ade:	440b      	add	r3, r1
 8004ae0:	3230      	adds	r2, #48	; 0x30
 8004ae2:	b2d2      	uxtb	r2, r2
 8004ae4:	701a      	strb	r2, [r3, #0]
 8004ae6:	e00a      	b.n	8004afe <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	0f1b      	lsrs	r3, r3, #28
 8004aec:	b2da      	uxtb	r2, r3
 8004aee:	7dfb      	ldrb	r3, [r7, #23]
 8004af0:	005b      	lsls	r3, r3, #1
 8004af2:	4619      	mov	r1, r3
 8004af4:	68bb      	ldr	r3, [r7, #8]
 8004af6:	440b      	add	r3, r1
 8004af8:	3237      	adds	r2, #55	; 0x37
 8004afa:	b2d2      	uxtb	r2, r2
 8004afc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	011b      	lsls	r3, r3, #4
 8004b02:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8004b04:	7dfb      	ldrb	r3, [r7, #23]
 8004b06:	005b      	lsls	r3, r3, #1
 8004b08:	3301      	adds	r3, #1
 8004b0a:	68ba      	ldr	r2, [r7, #8]
 8004b0c:	4413      	add	r3, r2
 8004b0e:	2200      	movs	r2, #0
 8004b10:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8004b12:	7dfb      	ldrb	r3, [r7, #23]
 8004b14:	3301      	adds	r3, #1
 8004b16:	75fb      	strb	r3, [r7, #23]
 8004b18:	7dfa      	ldrb	r2, [r7, #23]
 8004b1a:	79fb      	ldrb	r3, [r7, #7]
 8004b1c:	429a      	cmp	r2, r3
 8004b1e:	d3d3      	bcc.n	8004ac8 <IntToUnicode+0x18>
  }
}
 8004b20:	bf00      	nop
 8004b22:	371c      	adds	r7, #28
 8004b24:	46bd      	mov	sp, r7
 8004b26:	bc80      	pop	{r7}
 8004b28:	4770      	bx	lr
	...

08004b2c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b084      	sub	sp, #16
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	4a0d      	ldr	r2, [pc, #52]	; (8004b70 <HAL_PCD_MspInit+0x44>)
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	d113      	bne.n	8004b66 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8004b3e:	4b0d      	ldr	r3, [pc, #52]	; (8004b74 <HAL_PCD_MspInit+0x48>)
 8004b40:	69db      	ldr	r3, [r3, #28]
 8004b42:	4a0c      	ldr	r2, [pc, #48]	; (8004b74 <HAL_PCD_MspInit+0x48>)
 8004b44:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004b48:	61d3      	str	r3, [r2, #28]
 8004b4a:	4b0a      	ldr	r3, [pc, #40]	; (8004b74 <HAL_PCD_MspInit+0x48>)
 8004b4c:	69db      	ldr	r3, [r3, #28]
 8004b4e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004b52:	60fb      	str	r3, [r7, #12]
 8004b54:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8004b56:	2200      	movs	r2, #0
 8004b58:	2100      	movs	r1, #0
 8004b5a:	2014      	movs	r0, #20
 8004b5c:	f7fb fe2b 	bl	80007b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8004b60:	2014      	movs	r0, #20
 8004b62:	f7fb fe44 	bl	80007ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8004b66:	bf00      	nop
 8004b68:	3710      	adds	r7, #16
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	bd80      	pop	{r7, pc}
 8004b6e:	bf00      	nop
 8004b70:	40005c00 	.word	0x40005c00
 8004b74:	40021000 	.word	0x40021000

08004b78 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b082      	sub	sp, #8
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	f8d3 2268 	ldr.w	r2, [r3, #616]	; 0x268
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8004b8c:	4619      	mov	r1, r3
 8004b8e:	4610      	mov	r0, r2
 8004b90:	f7fe feb6 	bl	8003900 <USBD_LL_SetupStage>
}
 8004b94:	bf00      	nop
 8004b96:	3708      	adds	r7, #8
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	bd80      	pop	{r7, pc}

08004b9c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b082      	sub	sp, #8
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
 8004ba4:	460b      	mov	r3, r1
 8004ba6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	f8d3 0268 	ldr.w	r0, [r3, #616]	; 0x268
 8004bae:	78fb      	ldrb	r3, [r7, #3]
 8004bb0:	687a      	ldr	r2, [r7, #4]
 8004bb2:	015b      	lsls	r3, r3, #5
 8004bb4:	4413      	add	r3, r2
 8004bb6:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8004bba:	681a      	ldr	r2, [r3, #0]
 8004bbc:	78fb      	ldrb	r3, [r7, #3]
 8004bbe:	4619      	mov	r1, r3
 8004bc0:	f7fe fee9 	bl	8003996 <USBD_LL_DataOutStage>
}
 8004bc4:	bf00      	nop
 8004bc6:	3708      	adds	r7, #8
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	bd80      	pop	{r7, pc}

08004bcc <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b082      	sub	sp, #8
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
 8004bd4:	460b      	mov	r3, r1
 8004bd6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	f8d3 0268 	ldr.w	r0, [r3, #616]	; 0x268
 8004bde:	78fb      	ldrb	r3, [r7, #3]
 8004be0:	687a      	ldr	r2, [r7, #4]
 8004be2:	015b      	lsls	r3, r3, #5
 8004be4:	4413      	add	r3, r2
 8004be6:	333c      	adds	r3, #60	; 0x3c
 8004be8:	681a      	ldr	r2, [r3, #0]
 8004bea:	78fb      	ldrb	r3, [r7, #3]
 8004bec:	4619      	mov	r1, r3
 8004bee:	f7fe ff43 	bl	8003a78 <USBD_LL_DataInStage>
}
 8004bf2:	bf00      	nop
 8004bf4:	3708      	adds	r7, #8
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	bd80      	pop	{r7, pc}

08004bfa <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8004bfa:	b580      	push	{r7, lr}
 8004bfc:	b082      	sub	sp, #8
 8004bfe:	af00      	add	r7, sp, #0
 8004c00:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8004c08:	4618      	mov	r0, r3
 8004c0a:	f7ff f853 	bl	8003cb4 <USBD_LL_SOF>
}
 8004c0e:	bf00      	nop
 8004c10:	3708      	adds	r7, #8
 8004c12:	46bd      	mov	sp, r7
 8004c14:	bd80      	pop	{r7, pc}

08004c16 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 8004c16:	b580      	push	{r7, lr}
 8004c18:	b084      	sub	sp, #16
 8004c1a:	af00      	add	r7, sp, #0
 8004c1c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8004c1e:	2301      	movs	r3, #1
 8004c20:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	689b      	ldr	r3, [r3, #8]
 8004c26:	2b02      	cmp	r3, #2
 8004c28:	d001      	beq.n	8004c2e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8004c2a:	f7fb fbc9 	bl	80003c0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8004c34:	7bfa      	ldrb	r2, [r7, #15]
 8004c36:	4611      	mov	r1, r2
 8004c38:	4618      	mov	r0, r3
 8004c3a:	f7ff f803 	bl	8003c44 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8004c44:	4618      	mov	r0, r3
 8004c46:	f7fe ffbc 	bl	8003bc2 <USBD_LL_Reset>
}
 8004c4a:	bf00      	nop
 8004c4c:	3710      	adds	r7, #16
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	bd80      	pop	{r7, pc}
	...

08004c54 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b082      	sub	sp, #8
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8004c62:	4618      	mov	r0, r3
 8004c64:	f7fe fffd 	bl	8003c62 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	699b      	ldr	r3, [r3, #24]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d005      	beq.n	8004c7c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8004c70:	4b04      	ldr	r3, [pc, #16]	; (8004c84 <HAL_PCD_SuspendCallback+0x30>)
 8004c72:	691b      	ldr	r3, [r3, #16]
 8004c74:	4a03      	ldr	r2, [pc, #12]	; (8004c84 <HAL_PCD_SuspendCallback+0x30>)
 8004c76:	f043 0306 	orr.w	r3, r3, #6
 8004c7a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8004c7c:	bf00      	nop
 8004c7e:	3708      	adds	r7, #8
 8004c80:	46bd      	mov	sp, r7
 8004c82:	bd80      	pop	{r7, pc}
 8004c84:	e000ed00 	.word	0xe000ed00

08004c88 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b082      	sub	sp, #8
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8004c96:	4618      	mov	r0, r3
 8004c98:	f7fe fff7 	bl	8003c8a <USBD_LL_Resume>
}
 8004c9c:	bf00      	nop
 8004c9e:	3708      	adds	r7, #8
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	bd80      	pop	{r7, pc}

08004ca4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b082      	sub	sp, #8
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8004cac:	4a1f      	ldr	r2, [pc, #124]	; (8004d2c <USBD_LL_Init+0x88>)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
  pdev->pData = &hpcd_USB_FS;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	4a1d      	ldr	r2, [pc, #116]	; (8004d2c <USBD_LL_Init+0x88>)
 8004cb8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8004cbc:	4b1b      	ldr	r3, [pc, #108]	; (8004d2c <USBD_LL_Init+0x88>)
 8004cbe:	4a1c      	ldr	r2, [pc, #112]	; (8004d30 <USBD_LL_Init+0x8c>)
 8004cc0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8004cc2:	4b1a      	ldr	r3, [pc, #104]	; (8004d2c <USBD_LL_Init+0x88>)
 8004cc4:	2208      	movs	r2, #8
 8004cc6:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8004cc8:	4b18      	ldr	r3, [pc, #96]	; (8004d2c <USBD_LL_Init+0x88>)
 8004cca:	2202      	movs	r2, #2
 8004ccc:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8004cce:	4b17      	ldr	r3, [pc, #92]	; (8004d2c <USBD_LL_Init+0x88>)
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8004cd4:	4b15      	ldr	r3, [pc, #84]	; (8004d2c <USBD_LL_Init+0x88>)
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8004cda:	4b14      	ldr	r3, [pc, #80]	; (8004d2c <USBD_LL_Init+0x88>)
 8004cdc:	2200      	movs	r2, #0
 8004cde:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8004ce0:	4812      	ldr	r0, [pc, #72]	; (8004d2c <USBD_LL_Init+0x88>)
 8004ce2:	f7fb ff21 	bl	8000b28 <HAL_PCD_Init>
 8004ce6:	4603      	mov	r3, r0
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d001      	beq.n	8004cf0 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8004cec:	f7fb fb68 	bl	80003c0 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8004cf6:	2318      	movs	r3, #24
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	2100      	movs	r1, #0
 8004cfc:	f7fc fda6 	bl	800184c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8004d06:	2358      	movs	r3, #88	; 0x58
 8004d08:	2200      	movs	r2, #0
 8004d0a:	2180      	movs	r1, #128	; 0x80
 8004d0c:	f7fc fd9e 	bl	800184c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0x100);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8004d16:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	2181      	movs	r1, #129	; 0x81
 8004d1e:	f7fc fd95 	bl	800184c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_HID */
  return USBD_OK;
 8004d22:	2300      	movs	r3, #0
}
 8004d24:	4618      	mov	r0, r3
 8004d26:	3708      	adds	r7, #8
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	bd80      	pop	{r7, pc}
 8004d2c:	20000660 	.word	0x20000660
 8004d30:	40005c00 	.word	0x40005c00

08004d34 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	b084      	sub	sp, #16
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8004d40:	2300      	movs	r3, #0
 8004d42:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	f7fb ffcd 	bl	8000cea <HAL_PCD_Start>
 8004d50:	4603      	mov	r3, r0
 8004d52:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8004d54:	7bfb      	ldrb	r3, [r7, #15]
 8004d56:	4618      	mov	r0, r3
 8004d58:	f000 f934 	bl	8004fc4 <USBD_Get_USB_Status>
 8004d5c:	4603      	mov	r3, r0
 8004d5e:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8004d60:	7bbb      	ldrb	r3, [r7, #14]
}
 8004d62:	4618      	mov	r0, r3
 8004d64:	3710      	adds	r7, #16
 8004d66:	46bd      	mov	sp, r7
 8004d68:	bd80      	pop	{r7, pc}

08004d6a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8004d6a:	b580      	push	{r7, lr}
 8004d6c:	b084      	sub	sp, #16
 8004d6e:	af00      	add	r7, sp, #0
 8004d70:	6078      	str	r0, [r7, #4]
 8004d72:	4608      	mov	r0, r1
 8004d74:	4611      	mov	r1, r2
 8004d76:	461a      	mov	r2, r3
 8004d78:	4603      	mov	r3, r0
 8004d7a:	70fb      	strb	r3, [r7, #3]
 8004d7c:	460b      	mov	r3, r1
 8004d7e:	70bb      	strb	r3, [r7, #2]
 8004d80:	4613      	mov	r3, r2
 8004d82:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8004d84:	2300      	movs	r3, #0
 8004d86:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8004d88:	2300      	movs	r3, #0
 8004d8a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8004d92:	78bb      	ldrb	r3, [r7, #2]
 8004d94:	883a      	ldrh	r2, [r7, #0]
 8004d96:	78f9      	ldrb	r1, [r7, #3]
 8004d98:	f7fc f900 	bl	8000f9c <HAL_PCD_EP_Open>
 8004d9c:	4603      	mov	r3, r0
 8004d9e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8004da0:	7bfb      	ldrb	r3, [r7, #15]
 8004da2:	4618      	mov	r0, r3
 8004da4:	f000 f90e 	bl	8004fc4 <USBD_Get_USB_Status>
 8004da8:	4603      	mov	r3, r0
 8004daa:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 8004dac:	7bbb      	ldrb	r3, [r7, #14]
}
 8004dae:	4618      	mov	r0, r3
 8004db0:	3710      	adds	r7, #16
 8004db2:	46bd      	mov	sp, r7
 8004db4:	bd80      	pop	{r7, pc}

08004db6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8004db6:	b580      	push	{r7, lr}
 8004db8:	b084      	sub	sp, #16
 8004dba:	af00      	add	r7, sp, #0
 8004dbc:	6078      	str	r0, [r7, #4]
 8004dbe:	460b      	mov	r3, r1
 8004dc0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004dd0:	78fa      	ldrb	r2, [r7, #3]
 8004dd2:	4611      	mov	r1, r2
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	f7fc f941 	bl	800105c <HAL_PCD_EP_Close>
 8004dda:	4603      	mov	r3, r0
 8004ddc:	73fb      	strb	r3, [r7, #15]
      
  usb_status =  USBD_Get_USB_Status(hal_status);
 8004dde:	7bfb      	ldrb	r3, [r7, #15]
 8004de0:	4618      	mov	r0, r3
 8004de2:	f000 f8ef 	bl	8004fc4 <USBD_Get_USB_Status>
 8004de6:	4603      	mov	r3, r0
 8004de8:	73bb      	strb	r3, [r7, #14]

  return usb_status;  
 8004dea:	7bbb      	ldrb	r3, [r7, #14]
}
 8004dec:	4618      	mov	r0, r3
 8004dee:	3710      	adds	r7, #16
 8004df0:	46bd      	mov	sp, r7
 8004df2:	bd80      	pop	{r7, pc}

08004df4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b084      	sub	sp, #16
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
 8004dfc:	460b      	mov	r3, r1
 8004dfe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8004e00:	2300      	movs	r3, #0
 8004e02:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8004e04:	2300      	movs	r3, #0
 8004e06:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004e0e:	78fa      	ldrb	r2, [r7, #3]
 8004e10:	4611      	mov	r1, r2
 8004e12:	4618      	mov	r0, r3
 8004e14:	f7fc f9d7 	bl	80011c6 <HAL_PCD_EP_SetStall>
 8004e18:	4603      	mov	r3, r0
 8004e1a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8004e1c:	7bfb      	ldrb	r3, [r7, #15]
 8004e1e:	4618      	mov	r0, r3
 8004e20:	f000 f8d0 	bl	8004fc4 <USBD_Get_USB_Status>
 8004e24:	4603      	mov	r3, r0
 8004e26:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8004e28:	7bbb      	ldrb	r3, [r7, #14]
}
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	3710      	adds	r7, #16
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	bd80      	pop	{r7, pc}

08004e32 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8004e32:	b580      	push	{r7, lr}
 8004e34:	b084      	sub	sp, #16
 8004e36:	af00      	add	r7, sp, #0
 8004e38:	6078      	str	r0, [r7, #4]
 8004e3a:	460b      	mov	r3, r1
 8004e3c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8004e3e:	2300      	movs	r3, #0
 8004e40:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8004e42:	2300      	movs	r3, #0
 8004e44:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004e4c:	78fa      	ldrb	r2, [r7, #3]
 8004e4e:	4611      	mov	r1, r2
 8004e50:	4618      	mov	r0, r3
 8004e52:	f7fc fa12 	bl	800127a <HAL_PCD_EP_ClrStall>
 8004e56:	4603      	mov	r3, r0
 8004e58:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8004e5a:	7bfb      	ldrb	r3, [r7, #15]
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	f000 f8b1 	bl	8004fc4 <USBD_Get_USB_Status>
 8004e62:	4603      	mov	r3, r0
 8004e64:	73bb      	strb	r3, [r7, #14]

  return usb_status; 
 8004e66:	7bbb      	ldrb	r3, [r7, #14]
}
 8004e68:	4618      	mov	r0, r3
 8004e6a:	3710      	adds	r7, #16
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	bd80      	pop	{r7, pc}

08004e70 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8004e70:	b480      	push	{r7}
 8004e72:	b085      	sub	sp, #20
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
 8004e78:	460b      	mov	r3, r1
 8004e7a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004e82:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 8004e84:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	da08      	bge.n	8004e9e <USBD_LL_IsStallEP+0x2e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8004e8c:	78fb      	ldrb	r3, [r7, #3]
 8004e8e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004e92:	68fa      	ldr	r2, [r7, #12]
 8004e94:	015b      	lsls	r3, r3, #5
 8004e96:	4413      	add	r3, r2
 8004e98:	332a      	adds	r3, #42	; 0x2a
 8004e9a:	781b      	ldrb	r3, [r3, #0]
 8004e9c:	e008      	b.n	8004eb0 <USBD_LL_IsStallEP+0x40>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8004e9e:	78fb      	ldrb	r3, [r7, #3]
 8004ea0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004ea4:	68fa      	ldr	r2, [r7, #12]
 8004ea6:	015b      	lsls	r3, r3, #5
 8004ea8:	4413      	add	r3, r2
 8004eaa:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 8004eae:	781b      	ldrb	r3, [r3, #0]
  }
}
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	3714      	adds	r7, #20
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	bc80      	pop	{r7}
 8004eb8:	4770      	bx	lr

08004eba <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8004eba:	b580      	push	{r7, lr}
 8004ebc:	b084      	sub	sp, #16
 8004ebe:	af00      	add	r7, sp, #0
 8004ec0:	6078      	str	r0, [r7, #4]
 8004ec2:	460b      	mov	r3, r1
 8004ec4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8004eca:	2300      	movs	r3, #0
 8004ecc:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004ed4:	78fa      	ldrb	r2, [r7, #3]
 8004ed6:	4611      	mov	r1, r2
 8004ed8:	4618      	mov	r0, r3
 8004eda:	f7fc f83a 	bl	8000f52 <HAL_PCD_SetAddress>
 8004ede:	4603      	mov	r3, r0
 8004ee0:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8004ee2:	7bfb      	ldrb	r3, [r7, #15]
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	f000 f86d 	bl	8004fc4 <USBD_Get_USB_Status>
 8004eea:	4603      	mov	r3, r0
 8004eec:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8004eee:	7bbb      	ldrb	r3, [r7, #14]
}
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	3710      	adds	r7, #16
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	bd80      	pop	{r7, pc}

08004ef8 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b086      	sub	sp, #24
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	60f8      	str	r0, [r7, #12]
 8004f00:	607a      	str	r2, [r7, #4]
 8004f02:	461a      	mov	r2, r3
 8004f04:	460b      	mov	r3, r1
 8004f06:	72fb      	strb	r3, [r7, #11]
 8004f08:	4613      	mov	r3, r2
 8004f0a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8004f10:	2300      	movs	r3, #0
 8004f12:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8004f1a:	893b      	ldrh	r3, [r7, #8]
 8004f1c:	7af9      	ldrb	r1, [r7, #11]
 8004f1e:	687a      	ldr	r2, [r7, #4]
 8004f20:	f7fc f918 	bl	8001154 <HAL_PCD_EP_Transmit>
 8004f24:	4603      	mov	r3, r0
 8004f26:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8004f28:	7dfb      	ldrb	r3, [r7, #23]
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	f000 f84a 	bl	8004fc4 <USBD_Get_USB_Status>
 8004f30:	4603      	mov	r3, r0
 8004f32:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 8004f34:	7dbb      	ldrb	r3, [r7, #22]
}
 8004f36:	4618      	mov	r0, r3
 8004f38:	3718      	adds	r7, #24
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	bd80      	pop	{r7, pc}

08004f3e <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8004f3e:	b580      	push	{r7, lr}
 8004f40:	b086      	sub	sp, #24
 8004f42:	af00      	add	r7, sp, #0
 8004f44:	60f8      	str	r0, [r7, #12]
 8004f46:	607a      	str	r2, [r7, #4]
 8004f48:	461a      	mov	r2, r3
 8004f4a:	460b      	mov	r3, r1
 8004f4c:	72fb      	strb	r3, [r7, #11]
 8004f4e:	4613      	mov	r3, r2
 8004f50:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8004f52:	2300      	movs	r3, #0
 8004f54:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8004f56:	2300      	movs	r3, #0
 8004f58:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8004f60:	893b      	ldrh	r3, [r7, #8]
 8004f62:	7af9      	ldrb	r1, [r7, #11]
 8004f64:	687a      	ldr	r2, [r7, #4]
 8004f66:	f7fc f8bb 	bl	80010e0 <HAL_PCD_EP_Receive>
 8004f6a:	4603      	mov	r3, r0
 8004f6c:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8004f6e:	7dfb      	ldrb	r3, [r7, #23]
 8004f70:	4618      	mov	r0, r3
 8004f72:	f000 f827 	bl	8004fc4 <USBD_Get_USB_Status>
 8004f76:	4603      	mov	r3, r0
 8004f78:	75bb      	strb	r3, [r7, #22]
  	
  return usb_status; 
 8004f7a:	7dbb      	ldrb	r3, [r7, #22]
}
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	3718      	adds	r7, #24
 8004f80:	46bd      	mov	sp, r7
 8004f82:	bd80      	pop	{r7, pc}

08004f84 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8004f84:	b480      	push	{r7}
 8004f86:	b083      	sub	sp, #12
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8004f8c:	4b02      	ldr	r3, [pc, #8]	; (8004f98 <USBD_static_malloc+0x14>)
}
 8004f8e:	4618      	mov	r0, r3
 8004f90:	370c      	adds	r7, #12
 8004f92:	46bd      	mov	sp, r7
 8004f94:	bc80      	pop	{r7}
 8004f96:	4770      	bx	lr
 8004f98:	20000184 	.word	0x20000184

08004f9c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8004f9c:	b480      	push	{r7}
 8004f9e:	b083      	sub	sp, #12
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]

}
 8004fa4:	bf00      	nop
 8004fa6:	370c      	adds	r7, #12
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	bc80      	pop	{r7}
 8004fac:	4770      	bx	lr

08004fae <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8004fae:	b480      	push	{r7}
 8004fb0:	b083      	sub	sp, #12
 8004fb2:	af00      	add	r7, sp, #0
 8004fb4:	6078      	str	r0, [r7, #4]
 8004fb6:	460b      	mov	r3, r1
 8004fb8:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8004fba:	bf00      	nop
 8004fbc:	370c      	adds	r7, #12
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	bc80      	pop	{r7}
 8004fc2:	4770      	bx	lr

08004fc4 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8004fc4:	b480      	push	{r7}
 8004fc6:	b085      	sub	sp, #20
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	4603      	mov	r3, r0
 8004fcc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8004fce:	2300      	movs	r3, #0
 8004fd0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8004fd2:	79fb      	ldrb	r3, [r7, #7]
 8004fd4:	2b03      	cmp	r3, #3
 8004fd6:	d817      	bhi.n	8005008 <USBD_Get_USB_Status+0x44>
 8004fd8:	a201      	add	r2, pc, #4	; (adr r2, 8004fe0 <USBD_Get_USB_Status+0x1c>)
 8004fda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fde:	bf00      	nop
 8004fe0:	08004ff1 	.word	0x08004ff1
 8004fe4:	08004ff7 	.word	0x08004ff7
 8004fe8:	08004ffd 	.word	0x08004ffd
 8004fec:	08005003 	.word	0x08005003
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	73fb      	strb	r3, [r7, #15]
    break;
 8004ff4:	e00b      	b.n	800500e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8004ff6:	2302      	movs	r3, #2
 8004ff8:	73fb      	strb	r3, [r7, #15]
    break;
 8004ffa:	e008      	b.n	800500e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8004ffc:	2301      	movs	r3, #1
 8004ffe:	73fb      	strb	r3, [r7, #15]
    break;
 8005000:	e005      	b.n	800500e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8005002:	2302      	movs	r3, #2
 8005004:	73fb      	strb	r3, [r7, #15]
    break;
 8005006:	e002      	b.n	800500e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8005008:	2302      	movs	r3, #2
 800500a:	73fb      	strb	r3, [r7, #15]
    break;
 800500c:	bf00      	nop
  }
  return usb_status;
 800500e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005010:	4618      	mov	r0, r3
 8005012:	3714      	adds	r7, #20
 8005014:	46bd      	mov	sp, r7
 8005016:	bc80      	pop	{r7}
 8005018:	4770      	bx	lr
 800501a:	bf00      	nop

0800501c <__libc_init_array>:
 800501c:	b570      	push	{r4, r5, r6, lr}
 800501e:	2500      	movs	r5, #0
 8005020:	4e0c      	ldr	r6, [pc, #48]	; (8005054 <__libc_init_array+0x38>)
 8005022:	4c0d      	ldr	r4, [pc, #52]	; (8005058 <__libc_init_array+0x3c>)
 8005024:	1ba4      	subs	r4, r4, r6
 8005026:	10a4      	asrs	r4, r4, #2
 8005028:	42a5      	cmp	r5, r4
 800502a:	d109      	bne.n	8005040 <__libc_init_array+0x24>
 800502c:	f000 f822 	bl	8005074 <_init>
 8005030:	2500      	movs	r5, #0
 8005032:	4e0a      	ldr	r6, [pc, #40]	; (800505c <__libc_init_array+0x40>)
 8005034:	4c0a      	ldr	r4, [pc, #40]	; (8005060 <__libc_init_array+0x44>)
 8005036:	1ba4      	subs	r4, r4, r6
 8005038:	10a4      	asrs	r4, r4, #2
 800503a:	42a5      	cmp	r5, r4
 800503c:	d105      	bne.n	800504a <__libc_init_array+0x2e>
 800503e:	bd70      	pop	{r4, r5, r6, pc}
 8005040:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005044:	4798      	blx	r3
 8005046:	3501      	adds	r5, #1
 8005048:	e7ee      	b.n	8005028 <__libc_init_array+0xc>
 800504a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800504e:	4798      	blx	r3
 8005050:	3501      	adds	r5, #1
 8005052:	e7f2      	b.n	800503a <__libc_init_array+0x1e>
 8005054:	080050e8 	.word	0x080050e8
 8005058:	080050e8 	.word	0x080050e8
 800505c:	080050e8 	.word	0x080050e8
 8005060:	080050ec 	.word	0x080050ec

08005064 <memset>:
 8005064:	4603      	mov	r3, r0
 8005066:	4402      	add	r2, r0
 8005068:	4293      	cmp	r3, r2
 800506a:	d100      	bne.n	800506e <memset+0xa>
 800506c:	4770      	bx	lr
 800506e:	f803 1b01 	strb.w	r1, [r3], #1
 8005072:	e7f9      	b.n	8005068 <memset+0x4>

08005074 <_init>:
 8005074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005076:	bf00      	nop
 8005078:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800507a:	bc08      	pop	{r3}
 800507c:	469e      	mov	lr, r3
 800507e:	4770      	bx	lr

08005080 <_fini>:
 8005080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005082:	bf00      	nop
 8005084:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005086:	bc08      	pop	{r3}
 8005088:	469e      	mov	lr, r3
 800508a:	4770      	bx	lr
